{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Inicio","text":""},{"location":"#bienvenidos-al-submodulo-nuevas-tecnologias-de-programacion","title":"\ud83d\ude80 Bienvenidos al Subm\u00f3dulo Nuevas Tecnolog\u00edas de Programaci\u00f3n","text":""},{"location":"#pacto-pedagogico-y-presentacion","title":"Pacto Pedag\u00f3gico y Presentaci\u00f3n","text":"<p>En este curso iniciaremos con la construcci\u00f3n de nuestro pacto pedag\u00f3gico y la presentaci\u00f3n de los retos empresariales que guiar\u00e1n el desarrollo del Proyecto Integrador. Este espacio ser\u00e1 clave para definir acuerdos, expectativas y el enfoque pr\u00e1ctico del aprendizaje.</p>"},{"location":"#estructura-y-retos-del-curso","title":"Estructura y Retos del Curso","text":""},{"location":"#1-fundamentacion-en-python","title":"1. Fundamentaci\u00f3n en PYTHON","text":"<ul> <li>Par\u00e1metros de configuraci\u00f3n de Python y sus herramientas: Variables de entorno, configuraci\u00f3n de IDEs.</li> <li>Resoluci\u00f3n de problemas comunes y gu\u00eda de uso de Python: Declaraci\u00f3n de variables, uso de condicionales, ciclos y funciones.</li> <li>Estructuras de datos en Python: Listas, tuplas y diccionarios.</li> </ul>"},{"location":"#2-fundamentacion-en-sistemas-de-control-de-versiones-git","title":"2. Fundamentaci\u00f3n en Sistemas de Control de Versiones (Git)","text":"<ul> <li>Introducci\u00f3n a Git: Conceptos b\u00e1sicos, terminolog\u00eda y beneficios para el control de versiones.</li> <li>Configuraci\u00f3n inicial de Git: Configuraci\u00f3n de usuario, iniciaci\u00f3n de repositorios y conceptos b\u00e1sicos del flujo de trabajo.</li> <li>Creaci\u00f3n y clonaci\u00f3n de repositorios Git.</li> <li>Manejo de archivos: A\u00f1adir, modificar, eliminar y confirmar cambios (commits).</li> <li>Uso de ramas en Git: Creaci\u00f3n, fusi\u00f3n y resoluci\u00f3n de conflictos.</li> </ul>"},{"location":"#3-recoleccion-de-evidencia-del-primer-momento","title":"3. Recolecci\u00f3n de Evidencia del PRIMER MOMENTO","text":"<ul> <li>Primer seguimiento al Proyecto Integrador.</li> </ul>"},{"location":"#4-configuracion-de-ambientes-virtuales","title":"4. Configuraci\u00f3n de Ambientes Virtuales","text":"<ul> <li>Creaci\u00f3n y gesti\u00f3n de ambientes virtuales en Python: Para aislar dependencias de proyecto.</li> <li>Herramientas: Uso de <code>venv</code> y <code>conda</code> para la creaci\u00f3n de ambientes virtuales.</li> <li>Configuraci\u00f3n espec\u00edfica: Disposici\u00f3n de archivos y configuraciones del proyecto dentro del ambiente virtual.</li> </ul>"},{"location":"#5-fundamentos-del-analisis-de-datos-con-pandas","title":"5. Fundamentos del An\u00e1lisis de Datos con Pandas","text":"<ul> <li>Introducci\u00f3n a Pandas: Estructuras de datos como DataFrame y Series.</li> <li>Operaciones b\u00e1sicas de manipulaci\u00f3n de datos: Filtrado, agrupaci\u00f3n, fusi\u00f3n, etc.</li> </ul>"},{"location":"#6-recoleccion-de-evidencia-del-segundo-momento","title":"6. Recolecci\u00f3n de Evidencia del SEGUNDO MOMENTO","text":"<ul> <li>Segundo seguimiento al Proyecto Integrador.</li> </ul>"},{"location":"#7-visualizacion-de-datos-con-matplotlib-y-seaborn","title":"7. Visualizaci\u00f3n de Datos con Matplotlib y Seaborn","text":"<ul> <li>Creaci\u00f3n de gr\u00e1ficos b\u00e1sicos y avanzados con Matplotlib.</li> <li>Uso de Seaborn: Visualizaciones estad\u00edsticas m\u00e1s complejas y atractivas.</li> <li>Integraci\u00f3n con Pandas: Visualizaci\u00f3n directa de DataFrames.</li> </ul>"},{"location":"#8-creacion-de-reportes-en-html-con-resultados-analiticos","title":"8. Creaci\u00f3n de Reportes en HTML con Resultados Anal\u00edticos","text":"<ul> <li>Conversi\u00f3n de DataFrames de Pandas a HTML: Para integraci\u00f3n en p\u00e1ginas web.</li> <li>Personalizaci\u00f3n de tablas HTML con CSS: Mejorar la presentaci\u00f3n de los datos.</li> <li>Uso de librer\u00edas de JavaScript como DataTables: Para hacer tablas HTML interactivas.</li> </ul>"},{"location":"#9-recoleccion-de-evidencia-del-tercer-momento","title":"9. Recolecci\u00f3n de Evidencia del TERCER MOMENTO","text":"<ul> <li>Sustentaci\u00f3n de Proyectos Integradores.</li> <li>Digitaci\u00f3n de Evidencias del Tercer Momento.</li> </ul>"},{"location":"#metodologia-del-curso","title":"Metodolog\u00eda del curso","text":"<p>El curso combina teor\u00eda y pr\u00e1ctica para garantizar que aprendas de manera efectiva:</p> <ul> <li>Clases te\u00f3ricas: Explicaciones claras y concisas sobre los conceptos fundamentales.</li> <li>Laboratorios pr\u00e1cticos: Ejercicios guiados para aplicar lo aprendido en entornos controlados.</li> <li>Proyectos integradores: Desarrollo de soluciones completas que integran Python, Git, Pandas y herramientas de visualizaci\u00f3n.</li> </ul>"},{"location":"#compromiso-del-cesde","title":"Compromiso del CESDE","text":"<p>En el CESDE, estamos comprometidos con tu \u00e9xito. Este curso no solo busca ense\u00f1arte herramientas tecnol\u00f3gicas, sino tambi\u00e9n inspirarte a ser un agente de cambio en el mundo digital. Nuestro objetivo es que al finalizar este programa, tengas la confianza y las habilidades necesarias para enfrentar cualquier desaf\u00edo tecnol\u00f3gico.</p>"},{"location":"#comencemos-este-viaje-juntos","title":"\u00a1Comencemos este viaje juntos!","text":"<p>Estamos emocionados de acompa\u00f1arte en este proceso de aprendizaje. Con dedicaci\u00f3n y esfuerzo, pronto estar\u00e1s creando soluciones innovadoras, analizando datos de manera eficiente y colaborando en proyectos tecnol\u00f3gicos de alto impacto.</p> <p>\u00a1Bienvenido al futuro de la tecnolog\u00eda!</p>"},{"location":"about/","title":"About","text":"<p>El El Subm\u00f3dulo Nuevas Tecnolog\u00edas de Programaci\u00f3n es una iniciativa educativa del CESDE, dise\u00f1ada para introducir a los estudiantes en herramientas clave como Python, Git y Pandas. Este curso combina teor\u00eda y pr\u00e1ctica para brindar una base s\u00f3lida en programaci\u00f3n, an\u00e1lisis de datos y colaboraci\u00f3n en proyectos tecnol\u00f3gicos.</p>"},{"location":"about/#docente-del-curso","title":"Docente del Curso","text":"<p>\u00a1Hola a todos!</p> <p>Soy Jhon Fredy Valencia G\u00f3mez, su docente para este programa de Desarrollo de Software. Me emociona mucho darles la bienvenida y comenzar este viaje de aprendizaje juntos.</p> <p>En este programa, mi objetivo es proporcionarles una formaci\u00f3n pr\u00e1ctica y completa en desarrollo de software. Mi enfoque se basa en el aprendizaje activo, utilizando ejercicios, proyectos y casos de estudio que les permitir\u00e1n aplicar inmediatamente lo aprendido.</p> <p>Mi experiencia en el CESDE y el SENA me ha ense\u00f1ado la importancia de una ense\u00f1anza clara, accesible y motivadora. Estoy comprometido con su \u00e9xito y har\u00e9 todo lo posible para apoyarlos en cada etapa del proceso de aprendizaje, respondiendo a sus dudas y brind\u00e1ndoles la retroalimentaci\u00f3n que necesitan.</p>"},{"location":"about/#proposito-del-curso","title":"Prop\u00f3sito del Curso","text":"<p>Este curso busca capacitar a los estudiantes en el uso de herramientas modernas para resolver problemas reales, desde la automatizaci\u00f3n de tareas hasta el an\u00e1lisis de grandes vol\u00famenes de datos. Al finalizar, los participantes estar\u00e1n preparados para aplicar sus conocimientos en entornos profesionales y colaborar en proyectos tecnol\u00f3gicos de alto impacto.</p> <p>\u00a1\u00danete a nosotros y comienza tu camino hacia el futuro de la tecnolog\u00eda!</p>"},{"location":"activities/p1/","title":"Semana 2:  Ejercicios de Python para Resolver en Google Colab","text":"<p>\u00a1Bienvenidos a este desaf\u00edo de programaci\u00f3n en Python!\u00a0A continuaci\u00f3n, encontrar\u00e1s 10 ejercicios que te ayudar\u00e1n a practicar lo que has aprendido sobre variables, tipos de datos, entrada y salida, y estructuras de control condicionales.</p> <p>Instrucciones:</p> <ul> <li>Abre Google Colab:\u00a0Ve a\u00a0https://colab.research.google.com</li> <li>Crea un nuevo cuaderno:\u00a0Haz clic en \"Nuevo cuaderno\".</li> <li>Resuelve los ejercicios:\u00a0Para cada ejercicio, crea una nueva celda de c\u00f3digo y escribe el c\u00f3digo Python que lo resuelva.</li> <li>Ejecuta el c\u00f3digo:\u00a0Presiona\u00a0Shift + Enter</li> </ul>"},{"location":"activities/p1/#ejercicios","title":"Ejercicios","text":"<ol> <li>Escribe un programa que pida al usuario su nombre y muestre un mensaje de bienvenida usando una cadena f.</li> <li>Crea un programa que solicite dos n\u00fameros al usuario y muestre su suma.</li> <li>Escribe un programa que pida un n\u00famero entero y determine si es par o impar.</li> <li>Crea un programa que calcule el \u00e1rea de un rect\u00e1ngulo pidiendo al usuario el largo y el ancho.</li> <li>Escribe un programa que solicite la edad del usuario y determine si es mayor o menor de edad.</li> <li>Crea un programa que pida una frase al usuario y cuente cu\u00e1ntos caracteres tiene.</li> <li>Escribe un programa que cree una lista de tres frutas, permita a\u00f1adir una fruta ingresada por el usuario y muestre la lista actualizada.</li> <li>Crea un programa que convierta una temperatura de Celsius a Fahrenheit.</li> <li>Escribe un programa que pida un n\u00famero y determine si es positivo, negativo o cero.</li> <li>Crea un programa que imprima los primeros 5 n\u00fameros enteros usando un bucle for.</li> <li>Escribe un programa que cree un diccionario con el nombre, edad y ciudad del usuario, y lo muestre.</li> <li>Crea un programa que pida una palabra y verifique si es un pal\u00edndromo.</li> <li>Escribe un programa que calcule el promedio de tres n\u00fameros ingresados por el usuario.</li> <li>Crea un programa que imprima los n\u00fameros pares del 1 al 10 usando un bucle for.</li> <li>Escribe un programa que cree una tupla con tres colores, pida al usuario un color favorito y verifique si est\u00e1 en la tupla.</li> <li>Crea un programa que cuente las vocales en una palabra ingresada por el usuario.</li> <li>Escribe un programa que determine si un a\u00f1o ingresado por el usuario es bisiesto.</li> <li>Crea un programa que use una constante para el valor de PI y calcule el \u00e1rea de un c\u00edrculo dado su radio.</li> <li>Escribe un programa que concatene dos palabras ingresadas por el usuario.</li> <li>Crea un programa que valide si una contrase\u00f1a ingresada tiene al menos 8 caracteres.</li> </ol>"},{"location":"activities/p2/","title":"Semana 3: Estructuras de control (bucles) y Estructuras de datos - Colecciones en Python","text":""},{"location":"activities/p2/#paso-0-antes-de-empezar","title":"Paso 0 \u2013 Antes de empezar","text":"<p>\u00a1Haz un fork del repositorio! Dir\u00edgete a: <pre><code>https://github.com/jfinfocesde/act_ntp_s3.git\n</code></pre> y pulsa el bot\u00f3n Fork (esquina superior derecha). Tras ello cl\u00f3nalo en tu equipo:</p> <pre><code>git clone https://github.com/TU-USUARIO/act_ntp_s3.git\ncd act_ntp_s3\n</code></pre>"},{"location":"activities/p2/#ejercicio-01-for","title":"Ejercicio 01 \u2013 for","text":"<p>Enunciado: Usando un ciclo for, imprime los n\u00fameros enteros del 0 al 9, cada uno en una l\u00ednea.</p>"},{"location":"activities/p2/#ejercicio-02-while","title":"Ejercicio 02 \u2013 while","text":"<p>Enunciado: Mediante un ciclo while, imprime los n\u00fameros enteros del 10 al 1 en orden descendente, cada n\u00famero en una l\u00ednea.</p>"},{"location":"activities/p2/#ejercicio-03-for","title":"Ejercicio 03 \u2013 for","text":"<p>Enunciado: Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado final.</p>"},{"location":"activities/p2/#ejercicio-04-while","title":"Ejercicio 04 \u2013 while","text":"<p>Enunciado: Utilizando un ciclo while, solicita al usuario que ingrese n\u00fameros. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los n\u00fameros ingresados.</p>"},{"location":"activities/p2/#ejercicio-05-for","title":"Ejercicio 05 \u2013 for","text":"<p>Enunciado: Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 \u00d7 1, 7 \u00d7 2, \u2026, 7 \u00d7 10, cada resultado en una l\u00ednea.</p>"},{"location":"activities/p2/#ejercicio-06-while","title":"Ejercicio 06 \u2013 while","text":"<p>Enunciado: Mediante un ciclo while, genera y muestra los primeros 15 m\u00faltiplos de 3, comenzando desde 3.</p>"},{"location":"activities/p2/#ejercicio-07-for","title":"Ejercicio 07 \u2013 for","text":"<p>Enunciado: Con un ciclo for, cuenta cu\u00e1ntas letras \u201ca\u201d (min\u00fascula) hay en la cadena <code>texto = \"manzana\"</code> y muestra el total.</p>"},{"location":"activities/p2/#ejercicio-08-while","title":"Ejercicio 08 \u2013 while","text":"<p>Enunciado: Usando un ciclo while, calcula y muestra los cuadrados de los n\u00fameros del 1 al 20 (1\u00b2, 2\u00b2, \u2026, 20\u00b2), cada resultado en una l\u00ednea.</p>"},{"location":"activities/p2/#ejercicio-09-for","title":"Ejercicio 09 \u2013 for","text":"<p>Enunciado: Con un ciclo for, imprime todos los n\u00fameros pares del 2 al 50 (ambos inclusive), cada n\u00famero en una l\u00ednea.</p>"},{"location":"activities/p2/#ejercicio-10-while","title":"Ejercicio 10 \u2013 while","text":"<p>Enunciado: Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \u201cfin\u201d. Al final, muestra cu\u00e1ntas palabras se leyeron (sin contar \u201cfin\u201d).</p>"},{"location":"activities/p2/#ejercicio-11-for","title":"Ejercicio 11 \u2013 for","text":"<p>Enunciado: Con un ciclo for, imprime cada car\u00e1cter de la palabra <code>\"python\"</code> en una l\u00ednea separada.</p>"},{"location":"activities/p2/#ejercicio-12-while","title":"Ejercicio 12 \u2013 while","text":"<p>Enunciado: Utilizando un ciclo while, calcula el factorial de un n\u00famero entero <code>n</code> introducido por el usuario y muestra el resultado.</p>"},{"location":"activities/p2/#ejercicio-13-for","title":"Ejercicio 13 \u2013 for","text":"<p>Enunciado: Con un ciclo for, imprime los n\u00fameros del 1 al 30 saltando de 3 en 3 (1, 4, 7, \u2026, 28), cada n\u00famero en una l\u00ednea.</p>"},{"location":"activities/p2/#ejercicio-14-while","title":"Ejercicio 14 \u2013 while","text":"<p>Enunciado: Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un n\u00famero aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitaci\u00f3n al final.</p>"},{"location":"activities/p2/#ejercicio-15-for","title":"Ejercicio 15 \u2013 for","text":"<p>Enunciado: Con un ciclo for, imprime un tri\u00e1ngulo rect\u00e1ngulo de 5 filas usando el car\u00e1cter <code>*</code>. Ejemplo de salida: <pre><code>*\n**\n***\n****\n*****\n</code></pre></p>"},{"location":"activities/p2/#ejercicio-16-while","title":"Ejercicio 16 \u2013 while","text":"<p>Enunciado: Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde <code>00:00</code> hasta <code>00:59</code> en formato <code>MM:SS</code>, cada valor en una l\u00ednea.</p>"},{"location":"activities/p2/#ejercicio-17-for","title":"Ejercicio 17 \u2013 for","text":"<p>Enunciado: Con un ciclo for, solicita al usuario que ingrese un n\u00famero entero positivo y calcula la suma de sus d\u00edgitos, mostrando el resultado final.</p>"},{"location":"activities/p2/#ejercicio-18-while","title":"Ejercicio 18 \u2013 while","text":"<p>Enunciado: Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, \u2026 y termina cuando se alcance el primer valor mayor que 1000.</p>"},{"location":"activities/p2/#ejercicio-19-for","title":"Ejercicio 19 \u2013 for","text":"<p>Enunciado: Con un ciclo for, cuenta cu\u00e1ntas vocales (sin distinci\u00f3n de may\u00fasculas/min\u00fasculas) hay en la frase <code>frase = \"programacion es divertida\"</code> y muestra el total.</p>"},{"location":"activities/p2/#ejercicio-20-while","title":"Ejercicio 20 \u2013 while","text":"<p>Enunciado: Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca <code>-1</code>. Al final, muestra la edad mayor que se haya ingresado.</p>"},{"location":"activities/p3/","title":"Semana 4: Estructuras de control (bucles) y Estructuras de datos - Colecciones en Python","text":""},{"location":"activities/p3/#instrucciones-de-la-actividad","title":"\ud83c\udfaf Instrucciones de la Actividad","text":""},{"location":"activities/p3/#objetivo","title":"\ud83d\udccb Objetivo","text":"<p>Desarrollar habilidades en el uso de estructuras de control repetitivas (bucles) y estructuras de datos (colecciones) en Python, implementando funciones que resuelvan problemas pr\u00e1cticos.</p>"},{"location":"activities/p3/#configuracion-del-entorno","title":"\ud83d\udd27 Configuraci\u00f3n del Entorno","text":""},{"location":"activities/p3/#1-fork-del-repositorio","title":"1. Fork del Repositorio","text":"<ol> <li>Hacer Fork: Haz clic en el bot\u00f3n \"Fork\" en la esquina superior derecha de este repositorio</li> </ol> <p><pre><code>https://github.com/jfinfocesde/act_ntp_s4.git\n</code></pre> 2. Clonar tu Fork: Clona tu repositorio fork a tu m\u00e1quina local    <pre><code>git clone https://github.com/TU_USUARIO/act_ntp_s4.git\ncd act_ntp_s4\n</code></pre></p>"},{"location":"activities/p3/#2-estructura-del-proyecto","title":"2. Estructura del Proyecto","text":"<pre><code>act_ntp_s3/\n\u251c\u2500\u2500 README.md              # Este archivo con instrucciones\n\u251c\u2500\u2500 activities.json        # Lista de ejercicios\n\u251c\u2500\u2500 evaluations.json       # Criterios de evaluaci\u00f3n\n\u251c\u2500\u2500 info.json             # Informaci\u00f3n del proyecto\n\u2514\u2500\u2500 src/                  # Carpeta para tus soluciones\n    \u251c\u2500\u2500 ejercicio_01.py   # Tu soluci\u00f3n al ejercicio 1\n    \u251c\u2500\u2500 ejercicio_02.py   # Tu soluci\u00f3n al ejercicio 2\n    \u2514\u2500\u2500 ...               # Resto de ejercicios\n</code></pre>"},{"location":"activities/p3/#instrucciones-de-entrega","title":"\ud83d\udcdd Instrucciones de Entrega","text":"<ol> <li>Implementa las soluciones: Crea cada archivo Python en la carpeta <code>src/</code> seg\u00fan se indica en <code>activities.json</code></li> <li>Usa funciones: Cada ejercicio debe implementarse usando funciones</li> <li>Incluye comentarios: Documenta tu c\u00f3digo con comentarios explicativos</li> <li>Prueba tu c\u00f3digo: Aseg\u00farate de que cada ejercicio funcione correctamente</li> <li>Commit y Push: Sube tus cambios a tu repositorio fork    <pre><code>git add .\ngit commit -m \"Implementaci\u00f3n de ejercicios 1-20\"\ngit push origin main\n</code></pre></li> <li>Crear Pull Request: Crea un Pull Request desde tu fork al repositorio original</li> </ol>"},{"location":"activities/p3/#fecha-de-entrega","title":"\u23f0 Fecha de Entrega","text":"<p>[FECHA A DEFINIR POR EL INSTRUCTOR]</p>"},{"location":"activities/p3/#criterios-de-evaluacion","title":"\ud83d\udcca Criterios de Evaluaci\u00f3n","text":"<ul> <li>\u2705 Uso correcto de estructuras de control (bucles)</li> <li>\u2705 Implementaci\u00f3n adecuada de colecciones (listas, tuplas, conjuntos, diccionarios)</li> <li>\u2705 Creaci\u00f3n y uso de funciones</li> <li>\u2705 Calidad del c\u00f3digo y comentarios</li> <li>\u2705 Funcionalidad completa de cada ejercicio</li> </ul>"},{"location":"activities/p3/#ejercicios-a-resolver","title":"\ud83d\ude80 Ejercicios a Resolver","text":""},{"location":"activities/p3/#listas-ejercicios-1-5","title":"\ud83d\udccb LISTAS - Ejercicios 1-5","text":""},{"location":"activities/p3/#ejercicio-1-filtrado-de-numeros-pares","title":"Ejercicio 1: Filtrado de N\u00fameros Pares","text":"<p>Crea una funci\u00f3n que reciba una lista de n\u00fameros y use un ciclo for para devolver una nueva lista con solo los n\u00fameros pares. Prueba la funci\u00f3n con la lista [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].</p> <p>Archivo: <code>src/ejercicio_01.py</code></p>"},{"location":"activities/p3/#ejercicio-2-sistema-de-calificaciones","title":"Ejercicio 2: Sistema de Calificaciones","text":"<p>Implementa una funci\u00f3n que solicite al usuario ingresar calificaciones usando un ciclo while hasta que escriba 'fin'. Almacena las calificaciones en una lista y calcula el promedio, la nota m\u00e1s alta y m\u00e1s baja.</p> <p>Archivo: <code>src/ejercicio_02.py</code></p>"},{"location":"activities/p3/#ejercicio-3-combinacion-de-listas","title":"Ejercicio 3: Combinaci\u00f3n de Listas","text":"<p>Crea una funci\u00f3n que reciba dos listas de igual tama\u00f1o y use un ciclo for para combinarlas elemento por elemento en una nueva lista. Ejemplo: [1,2,3] + ['a','b','c'] = [1,'a',2,'b',3,'c'].</p> <p>Archivo: <code>src/ejercicio_03.py</code></p>"},{"location":"activities/p3/#ejercicio-4-carrito-de-compras","title":"Ejercicio 4: Carrito de Compras","text":"<p>Desarrolla una funci\u00f3n que simule un carrito de compras. Usa una lista para almacenar productos y un ciclo while para mostrar un men\u00fa que permita agregar, eliminar, mostrar productos y calcular el total.</p> <p>Archivo: <code>src/ejercicio_04.py</code></p>"},{"location":"activities/p3/#ejercicio-5-busqueda-de-palabras","title":"Ejercicio 5: B\u00fasqueda de Palabras","text":"<p>Implementa una funci\u00f3n que reciba una lista de palabras y use ciclos anidados para encontrar y devolver todas las palabras que contienen una letra espec\u00edfica ingresada por el usuario.</p> <p>Archivo: <code>src/ejercicio_05.py</code></p>"},{"location":"activities/p3/#tuplas-ejercicios-6-10","title":"\ud83d\udce6 TUPLAS - Ejercicios 6-10","text":""},{"location":"activities/p3/#ejercicio-6-coordenadas-aleatorias","title":"Ejercicio 6: Coordenadas Aleatorias","text":"<p>Crea una funci\u00f3n que genere una tupla con las coordenadas (x, y) de 10 puntos aleatorios. Usa un ciclo for para calcular cu\u00e1les puntos est\u00e1n dentro de un c\u00edrculo de radio 5 centrado en el origen.</p> <p>Archivo: <code>src/ejercicio_06.py</code></p>"},{"location":"activities/p3/#ejercicio-7-filtrado-de-estudiantes","title":"Ejercicio 7: Filtrado de Estudiantes","text":"<p>Desarrolla una funci\u00f3n que reciba una tupla de estudiantes (nombre, edad, promedio) y use un ciclo for para encontrar y devolver una nueva tupla solo con los estudiantes que tienen promedio mayor a 8.0.</p> <p>Archivo: <code>src/ejercicio_07.py</code></p>"},{"location":"activities/p3/#ejercicio-8-secuencia-de-fibonacci","title":"Ejercicio 8: Secuencia de Fibonacci","text":"<p>Implementa una funci\u00f3n que cree una tupla con los primeros 20 n\u00fameros de la secuencia de Fibonacci. Usa un ciclo while para generar la secuencia y luego un ciclo for para mostrar solo los n\u00fameros impares.</p> <p>Archivo: <code>src/ejercicio_08.py</code></p>"},{"location":"activities/p3/#ejercicio-9-sistema-de-coordenadas","title":"Ejercicio 9: Sistema de Coordenadas","text":"<p>Crea una funci\u00f3n que simule un sistema de coordenadas. Recibe una tupla de puntos (x, y) y usa ciclos para calcular la distancia total recorrida si se visitan todos los puntos en orden.</p> <p>Archivo: <code>src/ejercicio_09.py</code></p>"},{"location":"activities/p3/#ejercicio-10-suma-de-tuplas","title":"Ejercicio 10: Suma de Tuplas","text":"<p>Desarrolla una funci\u00f3n que reciba dos tuplas de igual longitud y use un ciclo for para crear una nueva tupla con la suma de elementos correspondientes. Ejemplo: (1,2,3) + (4,5,6) = (5,7,9).</p> <p>Archivo: <code>src/ejercicio_10.py</code></p>"},{"location":"activities/p3/#conjuntos-ejercicios-11-15","title":"\ud83d\udd17 CONJUNTOS - Ejercicios 11-15","text":""},{"location":"activities/p3/#ejercicio-11-operaciones-de-conjuntos","title":"Ejercicio 11: Operaciones de Conjuntos","text":"<p>Crea una funci\u00f3n que reciba dos listas y use ciclos for para convertirlas en conjuntos. Luego calcula y muestra la uni\u00f3n, intersecci\u00f3n, diferencia y diferencia sim\u00e9trica entre ambos conjuntos.</p> <p>Archivo: <code>src/ejercicio_11.py</code></p>"},{"location":"activities/p3/#ejercicio-12-palabras-unicas","title":"Ejercicio 12: Palabras \u00danicas","text":"<p>Implementa una funci\u00f3n que solicite al usuario ingresar palabras usando un ciclo while hasta que escriba 'salir'. Almacena las palabras en un conjunto y muestra cu\u00e1ntas palabras \u00fanicas se ingresaron y cu\u00e1les se repitieron.</p> <p>Archivo: <code>src/ejercicio_12.py</code></p>"},{"location":"activities/p3/#ejercicio-13-generacion-de-conjuntos","title":"Ejercicio 13: Generaci\u00f3n de Conjuntos","text":"<p>Desarrolla una funci\u00f3n que genere dos conjuntos: uno con n\u00fameros pares del 2 al 20 y otro con m\u00faltiplos de 3 del 3 al 30. Usa ciclos for para crear los conjuntos y muestra todas las operaciones entre ellos.</p> <p>Archivo: <code>src/ejercicio_13.py</code></p>"},{"location":"activities/p3/#ejercicio-14-sistema-de-votacion","title":"Ejercicio 14: Sistema de Votaci\u00f3n","text":"<p>Crea una funci\u00f3n que simule un sistema de votaci\u00f3n. Usa un conjunto para almacenar los votos \u00fanicos y un ciclo while para permitir que m\u00faltiples usuarios voten. Al final, muestra los candidatos que recibieron votos.</p> <p>Archivo: <code>src/ejercicio_14.py</code></p>"},{"location":"activities/p3/#ejercicio-15-eliminacion-de-duplicados","title":"Ejercicio 15: Eliminaci\u00f3n de Duplicados","text":"<p>Implementa una funci\u00f3n que reciba una lista de n\u00fameros con duplicados y use un ciclo for para crear un conjunto con n\u00fameros \u00fanicos. Luego compara el tama\u00f1o original vs el conjunto para mostrar cu\u00e1ntos duplicados hab\u00eda.</p> <p>Archivo: <code>src/ejercicio_15.py</code></p>"},{"location":"activities/p3/#diccionarios-ejercicios-16-20","title":"\ud83d\udcda DICCIONARIOS - Ejercicios 16-20","text":""},{"location":"activities/p3/#ejercicio-16-inventario-de-productos","title":"Ejercicio 16: Inventario de Productos","text":"<p>Crea una funci\u00f3n que simule un inventario de productos. Usa un diccionario para almacenar producto:cantidad y un ciclo while para mostrar un men\u00fa que permita agregar, actualizar, eliminar productos y mostrar el inventario completo.</p> <p>Archivo: <code>src/ejercicio_16.py</code></p>"},{"location":"activities/p3/#ejercicio-17-contador-de-palabras","title":"Ejercicio 17: Contador de Palabras","text":"<p>Desarrolla una funci\u00f3n que reciba una frase y use un ciclo for para crear un diccionario que cuente la frecuencia de cada palabra. Ignora may\u00fasculas/min\u00fasculas y muestra las palabras ordenadas por frecuencia.</p> <p>Archivo: <code>src/ejercicio_17.py</code></p>"},{"location":"activities/p3/#ejercicio-18-agenda-telefonica","title":"Ejercicio 18: Agenda Telef\u00f3nica","text":"<p>Implementa una funci\u00f3n que simule una agenda telef\u00f3nica usando un diccionario. Usa un ciclo while para mostrar un men\u00fa que permita agregar contactos, buscar por nombre, mostrar todos los contactos y eliminar contactos.</p> <p>Archivo: <code>src/ejercicio_18.py</code></p>"},{"location":"activities/p3/#ejercicio-19-gestion-de-calificaciones","title":"Ejercicio 19: Gesti\u00f3n de Calificaciones","text":"<p>Crea una funci\u00f3n que gestione las calificaciones de estudiantes. Usa un diccionario donde la clave sea el nombre del estudiante y el valor una lista de calificaciones. Implementa funciones para agregar estudiantes, agregar calificaciones y calcular promedios.</p> <p>Archivo: <code>src/ejercicio_19.py</code></p>"},{"location":"activities/p3/#ejercicio-20-sistema-de-temperaturas","title":"Ejercicio 20: Sistema de Temperaturas","text":"<p>Desarrolla una funci\u00f3n que simule un sistema de registro de temperaturas por ciudad. Usa un diccionario anidado donde cada ciudad tenga un diccionario con d\u00edas de la semana y temperaturas. Calcula estad\u00edsticas por ciudad y d\u00eda.</p> <p>Archivo: <code>src/ejercicio_20.py</code></p>"},{"location":"activities/p3/#resumen-de-la-actividad","title":"\ud83d\udccb Resumen de la Actividad","text":""},{"location":"activities/p3/#checklist-de-entrega","title":"\u2705 Checklist de Entrega","text":"<ul> <li>[ ] Fork del repositorio realizado</li> <li>[ ] Repositorio clonado localmente</li> <li>[ ] 20 ejercicios implementados en la carpeta <code>src/</code></li> <li>[ ] Cada ejercicio usa funciones como se solicita</li> <li>[ ] C\u00f3digo documentado con comentarios</li> <li>[ ] Ejercicios probados y funcionando</li> <li>[ ] Cambios subidos al repositorio fork</li> <li>[ ] Pull Request creado</li> </ul>"},{"location":"activities/p3/#objetivos-de-aprendizaje","title":"\ud83c\udfaf Objetivos de Aprendizaje","text":"<p>Al completar esta actividad, habr\u00e1s desarrollado competencias en: - \u2705 Uso de bucles <code>for</code> y <code>while</code> en diferentes contextos - \u2705 Manipulaci\u00f3n de listas (creaci\u00f3n, modificaci\u00f3n, filtrado) - \u2705 Trabajo con tuplas (inmutabilidad, acceso a elementos) - \u2705 Operaciones con conjuntos (uni\u00f3n, intersecci\u00f3n, diferencia) - \u2705 Gesti\u00f3n de diccionarios (CRUD, diccionarios anidados) - \u2705 Creaci\u00f3n y uso de funciones - \u2705 Resoluci\u00f3n de problemas pr\u00e1cticos con Python</p>"},{"location":"activities/p3/#consejos-para-el-exito","title":"\ud83d\udca1 Consejos para el \u00c9xito","text":"<ol> <li>Lee cuidadosamente cada enunciado antes de empezar</li> <li>Planifica tu soluci\u00f3n antes de escribir c\u00f3digo</li> <li>Usa nombres descriptivos para variables y funciones</li> <li>Comenta tu c\u00f3digo para explicar la l\u00f3gica</li> <li>Prueba cada funci\u00f3n con diferentes casos de prueba</li> <li>No dudes en consultar la documentaci\u00f3n de Python</li> </ol> <p>\u00a1Buena suerte con tu actividad! \ud83d\ude80</p>"},{"location":"activities/p4/","title":"Semana 8: An\u00e1lisis de Datos con Pandas - Actividad Pr\u00e1ctica","text":""},{"location":"activities/p4/#instrucciones-de-la-actividad","title":"\ud83c\udfaf Instrucciones de la Actividad","text":""},{"location":"activities/p4/#objetivo","title":"\ud83d\udccb Objetivo","text":"<p>Desarrollar habilidades en el uso de la biblioteca Pandas para an\u00e1lisis y manipulaci\u00f3n de datos, implementando funciones que trabajen con Series y DataFrames para resolver problemas pr\u00e1cticos de an\u00e1lisis de datos.</p>"},{"location":"activities/p4/#configuracion-del-entorno","title":"\ud83d\udd27 Configuraci\u00f3n del Entorno","text":""},{"location":"activities/p4/#1-fork-del-repositorio","title":"1. Fork del Repositorio","text":"<ol> <li>Hacer Fork: Haz clic en el bot\u00f3n \"Fork\" en la esquina superior derecha de este repositorio</li> </ol> <p><pre><code>https://github.com/jfinfocesde/act_ntp_s8.git\n</code></pre> 2. Clonar tu Fork: Clona tu repositorio fork a tu m\u00e1quina local    <pre><code>git clone https://github.com/TU_USUARIO/act_ntp_s8.git\ncd act_ntp_s8\n</code></pre></p>"},{"location":"activities/p4/#2-instalacion-de-dependencias","title":"2. Instalaci\u00f3n de Dependencias","text":"<pre><code>pip install pandas requests numpy\n</code></pre>"},{"location":"activities/p4/#3-estructura-del-proyecto","title":"3. Estructura del Proyecto","text":"<pre><code>act_ntp_s8/\n\u251c\u2500\u2500 README.md              # Este archivo con instrucciones\n\u251c\u2500\u2500 activities.json        # Lista de ejercicios\n\u251c\u2500\u2500 evaluations.json       # Criterios de evaluaci\u00f3n\n\u251c\u2500\u2500 info.json             # Informaci\u00f3n del proyecto\n\u251c\u2500\u2500 data/                 # Carpeta para archivos de datos\n\u2502   \u251c\u2500\u2500 sample_data.csv   # Datos de ejemplo\n\u2502   \u2514\u2500\u2500 users_data.json   # Datos JSON de ejemplo\n\u2514\u2500\u2500 src/                  # Carpeta para tus soluciones\n    \u251c\u2500\u2500 ejercicio_01.py   # Tu soluci\u00f3n al ejercicio 1\n    \u251c\u2500\u2500 ejercicio_02.py   # Tu soluci\u00f3n al ejercicio 2\n    \u251c\u2500\u2500 ejercicio_03.py   # Tu soluci\u00f3n al ejercicio 3\n    \u251c\u2500\u2500 ejercicio_04.py   # Tu soluci\u00f3n al ejercicio 4\n    \u251c\u2500\u2500 ejercicio_05.py   # Tu soluci\u00f3n al ejercicio 5\n    \u251c\u2500\u2500 ejercicio_06.py   # Tu soluci\u00f3n al ejercicio 6\n    \u251c\u2500\u2500 ejercicio_07.py   # Tu soluci\u00f3n al ejercicio 7\n    \u251c\u2500\u2500 ejercicio_08.py   # Tu soluci\u00f3n al ejercicio 8\n    \u251c\u2500\u2500 ejercicio_09.py   # Tu soluci\u00f3n al ejercicio 9\n    \u2514\u2500\u2500 ejercicio_10.py   # Tu soluci\u00f3n al ejercicio 10\n</code></pre>"},{"location":"activities/p4/#ejercicios-a-resolver","title":"\ud83d\ude80 Ejercicios a Resolver","text":""},{"location":"activities/p4/#series-ejercicios-1-3","title":"\ud83d\udcca SERIES - Ejercicios 1-3","text":""},{"location":"activities/p4/#ejercicio-1-analisis-de-ventas-diarias-con-series","title":"Ejercicio 1: An\u00e1lisis de Ventas Diarias con Series","text":"<p>Crea una funci\u00f3n que genere una Serie de Pandas con las ventas diarias de una tienda (7 d\u00edas). La funci\u00f3n debe:</p> <ul> <li>Crear una Serie con ventas diarias (ejemplo: [150, 200, 180, 220, 175, 190, 165])</li> <li>Acceder al valor del \u00edndice 3 usando <code>serie[3]</code></li> <li>Calcular el promedio de ventas usando <code>.mean()</code></li> <li>Ordenar por valores usando <code>.sort_values()</code></li> <li>Mostrar todos los resultados con <code>print()</code></li> </ul> <p>Archivo: <code>src/ejercicio_01.py</code></p>"},{"location":"activities/p4/#ejercicio-2-series-con-indices-personalizados","title":"Ejercicio 2: Series con \u00cdndices Personalizados","text":"<p>Implementa una funci\u00f3n que cree una Serie con datos de calificaciones de estudiantes usando \u00edndices personalizados (nombres de materias). La funci\u00f3n debe:</p> <ul> <li>Crear una Serie con \u00edndices personalizados: <code>pd.Series([85, 92, 78], index=['Matem\u00e1ticas', 'Ciencias', 'Historia'])</code></li> <li>Acceder a un valor espec\u00edfico por \u00edndice: <code>serie['Ciencias']</code></li> <li>Mostrar informaci\u00f3n b\u00e1sica de la Serie</li> <li>Calcular estad\u00edsticas b\u00e1sicas como suma y promedio</li> </ul> <p>Archivo: <code>src/ejercicio_02.py</code></p>"},{"location":"activities/p4/#ejercicio-3-operaciones-matematicas-con-series","title":"Ejercicio 3: Operaciones Matem\u00e1ticas con Series","text":"<p>Desarrolla una funci\u00f3n que cree dos Series de precios y descuentos, y realice operaciones matem\u00e1ticas entre ellas. La funci\u00f3n debe:</p> <ul> <li>Crear dos Series: precios [100, 150, 200] y descuentos [10, 20, 15]</li> <li>Realizar resta entre precios y descuentos</li> <li>Multiplicar la Serie de precios por un valor escalar (ejemplo: precios * 1.16 para IVA)</li> <li>Mostrar los resultados de todas las operaciones</li> <li>Demostrar que las operaciones se realizan elemento por elemento</li> </ul> <p>Archivo: <code>src/ejercicio_03.py</code></p>"},{"location":"activities/p4/#dataframes-ejercicios-4-10","title":"\ud83d\udccb DATAFRAMES - Ejercicios 4-10","text":""},{"location":"activities/p4/#ejercicio-4-dataframe-desde-diccionario","title":"Ejercicio 4: DataFrame desde Diccionario","text":"<p>Desarrolla una funci\u00f3n que cree un DataFrame desde un diccionario con datos de productos. La funci\u00f3n debe:</p> <ul> <li>Crear un diccionario con las claves: 'Producto', 'Precio', 'Categoria'</li> <li>Incluir al menos 3 productos con sus datos (ej: Laptop, Smartphone, Tablet)</li> <li>Convertir el diccionario a DataFrame usando <code>pd.DataFrame(diccionario)</code></li> <li>Mostrar el DataFrame completo</li> <li>Acceder a una columna espec\u00edfica (ejemplo: <code>df['Precio']</code>)</li> <li>Mostrar informaci\u00f3n b\u00e1sica del DataFrame con <code>df.info()</code></li> </ul> <p>Archivo: <code>src/ejercicio_04.py</code></p>"},{"location":"activities/p4/#ejercicio-5-dataframe-desde-lista-de-diccionarios","title":"Ejercicio 5: DataFrame desde Lista de Diccionarios","text":"<p>Crea una funci\u00f3n que genere un DataFrame desde una lista de diccionarios. La funci\u00f3n debe:</p> <ul> <li>Crear una lista que contenga diccionarios, cada uno representando un empleado</li> <li>Cada diccionario debe tener las claves: 'empleado', 'salario', 'departamento'</li> <li>Incluir al menos 3 empleados con sus datos</li> <li>Convertir la lista a DataFrame usando <code>pd.DataFrame(lista_diccionarios)</code></li> <li>Mostrar el DataFrame resultante</li> <li>Acceder a filas espec\u00edficas usando \u00edndices</li> </ul> <p>Archivo: <code>src/ejercicio_05.py</code></p>"},{"location":"activities/p4/#ejercicio-6-dataframe-desde-lista-de-listas","title":"Ejercicio 6: DataFrame desde Lista de Listas","text":"<p>Implementa una funci\u00f3n que cree un DataFrame desde una lista de listas. La funci\u00f3n debe:</p> <ul> <li>Crear una lista de listas donde cada sublista representa datos de un libro</li> <li>Definir los nombres de las columnas: ['Titulo', 'Autor', 'A\u00f1o']</li> <li>Crear el DataFrame usando <code>pd.DataFrame(datos, columns=nombres_columnas)</code></li> <li>Incluir al menos 3 libros con sus datos</li> <li>Mostrar el DataFrame y sus dimensiones con <code>df.shape</code></li> </ul> <p>Archivo: <code>src/ejercicio_06.py</code></p>"},{"location":"activities/p4/#ejercicio-7-lectura-de-archivo-csv","title":"Ejercicio 7: Lectura de Archivo CSV","text":"<p>Desarrolla una funci\u00f3n que:</p> <ul> <li>Cree un archivo CSV usando la biblioteca <code>csv</code> de Python</li> <li>Escriba datos de al menos 3 cursos con columnas: curso, instructor, duracion</li> <li>Lea el archivo CSV usando <code>pd.read_csv('cursos.csv')</code></li> <li>Muestre el DataFrame resultante</li> <li>Implemente manejo de errores para el caso de que el archivo no exista</li> </ul> <p>Archivo: <code>src/ejercicio_07.py</code></p>"},{"location":"activities/p4/#ejercicio-8-dataframe-desde-archivo-json","title":"Ejercicio 8: DataFrame desde Archivo JSON","text":"<p>Crea una funci\u00f3n que:</p> <ul> <li>Genere un archivo JSON con una estructura de lista de objetos</li> <li>Cada objeto debe representar un veh\u00edculo con propiedades: marca, modelo, a\u00f1o</li> <li>Guarde el archivo usando la biblioteca <code>json</code> de Python</li> <li>Lea el archivo usando <code>pd.read_json('vehiculos.json')</code></li> <li>Muestre el DataFrame resultante y sus tipos de datos con <code>df.dtypes</code></li> </ul> <p>Archivo: <code>src/ejercicio_08.py</code></p>"},{"location":"activities/p4/#ejercicio-9-dataframe-desde-array-numpy","title":"Ejercicio 9: DataFrame desde Array NumPy","text":"<p>Implementa una funci\u00f3n que cree un DataFrame desde un array de NumPy. La funci\u00f3n debe:</p> <ul> <li>Crear un array de NumPy 2D usando <code>np.array()</code> con datos de ventas trimestrales</li> <li>El array debe tener al menos 3 filas y 3 columnas con datos num\u00e9ricos</li> <li>Especificar los nombres de las columnas al crear el DataFrame</li> <li>Usar <code>pd.DataFrame(array_numpy, columns=['Q1', 'Q2', 'Q3'])</code></li> <li>Mostrar el DataFrame y verificar sus tipos de datos</li> </ul> <p>Archivo: <code>src/ejercicio_09.py</code></p>"},{"location":"activities/p4/#ejercicio-10-dataframe-desde-api-rest","title":"Ejercicio 10: DataFrame desde API REST","text":"<p>Desarrolla una funci\u00f3n que consuma datos desde la API <code>https://playground.mockoon.com/users</code>. La funci\u00f3n debe:</p> <ul> <li>Importar la biblioteca <code>requests</code></li> <li>Realizar una petici\u00f3n GET a la URL usando <code>requests.get()</code></li> <li>Verificar que el c\u00f3digo de estado sea 200</li> <li>Convertir la respuesta JSON a DataFrame usando <code>pd.DataFrame(response.json())</code></li> <li>Mostrar las primeras 5 filas con <code>df.head()</code></li> <li>Implementar manejo de errores con try/except para problemas de conexi\u00f3n</li> <li>Mostrar informaci\u00f3n del DataFrame obtenido</li> </ul> <p>Archivo: <code>src/ejercicio_10.py</code></p>"},{"location":"activities/p5/","title":"Semana 9: Filtros y Operadores L\u00f3gicos con Pandas - Actividad Pr\u00e1ctica","text":""},{"location":"activities/p5/#instrucciones-de-la-actividad","title":"\ud83c\udfaf Instrucciones de la Actividad","text":""},{"location":"activities/p5/#objetivo","title":"\ud83d\udccb Objetivo","text":"<p>Desarrollar habilidades en el uso de filtros condicionales y operadores l\u00f3gicos con Pandas, implementando funciones que trabajen con DataFrames para resolver problemas pr\u00e1cticos de an\u00e1lisis de datos.</p>"},{"location":"activities/p5/#configuracion-del-entorno","title":"\ud83d\udd27 Configuraci\u00f3n del Entorno","text":""},{"location":"activities/p5/#1-fork-del-repositorio","title":"1. Fork del Repositorio","text":"<ol> <li>Hacer Fork: Haz clic en el bot\u00f3n \"Fork\" en la esquina superior derecha de este repositorio</li> </ol> <p><pre><code>https://github.com/jfinfocesde/act_ntp_s9.git\n</code></pre> 2. Clonar tu Fork: Clona tu repositorio fork a tu m\u00e1quina local    <pre><code>git clone https://github.com/TU_USUARIO/act_ntp_s9.git\ncd act_ntp_s9\n</code></pre></p>"},{"location":"activities/p5/#2-instalacion-de-dependencias","title":"2. Instalaci\u00f3n de Dependencias","text":"<pre><code>pip install pandas numpy\n</code></pre>"},{"location":"activities/p5/#3-estructura-del-proyecto","title":"3. Estructura del Proyecto","text":"<pre><code>act_ntp_s9/\n\u251c\u2500\u2500 README.md              # Este archivo con instrucciones\n\u251c\u2500\u2500 activities.json        # Lista de ejercicios\n\u251c\u2500\u2500 evaluations.json       # Criterios de evaluaci\u00f3n\n\u251c\u2500\u2500 info.json             # Informaci\u00f3n del proyecto\n\u2514\u2500\u2500 src/                  # Carpeta para tus soluciones\n    \u251c\u2500\u2500 ejercicio_01.py   # Filtros b\u00e1sicos con operadores de comparaci\u00f3n\n    \u251c\u2500\u2500 ejercicio_02.py   # Operadores l\u00f3gicos AND, OR, NOT\n    \u251c\u2500\u2500 ejercicio_03.py   # M\u00e9todo isin() y between()\n    \u251c\u2500\u2500 ejercicio_04.py   # Filtros con strings\n    \u2514\u2500\u2500 ejercicio_05.py   # M\u00e9todo query() y filtros combinados\n</code></pre>"},{"location":"activities/p5/#dataframe-de-ejemplo-para-todos-los-ejercicios","title":"\ud83d\udcca DataFrame de Ejemplo para Todos los Ejercicios","text":"<p>Para mantener consistencia en todos los ejercicios, utilizaremos el siguiente DataFrame base que contiene datos de empleados de una empresa ficticia:</p> <pre><code>import pandas as pd\n\n# Crear DataFrame simple de empleados\ndata = {\n    'nombre': ['Ana', 'Luis', 'Carmen', 'Jos\u00e9', 'Mar\u00eda', 'Pedro', 'Laura', 'Miguel'],\n    'departamento': ['Ventas', 'IT', 'RRHH', 'Ventas', 'IT', 'Marketing', 'RRHH', 'IT'],\n    'salario': [45000, 65000, 50000, 48000, 70000, 55000, 52000, 68000],\n    'edad': [28, 35, 42, 31, 29, 38, 45, 33]\n}\n\ndf = pd.DataFrame(data)\nprint(\"DataFrame de empleados:\")\nprint(df)\n</code></pre>"},{"location":"activities/p5/#descripcion-de-los-datos","title":"\ud83d\udccb Descripci\u00f3n de los Datos","text":"<ul> <li>id_empleado: Identificador \u00fanico del empleado (1-20)</li> <li>nombre: Nombre completo del empleado</li> <li>edad: Edad en a\u00f1os (25-45)</li> <li>salario: Salario anual en euros (44,000-95,000)</li> <li>departamento: Departamento de trabajo (IT, Ventas, RRHH, Marketing, Finanzas)</li> <li>fecha_ingreso: Fecha de ingreso a la empresa (2016-2021)</li> <li>activo: Estado del empleado (True/False)</li> <li>email: Correo electr\u00f3nico corporativo</li> <li>telefono: N\u00famero de tel\u00e9fono con formato espa\u00f1ol</li> <li>ciudad: Ciudad de trabajo (Madrid, Barcelona, Valencia, Sevilla, Bilbao)</li> </ul>"},{"location":"activities/p5/#uso-en-los-ejercicios","title":"\ud83c\udfaf Uso en los Ejercicios","text":"<ul> <li>Ejercicios 1-5: Usar <code>df_empleados</code> para practicar filtros y operadores l\u00f3gicos</li> </ul>"},{"location":"activities/p5/#ejercicios-a-resolver","title":"\ud83d\ude80 Ejercicios a Resolver","text":""},{"location":"activities/p5/#ejercicio-1-filtros-basicos","title":"Ejercicio 1: Filtros B\u00e1sicos","text":"<p>Realiza estos filtros simples:</p> <ol> <li>Empleados con salario mayor a 50,000</li> <li>Empleados menores de 35 a\u00f1os</li> <li>Empleados del departamento 'IT'</li> </ol> <p>Implementa tu soluci\u00f3n en: <code>src/ejercicio_01.py</code></p> <p>Archivo: <code>src/ejercicio_01.py</code></p>"},{"location":"activities/p5/#ejercicio-2-operadores-logicos-and-or-not","title":"Ejercicio 2: Operadores L\u00f3gicos (AND, OR, NOT)","text":"<p>Combina condiciones con operadores l\u00f3gicos:</p> <ol> <li>Empleados de IT Y salario mayor a 60,000</li> <li>Empleados de Ventas O mayores de 40 a\u00f1os</li> <li>Empleados que NO son de Marketing</li> </ol> <p>Recuerda usar: <code>&amp;</code> para AND, <code>|</code> para OR, <code>~</code> para NOT</p> <p>Implementa tu soluci\u00f3n en: <code>src/ejercicio_02.py</code></p> <p>Archivo: <code>src/ejercicio_02.py</code></p>"},{"location":"activities/p5/#ejercicio-3-metodo-isin","title":"Ejercicio 3: M\u00e9todo <code>isin()</code>","text":"<p>Usa <code>isin()</code> para filtrar m\u00faltiples valores:</p> <ol> <li>Empleados de IT o Ventas</li> <li>Empleados con edad de 28, 35 o 42 a\u00f1os</li> </ol> <p>Pista: El m\u00e9todo <code>isin()</code> acepta una lista de valores para comparar.</p> <p>Implementa tu soluci\u00f3n en: <code>src/ejercicio_03.py</code></p> <p>Archivo: <code>src/ejercicio_03.py</code></p>"},{"location":"activities/p5/#ejercicio-4-filtros-con-texto","title":"Ejercicio 4: Filtros con Texto","text":"<p>Filtra usando m\u00e9todos de string:</p> <ol> <li>Empleados cuyos nombres empiezan con 'M'</li> <li>Departamentos que contienen 'R'</li> </ol> <p>Pista: Usa <code>.str.startswith()</code> y <code>.str.contains()</code> para filtros de texto.</p> <p>Implementa tu soluci\u00f3n en: <code>src/ejercicio_04.py</code></p> <p>Archivo: <code>src/ejercicio_04.py</code></p>"},{"location":"activities/p5/#ejercicio-5-combinando-filtros","title":"Ejercicio 5: Combinando Filtros","text":"<p>Combina diferentes tipos de filtros:</p> <ol> <li>Empleados de IT con m\u00e1s de 30 a\u00f1os Y salario mayor a 60,000</li> <li>Empleados cuyo nombre empieza con 'L' O son de RRHH</li> </ol> <p>Desaf\u00edo: Combina operadores l\u00f3gicos con filtros de texto y num\u00e9ricos.</p> <p>Implementa tu soluci\u00f3n en: <code>src/ejercicio_05.py</code></p> <p>Archivo: <code>src/ejercicio_05.py</code></p>"},{"location":"activities/p6/","title":"Semana 10: Filtrado y Selecci\u00f3n de Datos con Pandas - Actividad Pr\u00e1ctica","text":""},{"location":"activities/p6/#instrucciones-de-la-actividad","title":"\ud83c\udfaf Instrucciones de la Actividad","text":""},{"location":"activities/p6/#objetivo","title":"\ud83d\udccb Objetivo","text":"<p>Desarrollar habilidades avanzadas en el filtrado y selecci\u00f3n de datos con Pandas, dominando el uso de los m\u00e9todos <code>.loc</code> e <code>.iloc</code> para acceder y manipular datos de manera eficiente en DataFrames.</p>"},{"location":"activities/p6/#configuracion-del-entorno","title":"\ud83d\udd27 Configuraci\u00f3n del Entorno","text":""},{"location":"activities/p6/#1-fork-del-repositorio","title":"1. Fork del Repositorio","text":"<ol> <li>Hacer Fork: Haz clic en el bot\u00f3n \"Fork\" en la esquina superior derecha de este repositorio</li> </ol> <p><pre><code>https://github.com/jfinfocesde/act_ntp_s10.git\n</code></pre> 2. Clonar tu Fork: Clona tu repositorio fork a tu m\u00e1quina local    <pre><code>git clone https://github.com/TU_USUARIO/act_ntp_s10.git\ncd act_ntp_s10\n</code></pre></p>"},{"location":"activities/p6/#2-instalacion-de-dependencias","title":"2. Instalaci\u00f3n de Dependencias","text":"<pre><code>pip install pandas numpy datetime\n</code></pre>"},{"location":"activities/p6/#3-estructura-del-proyecto","title":"3. Estructura del Proyecto","text":"<pre><code>act_ntp_s10/\n\u251c\u2500\u2500 README.md              # Este archivo con instrucciones\n\u251c\u2500\u2500 activities.json        # Lista de ejercicios\n\u251c\u2500\u2500 evaluations.json       # Criterios de evaluaci\u00f3n\n\u251c\u2500\u2500 info.json             # Informaci\u00f3n del proyecto\n\u251c\u2500\u2500 data/                 # Carpeta para archivos de datos\n\u2502   \u2514\u2500\u2500 dataset_general.csv # Dataset principal para todos los ejercicios\n\u2514\u2500\u2500 src/                  # Carpeta para tus soluciones\n    \u251c\u2500\u2500 ejercicio_01.py   # Ejercicio 1 - loc b\u00e1sico\n    \u251c\u2500\u2500 ejercicio_02.py   # Ejercicio 2 - loc con condiciones\n    \u251c\u2500\u2500 ejercicio_03.py   # Ejercicio 3 - loc m\u00faltiples condiciones\n    \u251c\u2500\u2500 ejercicio_04.py   # Ejercicio 4 - loc con rangos\n    \u251c\u2500\u2500 ejercicio_05.py   # Ejercicio 5 - loc modificaci\u00f3n datos\n    \u251c\u2500\u2500 ejercicio_06.py   # Ejercicio 6 - loc con funciones\n    \u251c\u2500\u2500 ejercicio_07.py   # Ejercicio 7 - loc avanzado\n    \u251c\u2500\u2500 ejercicio_08.py   # Ejercicio 8 - loc con strings\n    \u251c\u2500\u2500 ejercicio_09.py   # Ejercicio 9 - loc con fechas\n    \u251c\u2500\u2500 ejercicio_10.py   # Ejercicio 10 - loc combinado\n    \u251c\u2500\u2500 ejercicio_11.py   # Ejercicio 11 - iloc b\u00e1sico\n    \u251c\u2500\u2500 ejercicio_12.py   # Ejercicio 12 - iloc con rangos\n    \u251c\u2500\u2500 ejercicio_13.py   # Ejercicio 13 - iloc m\u00faltiples filas\n    \u251c\u2500\u2500 ejercicio_14.py   # Ejercicio 14 - iloc columnas espec\u00edficas\n    \u251c\u2500\u2500 ejercicio_15.py   # Ejercicio 15 - iloc modificaci\u00f3n\n    \u251c\u2500\u2500 ejercicio_16.py   # Ejercicio 16 - iloc con pasos\n    \u251c\u2500\u2500 ejercicio_17.py   # Ejercicio 17 - iloc avanzado\n    \u251c\u2500\u2500 ejercicio_18.py   # Ejercicio 18 - iloc con listas\n    \u251c\u2500\u2500 ejercicio_19.py   # Ejercicio 19 - iloc combinaciones\n    \u2514\u2500\u2500 ejercicio_20.py   # Ejercicio 20 - iloc complejo\n</code></pre>"},{"location":"activities/p6/#ejercicios-a-resolver","title":"\ud83d\ude80 Ejercicios a Resolver","text":""},{"location":"activities/p6/#dataframe-general-para-todos-los-ejercicios","title":"\ud83d\udcca DataFrame General para Todos los Ejercicios","text":"<p>Todos los ejercicios trabajar\u00e1n con el mismo DataFrame que contiene informaci\u00f3n de empleados de una empresa. Este DataFrame incluye las siguientes columnas:</p> <pre><code>import pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\n\n# DataFrame general que usar\u00e1s en todos los ejercicios\ndata = {\n    'empleado_id': range(1, 101),\n    'nombre': [f'Empleado_{i}' for i in range(1, 101)],\n    'apellido': [f'Apellido_{i}' for i in range(1, 101)],\n    'edad': np.random.randint(22, 65, 100),\n    'departamento': np.random.choice(['Ventas', 'Marketing', 'IT', 'RRHH', 'Finanzas'], 100),\n    'salario': np.random.randint(30000, 120000, 100),\n    'fecha_ingreso': [datetime(2020, 1, 1) + timedelta(days=np.random.randint(0, 1460)) for _ in range(100)],\n    'activo': np.random.choice([True, False], 100, p=[0.85, 0.15]),\n    'ciudad': np.random.choice(['Bogot\u00e1', 'Medell\u00edn', 'Cali', 'Barranquilla', 'Cartagena'], 100),\n    'experiencia_a\u00f1os': np.random.randint(1, 20, 100)\n}\n\ndf = pd.DataFrame(data)\ndf.set_index('empleado_id', inplace=True)\n</code></pre> <p>Estructura del DataFrame:</p> <ul> <li>empleado_id: ID \u00fanico del empleado (\u00edndice)</li> <li>nombre: Nombre del empleado</li> <li>apellido: Apellido del empleado</li> <li>edad: Edad en a\u00f1os</li> <li>departamento: Departamento donde trabaja</li> <li>salario: Salario anual en pesos</li> <li>fecha_ingreso: Fecha de ingreso a la empresa</li> <li>activo: Estado del empleado (True/False)</li> <li>ciudad: Ciudad donde trabaja</li> <li>experiencia_a\u00f1os: A\u00f1os de experiencia laboral</li> </ul>"},{"location":"activities/p6/#ejercicios-loc-filtrado-por-etiquetas-ejercicios-1-10","title":"\ud83c\udfaf EJERCICIOS LOC - Filtrado por Etiquetas (Ejercicios 1-10)","text":""},{"location":"activities/p6/#ejercicio-1-seleccion-basica-con-loc","title":"Ejercicio 1: Selecci\u00f3n B\u00e1sica con .loc","text":"<p>Implementa una funci\u00f3n que use <code>.loc</code> para seleccionar datos espec\u00edficos del DataFrame. La funci\u00f3n debe:</p> <ul> <li>Seleccionar un empleado espec\u00edfico por su ID</li> <li>Seleccionar m\u00faltiples empleados usando una lista de IDs</li> <li>Seleccionar un rango de empleados</li> <li>Mostrar todos los resultados con formato claro</li> </ul> <p>Archivo: <code>src/ejercicio_01.py</code></p>"},{"location":"activities/p6/#ejercicio-2-filtrado-con-condiciones-simples","title":"Ejercicio 2: Filtrado con Condiciones Simples","text":"<p>Crea una funci\u00f3n que filtre empleados usando condiciones con <code>.loc</code>. La funci\u00f3n debe:</p> <ul> <li>Filtrar empleados mayores de 40 a\u00f1os</li> <li>Filtrar empleados del departamento 'IT'</li> <li>Filtrar empleados con salario mayor a 80000</li> <li>Mostrar el n\u00famero de registros encontrados en cada filtro</li> </ul> <p>Archivo: <code>src/ejercicio_02.py</code></p>"},{"location":"activities/p6/#ejercicio-3-filtrado-con-multiples-condiciones","title":"Ejercicio 3: Filtrado con M\u00faltiples Condiciones","text":"<p>Desarrolla una funci\u00f3n que combine m\u00faltiples condiciones con <code>.loc</code>. La funci\u00f3n debe:</p> <ul> <li>Filtrar empleados de IT con salario mayor a 70000</li> <li>Filtrar empleados de Ventas o Marketing</li> <li>Filtrar empleados activos con m\u00e1s de 5 a\u00f1os de experiencia</li> <li>Mostrar estad\u00edsticas b\u00e1sicas de cada grupo filtrado</li> </ul> <p>Archivo: <code>src/ejercicio_03.py</code></p>"},{"location":"activities/p6/#ejercicio-4-seleccion-de-columnas-especificas","title":"Ejercicio 4: Selecci\u00f3n de Columnas Espec\u00edficas","text":"<p>Implementa una funci\u00f3n que seleccione columnas espec\u00edficas con <code>.loc</code>. La funci\u00f3n debe:</p> <ul> <li>Seleccionar solo nombre y salario de todos los empleados</li> <li>Seleccionar un rango de columnas desde nombre hasta departamento</li> <li>Combinar filtro de filas y columnas para empleados mayores de 50 a\u00f1os</li> <li>Mostrar las primeras 10 filas de cada selecci\u00f3n</li> </ul> <p>Archivo: <code>src/ejercicio_04.py</code></p>"},{"location":"activities/p6/#ejercicio-5-modificacion-de-datos-con-loc","title":"Ejercicio 5: Modificaci\u00f3n de Datos con .loc","text":"<p>Crea una funci\u00f3n que modifique datos usando <code>.loc</code>. La funci\u00f3n debe:</p> <ul> <li>Aumentar el salario en 10% a empleados de IT</li> <li>Cambiar el estado a inactivo para empleados mayores de 60 a\u00f1os</li> <li>Actualizar la ciudad a 'Bogot\u00e1' para empleados de RRHH</li> <li>Mostrar los cambios realizados antes y despu\u00e9s</li> </ul> <p>Archivo: <code>src/ejercicio_05.py</code></p>"},{"location":"activities/p6/#ejercicio-6-filtrado-con-funciones-de-string","title":"Ejercicio 6: Filtrado con Funciones de String","text":"<p>Desarrolla una funci\u00f3n que use m\u00e9todos de string con <code>.loc</code>. La funci\u00f3n debe:</p> <ul> <li>Filtrar empleados cuyo nombre contenga el d\u00edgito '1'</li> <li>Filtrar empleados cuyo apellido termine en '5'</li> <li>Filtrar empleados de ciudades que empiecen con 'B'</li> <li>Mostrar estad\u00edsticas de cada grupo encontrado</li> </ul> <p>Archivo: <code>src/ejercicio_06.py</code></p>"},{"location":"activities/p6/#ejercicio-7-filtrado-por-fechas","title":"Ejercicio 7: Filtrado por Fechas","text":"<p>Implementa una funci\u00f3n que filtre por fechas usando <code>.loc</code>. La funci\u00f3n debe:</p> <ul> <li>Filtrar empleados que ingresaron en 2022</li> <li>Filtrar empleados que ingresaron en los \u00faltimos 2 a\u00f1os</li> <li>Filtrar empleados que ingresaron en el primer trimestre de cualquier a\u00f1o</li> <li>Calcular la antig\u00fcedad promedio de cada grupo</li> </ul> <p>Archivo: <code>src/ejercicio_07.py</code></p>"},{"location":"activities/p6/#ejercicio-8-filtrado-avanzado-con-funciones","title":"Ejercicio 8: Filtrado Avanzado con Funciones","text":"<p>Crea una funci\u00f3n que use funciones personalizadas con <code>.loc</code>. La funci\u00f3n debe:</p> <ul> <li>Crear una funci\u00f3n que clasifique salarios (bajo, medio, alto)</li> <li>Filtrar empleados con salario superior al promedio</li> <li>Filtrar empleados con salario en el percentil 75</li> <li>Mostrar distribuci\u00f3n de cada categor\u00eda</li> </ul> <p>Archivo: <code>src/ejercicio_08.py</code></p>"},{"location":"activities/p6/#ejercicio-9-combinacion-de-filtros-complejos","title":"Ejercicio 9: Combinaci\u00f3n de Filtros Complejos","text":"<p>Desarrolla una funci\u00f3n que combine m\u00faltiples tipos de filtros. La funci\u00f3n debe:</p> <ul> <li>Filtrar empleados activos, de IT o Finanzas, con salario &gt; 60000 y edad &lt; 45</li> <li>Usar operadores l\u00f3gicos complejos con par\u00e9ntesis</li> <li>Filtrar empleados de ciudades espec\u00edficas con experiencia &gt; 10 a\u00f1os</li> <li>Crear un resumen estad\u00edstico de los grupos filtrados</li> </ul> <p>Archivo: <code>src/ejercicio_09.py</code></p>"},{"location":"activities/p6/#ejercicio-10-analisis-completo-con-loc","title":"Ejercicio 10: An\u00e1lisis Completo con .loc","text":"<p>Implementa una funci\u00f3n que realice un an\u00e1lisis completo usando <code>.loc</code>. La funci\u00f3n debe:</p> <ul> <li>Crear m\u00faltiples vistas del DataFrame usando diferentes filtros</li> <li>Calcular m\u00e9tricas por departamento y ciudad</li> <li>Identificar empleados con caracter\u00edsticas espec\u00edficas (top performers, nuevos, etc.)</li> <li>Generar un reporte completo con todas las m\u00e9tricas</li> </ul> <p>Archivo: <code>src/ejercicio_10.py</code></p>"},{"location":"activities/p6/#ejercicios-iloc-filtrado-por-posicion-ejercicios-11-20","title":"\ud83d\udd22 EJERCICIOS ILOC - Filtrado por Posici\u00f3n (Ejercicios 11-20)","text":""},{"location":"activities/p6/#ejercicio-11-seleccion-basica-con-iloc","title":"Ejercicio 11: Selecci\u00f3n B\u00e1sica con .iloc","text":"<p>Implementa una funci\u00f3n que use <code>.iloc</code> para seleccionar datos por posici\u00f3n. La funci\u00f3n debe:</p> <ul> <li>Seleccionar la primera fila</li> <li>Seleccionar las primeras 5 filas</li> <li>Seleccionar la \u00faltima fila</li> <li>Seleccionar filas espec\u00edficas por posici\u00f3n</li> </ul> <p>Archivo: <code>src/ejercicio_11.py</code></p>"},{"location":"activities/p6/#ejercicio-12-seleccion-con-rangos","title":"Ejercicio 12: Selecci\u00f3n con Rangos","text":"<p>Crea una funci\u00f3n que use rangos con <code>.iloc</code>. La funci\u00f3n debe:</p> <ul> <li>Seleccionar filas del 10 al 20</li> <li>Seleccionar las \u00faltimas 10 filas</li> <li>Seleccionar filas pares</li> <li>Seleccionar cada tercera fila</li> </ul> <p>Archivo: <code>src/ejercicio_12.py</code></p>"},{"location":"activities/p6/#ejercicio-13-seleccion-de-multiples-filas","title":"Ejercicio 13: Selecci\u00f3n de M\u00faltiples Filas","text":"<p>Desarrolla una funci\u00f3n que seleccione m\u00faltiples filas no consecutivas. La funci\u00f3n debe:</p> <ul> <li>Seleccionar filas usando una lista de posiciones espec\u00edficas</li> <li>Seleccionar filas aleatorias</li> <li>Combinar diferentes m\u00e9todos de selecci\u00f3n</li> <li>Mostrar estad\u00edsticas de las filas seleccionadas</li> </ul> <p>Archivo: <code>src/ejercicio_13.py</code></p>"},{"location":"activities/p6/#ejercicio-14-seleccion-de-columnas-por-posicion","title":"Ejercicio 14: Selecci\u00f3n de Columnas por Posici\u00f3n","text":"<p>Implementa una funci\u00f3n que seleccione columnas usando <code>.iloc</code>. La funci\u00f3n debe:</p> <ul> <li>Seleccionar las primeras 3 columnas</li> <li>Seleccionar columnas espec\u00edficas por posici\u00f3n</li> <li>Seleccionar la \u00faltima columna</li> <li>Combinar selecci\u00f3n de filas y columnas</li> </ul> <p>Archivo: <code>src/ejercicio_14.py</code></p>"},{"location":"activities/p6/#ejercicio-15-modificacion-de-datos-con-iloc","title":"Ejercicio 15: Modificaci\u00f3n de Datos con .iloc","text":"<p>Crea una funci\u00f3n que modifique datos usando <code>.iloc</code>. La funci\u00f3n debe:</p> <ul> <li>Modificar valores en posiciones espec\u00edficas</li> <li>Modificar un rango de celdas</li> <li>Modificar m\u00faltiples columnas a la vez</li> <li>Mostrar los cambios realizados</li> </ul> <p>Archivo: <code>src/ejercicio_15.py</code></p>"},{"location":"activities/p6/#ejercicio-16-seleccion-con-pasos","title":"Ejercicio 16: Selecci\u00f3n con Pasos","text":"<p>Desarrolla una funci\u00f3n que use pasos en la selecci\u00f3n con <code>.iloc</code>. La funci\u00f3n debe:</p> <ul> <li>Seleccionar cada segunda fila</li> <li>Seleccionar filas en orden inverso</li> <li>Seleccionar cada quinta fila empezando desde la tercera posici\u00f3n</li> <li>Combinar pasos en filas y columnas</li> </ul> <p>Archivo: <code>src/ejercicio_16.py</code></p>"},{"location":"activities/p6/#ejercicio-17-seleccion-avanzada-con-iloc","title":"Ejercicio 17: Selecci\u00f3n Avanzada con .iloc","text":"<p>Implementa una funci\u00f3n que realice selecciones complejas. La funci\u00f3n debe:</p> <ul> <li>Seleccionar subconjuntos espec\u00edficos del DataFrame</li> <li>Usar arrays booleanos con <code>.iloc</code></li> <li>Combinar <code>.iloc</code> con funciones de agregaci\u00f3n</li> <li>Crear vistas personalizadas del DataFrame</li> </ul> <p>Archivo: <code>src/ejercicio_17.py</code></p>"},{"location":"activities/p6/#ejercicio-18-trabajo-con-listas-de-indices","title":"Ejercicio 18: Trabajo con Listas de \u00cdndices","text":"<p>Crea una funci\u00f3n que trabaje con listas de \u00edndices din\u00e1micas. La funci\u00f3n debe:</p> <ul> <li>Generar listas de \u00edndices basadas en condiciones</li> <li>Encontrar posiciones que cumplan criterios espec\u00edficos</li> <li>Seleccionar filas basadas en percentiles</li> <li>Mostrar diferentes muestras del DataFrame</li> </ul> <p>Archivo: <code>src/ejercicio_18.py</code></p>"},{"location":"activities/p6/#ejercicio-19-combinaciones-de-iloc","title":"Ejercicio 19: Combinaciones de .iloc","text":"<p>Desarrolla una funci\u00f3n que combine diferentes usos de <code>.iloc</code>. La funci\u00f3n debe:</p> <ul> <li>Crear m\u00faltiples vistas usando diferentes patrones de selecci\u00f3n</li> <li>Combinar selecci\u00f3n aleatoria con selecci\u00f3n sistem\u00e1tica</li> <li>Usar <code>.iloc</code> para crear muestras estratificadas</li> <li>Comparar diferentes m\u00e9todos de muestreo</li> </ul> <p>Archivo: <code>src/ejercicio_19.py</code></p>"},{"location":"activities/p6/#ejercicio-20-analisis-completo-con-iloc","title":"Ejercicio 20: An\u00e1lisis Completo con .iloc","text":"<p>Implementa una funci\u00f3n que realice un an\u00e1lisis completo usando <code>.iloc</code>. La funci\u00f3n debe:</p> <ul> <li>Crear diferentes vistas del DataFrame usando posiciones</li> <li>Realizar an\u00e1lisis de muestras aleatorias vs sistem\u00e1ticas</li> <li>Comparar rendimiento de diferentes m\u00e9todos de selecci\u00f3n</li> <li>Generar un reporte completo con m\u00e9tricas de las diferentes selecciones</li> </ul> <p>Archivo: <code>src/ejercicio_20.py</code></p>"},{"location":"activities/p7/","title":"Semana 11: Operaciones de Agregar, Agrupar y Fusionar en Pandas - Actividad Pr\u00e1ctica","text":""},{"location":"activities/p7/#instrucciones-de-la-actividad","title":"\ud83c\udfaf Instrucciones de la Actividad","text":""},{"location":"activities/p7/#objetivo","title":"\ud83d\udccb Objetivo","text":"<p>Desarrollar habilidades avanzadas en las operaciones fundamentales de Pandas para combinar y manipular DataFrames, dominando el uso de <code>concat()</code>, <code>groupby()</code>, <code>merge()</code> y <code>join()</code> para realizar an\u00e1lisis de datos complejos con m\u00faltiples fuentes de informaci\u00f3n.</p>"},{"location":"activities/p7/#configuracion-del-entorno","title":"\ud83d\udd27 Configuraci\u00f3n del Entorno","text":""},{"location":"activities/p7/#1-fork-del-repositorio","title":"1. Fork del Repositorio","text":"<ol> <li>Hacer Fork: Haz clic en el bot\u00f3n \"Fork\" en la esquina superior derecha de este repositorio</li> </ol> <p><pre><code>https://github.com/jfinfocesde/act_ntp_s11.git\n</code></pre> 2. Clonar tu Fork: Clona tu repositorio fork a tu m\u00e1quina local    <pre><code>git clone https://github.com/TU_USUARIO/act_ntp_s11.git\ncd act_ntp_s11\n</code></pre></p>"},{"location":"activities/p7/#2-instalacion-de-dependencias","title":"2. Instalaci\u00f3n de Dependencias","text":"<pre><code>pip install pandas numpy matplotlib\n</code></pre>"},{"location":"activities/p7/#3-estructura-del-proyecto","title":"3. Estructura del Proyecto","text":"<pre><code>act_ntp_s11/\n\u251c\u2500\u2500 README.md              # Este archivo con instrucciones\n\u251c\u2500\u2500 activities.json        # Lista de ejercicios\n\u251c\u2500\u2500 evaluations.json       # Criterios de evaluaci\u00f3n\n\u251c\u2500\u2500 info.json             # Informaci\u00f3n del proyecto\n\u2514\u2500\u2500 src/                  # Carpeta para tus soluciones\n    \u251c\u2500\u2500 ejercicio_01.py   # Ejercicio 1 - concat b\u00e1sico\n    \u251c\u2500\u2500 ejercicio_02.py   # Ejercicio 2 - concat con keys\n    \u251c\u2500\u2500 ejercicio_03.py   # Ejercicio 3 - concat horizontal\n    \u251c\u2500\u2500 ejercicio_04.py   # Ejercicio 4 - groupby b\u00e1sico\n    \u251c\u2500\u2500 ejercicio_05.py   # Ejercicio 5 - groupby agregaciones m\u00faltiples\n    \u251c\u2500\u2500 ejercicio_06.py   # Ejercicio 6 - groupby con transform\n    \u251c\u2500\u2500 ejercicio_07.py   # Ejercicio 7 - groupby con fechas\n    \u251c\u2500\u2500 ejercicio_08.py   # Ejercicio 8 - merge inner join\n    \u251c\u2500\u2500 ejercicio_09.py   # Ejercicio 9 - merge m\u00faltiples tipos\n    \u2514\u2500\u2500 ejercicio_10.py   # Ejercicio 10 - proyecto integrador\n</code></pre>"},{"location":"activities/p7/#ejercicios-a-resolver","title":"\ud83d\ude80 Ejercicios a Resolver","text":""},{"location":"activities/p7/#dataframe-base-para-todos-los-ejercicios","title":"\ud83d\udcca DataFrame Base para Todos los Ejercicios","text":"<p>Todos los ejercicios trabajar\u00e1n con un DataFrame unificado que simula un sistema de gesti\u00f3n empresarial. Este DataFrame se genera completamente por c\u00f3digo:</p> <pre><code>import pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\nimport matplotlib.pyplot as plt\n\n# Configurar semilla para reproducibilidad\nnp.random.seed(42)\n\ndef crear_dataset_empresarial():\n    \"\"\"\n    Crea un dataset empresarial completo con todas las tablas necesarias\n    para los ejercicios de concat, groupby y merge.\n    \"\"\"\n\n    # DataFrame principal de transacciones de ventas\n    n_ventas = 200\n    ventas = pd.DataFrame({\n        'venta_id': range(1, n_ventas + 1),\n        'empleado_id': np.random.randint(1, 21, n_ventas),\n        'producto_id': np.random.randint(1, 16, n_ventas),\n        'departamento_id': np.random.randint(1, 6, n_ventas),\n        'cantidad': np.random.randint(1, 10, n_ventas),\n        'precio_unitario': np.random.randint(50, 1000, n_ventas),\n        'descuento': np.random.uniform(0, 0.3, n_ventas),\n        'fecha_venta': [\n            datetime(2023, 1, 1) + timedelta(days=np.random.randint(0, 730))\n            for _ in range(n_ventas)\n        ],\n        'a\u00f1o': np.random.choice([2023, 2024], n_ventas),\n        'trimestre': np.random.randint(1, 5, n_ventas),\n        'region': np.random.choice(['Norte', 'Centro', 'Sur'], n_ventas)\n    })\n\n    # Calcular columnas derivadas\n    ventas['total_bruto'] = ventas['cantidad'] * ventas['precio_unitario']\n    ventas['total_neto'] = ventas['total_bruto'] * (1 - ventas['descuento'])\n\n    # DataFrame de empleados\n    empleados = pd.DataFrame({\n        'empleado_id': range(1, 21),\n        'nombre': [f'Empleado_{i}' for i in range(1, 21)],\n        'apellido': [f'Apellido_{i}' for i in range(1, 21)],\n        'departamento_id': np.random.randint(1, 6, 20),\n        'salario': np.random.randint(40000, 150000, 20),\n        'fecha_ingreso': [\n            datetime(2020, 1, 1) + timedelta(days=np.random.randint(0, 1460))\n            for _ in range(20)\n        ],\n        'activo': np.random.choice([True, False], 20, p=[0.9, 0.1]),\n        'edad': np.random.randint(25, 60, 20)\n    })\n\n    # DataFrame de productos\n    productos = pd.DataFrame({\n        'producto_id': range(1, 16),\n        'nombre_producto': [f'Producto_{i}' for i in range(1, 16)],\n        'categoria': np.random.choice(['Electr\u00f3nicos', 'Ropa', 'Hogar', 'Deportes'], 15),\n        'precio_base': np.random.randint(30, 800, 15),\n        'costo': np.random.randint(15, 400, 15),\n        'stock': np.random.randint(10, 100, 15)\n    })\n\n    # DataFrame de departamentos\n    departamentos = pd.DataFrame({\n        'departamento_id': range(1, 6),\n        'nombre_dept': ['Ventas', 'Marketing', 'IT', 'RRHH', 'Finanzas'],\n        'presupuesto': [500000, 300000, 800000, 200000, 600000],\n        'ubicacion': ['Piso 1', 'Piso 2', 'Piso 3', 'Piso 1', 'Piso 2']\n    })\n\n    return ventas, empleados, productos, departamentos\n\n# Crear los DataFrames\nventas, empleados, productos, departamentos = crear_dataset_empresarial()\n\n# Mostrar informaci\u00f3n b\u00e1sica\nprint(\"=== INFORMACI\u00d3N DEL DATASET ===\")\nprint(f\"Ventas: {len(ventas)} registros\")\nprint(f\"Empleados: {len(empleados)} registros\")\nprint(f\"Productos: {len(productos)} registros\")\nprint(f\"Departamentos: {len(departamentos)} registros\")\n</code></pre> <p>Estructura de los DataFrames:</p> <ul> <li>ventas: Transacciones de ventas (200 registros) con informaci\u00f3n completa de cada venta</li> <li>empleados: Informaci\u00f3n de empleados (20 registros) con datos personales y laborales</li> <li>productos: Cat\u00e1logo de productos (15 registros) con precios y categor\u00edas</li> <li>departamentos: Informaci\u00f3n de departamentos (5 registros) con presupuestos y ubicaciones</li> </ul>"},{"location":"activities/p7/#ejercicios-practicos-10-ejercicios","title":"\ud83d\udcdd EJERCICIOS PR\u00c1CTICOS (10 Ejercicios)","text":""},{"location":"activities/p7/#ejercicio-1-concatenacion-basica-vertical","title":"Ejercicio 1: Concatenaci\u00f3n B\u00e1sica Vertical \ud83d\udd17","text":"<p>Tema: Operaciones de Concatenaci\u00f3n con <code>concat()</code></p> <p>Implementa una funci\u00f3n que divida el DataFrame de ventas por a\u00f1o y luego los concatene nuevamente. La funci\u00f3n debe:</p> <ul> <li>Dividir las ventas en DataFrames separados por a\u00f1o (2023 y 2024)</li> <li>Concatenar verticalmente usando <code>pd.concat()</code></li> <li>Resetear el \u00edndice para evitar duplicados</li> <li>Verificar que no haya p\u00e9rdida de datos</li> <li>Mostrar estad\u00edsticas antes y despu\u00e9s de la concatenaci\u00f3n</li> </ul> <p>Archivo: <code>src/ejercicio_01.py</code></p> <p>C\u00f3digo base: <pre><code>def concatenacion_basica(ventas_df):\n    \"\"\"\n    Divide las ventas por a\u00f1o y las concatena nuevamente\n    \"\"\"\n    # Tu c\u00f3digo aqu\u00ed\n    pass\n</code></pre></p>"},{"location":"activities/p7/#ejercicio-2-concatenacion-con-identificadores","title":"Ejercicio 2: Concatenaci\u00f3n con Identificadores \ud83c\udff7\ufe0f","text":"<p>Tema: Concatenaci\u00f3n con <code>keys</code> para crear \u00edndices jer\u00e1rquicos</p> <p>Crea una funci\u00f3n que use <code>concat()</code> con keys para identificar el origen de los datos. La funci\u00f3n debe:</p> <ul> <li>Dividir las ventas por regi\u00f3n (Norte, Centro, Sur)</li> <li>Concatenar con keys para crear un \u00edndice jer\u00e1rquico</li> <li>Mostrar c\u00f3mo acceder a datos espec\u00edficos por regi\u00f3n</li> <li>Calcular totales por regi\u00f3n usando el \u00edndice jer\u00e1rquico</li> </ul> <p>Archivo: <code>src/ejercicio_02.py</code></p> <p>C\u00f3digo base: <pre><code>def concatenacion_con_keys(ventas_df):\n    \"\"\"\n    Concatena ventas por regi\u00f3n con identificadores\n    \"\"\"\n    # Tu c\u00f3digo aqu\u00ed\n    pass\n</code></pre></p>"},{"location":"activities/p7/#ejercicio-3-concatenacion-horizontal","title":"Ejercicio 3: Concatenaci\u00f3n Horizontal \u2194\ufe0f","text":"<p>Tema: Concatenaci\u00f3n horizontal con <code>axis=1</code></p> <p>Desarrolla una funci\u00f3n que combine DataFrames horizontalmente. La funci\u00f3n debe:</p> <ul> <li>Dividir el DataFrame de empleados en informaci\u00f3n personal (nombre, apellido, edad) e informaci\u00f3n laboral (salario, departamento, activo)</li> <li>Concatenar horizontalmente usando <code>concat()</code> con <code>axis=1</code></li> <li>Manejar \u00edndices que coinciden</li> <li>Verificar la integridad de los datos combinados</li> </ul> <p>Archivo: <code>src/ejercicio_03.py</code></p> <p>C\u00f3digo base: <pre><code>def concatenacion_horizontal(empleados_df):\n    \"\"\"\n    Divide y concatena horizontalmente informaci\u00f3n de empleados\n    \"\"\"\n    # Tu c\u00f3digo aqu\u00ed\n    pass\n</code></pre></p>"},{"location":"activities/p7/#ejercicio-4-agrupacion-basica","title":"Ejercicio 4: Agrupaci\u00f3n B\u00e1sica \ud83d\udcca","text":"<p>Tema: Operaciones b\u00e1sicas con <code>groupby()</code></p> <p>Implementa una funci\u00f3n que use <code>groupby()</code> para an\u00e1lisis b\u00e1sicos. La funci\u00f3n debe:</p> <ul> <li>Agrupar ventas por departamento</li> <li>Calcular estad\u00edsticas b\u00e1sicas (count, mean, sum, std) del total_neto</li> <li>Agrupar empleados por departamento y calcular salario promedio</li> <li>Mostrar los resultados de forma clara y organizada</li> </ul> <p>Archivo: <code>src/ejercicio_04.py</code></p> <p>C\u00f3digo base: <pre><code>def agrupacion_basica(ventas_df, empleados_df):\n    \"\"\"\n    Realiza agrupaciones b\u00e1sicas por departamento\n    \"\"\"\n    # Tu c\u00f3digo aqu\u00ed\n    pass\n</code></pre></p>"},{"location":"activities/p7/#ejercicio-5-agregaciones-multiples","title":"Ejercicio 5: Agregaciones M\u00faltiples \ud83d\udd22","text":"<p>Tema: M\u00faltiples agregaciones con <code>agg()</code></p> <p>Crea una funci\u00f3n que aplique m\u00faltiples agregaciones simult\u00e1neamente. La funci\u00f3n debe:</p> <ul> <li>Usar <code>agg()</code> con m\u00faltiples funciones en una sola operaci\u00f3n</li> <li>Aplicar diferentes agregaciones a diferentes columnas</li> <li>Crear funciones de agregaci\u00f3n personalizadas (ej: rango = max - min)</li> <li>Formatear los resultados para mejor legibilidad</li> </ul> <p>Archivo: <code>src/ejercicio_05.py</code></p> <p>C\u00f3digo base: <pre><code>def agregaciones_multiples(ventas_df):\n    \"\"\"\n    Aplica m\u00faltiples agregaciones a las ventas\n    \"\"\"\n    # Tu c\u00f3digo aqu\u00ed\n    pass\n</code></pre></p>"},{"location":"activities/p7/#ejercicio-6-transform-mantener-estructura-original","title":"Ejercicio 6: Transform - Mantener Estructura Original \ud83d\udd04","text":"<p>Tema: Uso de <code>transform()</code> para mantener la forma original</p> <p>Implementa una funci\u00f3n que use <code>transform()</code> para agregar columnas calculadas. La funci\u00f3n debe:</p> <ul> <li>Calcular el total promedio por departamento y agregarlo como nueva columna</li> <li>Calcular el ranking de ventas por empleado dentro de cada departamento</li> <li>Normalizar los totales de venta dentro de cada trimestre</li> <li>Comparar <code>transform()</code> vs <code>apply()</code> en t\u00e9rminos de resultado</li> </ul> <p>Archivo: <code>src/ejercicio_06.py</code></p> <p>C\u00f3digo base: <pre><code>def usar_transform(ventas_df):\n    \"\"\"\n    Usa transform para agregar columnas calculadas\n    \"\"\"\n    # Tu c\u00f3digo aqu\u00ed\n    pass\n</code></pre></p>"},{"location":"activities/p7/#ejercicio-7-agrupacion-temporal","title":"Ejercicio 7: Agrupaci\u00f3n Temporal \ud83d\udcc5","text":"<p>Tema: Agrupaci\u00f3n por fechas y an\u00e1lisis temporal</p> <p>Implementa una funci\u00f3n que agrupe datos temporales. La funci\u00f3n debe:</p> <ul> <li>Agrupar ventas por mes y a\u00f1o usando <code>pd.Grouper</code></li> <li>Calcular tendencias mensuales de ventas</li> <li>Identificar el mes con mejores y peores ventas</li> <li>Crear un an\u00e1lisis de estacionalidad b\u00e1sico</li> </ul> <p>Archivo: <code>src/ejercicio_07.py</code></p> <p>C\u00f3digo base: <pre><code>def agrupacion_temporal(ventas_df):\n    \"\"\"\n    Agrupa ventas por per\u00edodos temporales\n    \"\"\"\n    # Tu c\u00f3digo aqu\u00ed\n    pass\n</code></pre></p>"},{"location":"activities/p7/#ejercicio-8-merge-inner-join","title":"Ejercicio 8: Merge Inner Join \ud83d\udd17","text":"<p>Tema: Fusi\u00f3n de DataFrames con <code>merge()</code> - Inner Join</p> <p>Implementa una funci\u00f3n que use <code>merge()</code> con inner join. La funci\u00f3n debe:</p> <ul> <li>Fusionar ventas con empleados para obtener informaci\u00f3n completa</li> <li>Fusionar el resultado con productos para agregar detalles del producto</li> <li>Verificar que solo se mantengan registros con coincidencias</li> <li>Analizar qu\u00e9 datos se pierden en el proceso y por qu\u00e9</li> </ul> <p>Archivo: <code>src/ejercicio_08.py</code></p> <p>C\u00f3digo base: <pre><code>def merge_inner_join(ventas_df, empleados_df, productos_df):\n    \"\"\"\n    Fusiona m\u00faltiples DataFrames usando inner join\n    \"\"\"\n    # Tu c\u00f3digo aqu\u00ed\n    pass\n</code></pre></p>"},{"location":"activities/p7/#ejercicio-9-merge-con-multiples-tipos-de-join","title":"Ejercicio 9: Merge con M\u00faltiples Tipos de Join \ud83d\udd04","text":"<p>Tema: Comparaci\u00f3n de diferentes tipos de join</p> <p>Crea una funci\u00f3n que compare diferentes tipos de merge. La funci\u00f3n debe:</p> <ul> <li>Realizar inner, left, right y outer join entre ventas y empleados</li> <li>Comparar el n\u00famero de registros resultantes en cada caso</li> <li>Identificar registros hu\u00e9rfanos en cada tipo de join</li> <li>Crear un reporte de integridad de datos para cada tipo</li> </ul> <p>Archivo: <code>src/ejercicio_09.py</code></p> <p>C\u00f3digo base: <pre><code>def comparar_tipos_join(ventas_df, empleados_df):\n    \"\"\"\n    Compara diferentes tipos de join y sus resultados\n    \"\"\"\n    # Tu c\u00f3digo aqu\u00ed\n    pass\n</code></pre></p>"},{"location":"activities/p7/#ejercicio-10-proyecto-integrador-final","title":"Ejercicio 10: Proyecto Integrador Final \ud83c\udfaf","text":"<p>Tema: Combinaci\u00f3n de todas las operaciones aprendidas</p> <p>Implementa una funci\u00f3n que combine todas las operaciones aprendidas en un an\u00e1lisis empresarial completo. La funci\u00f3n debe:</p> <ul> <li>Concatenar datos de diferentes per\u00edodos/regiones</li> <li>Agrupar y agregar m\u00e9tricas por m\u00faltiples dimensiones</li> <li>Fusionar todos los DataFrames para crear un dataset maestro</li> <li>Crear un dashboard de m\u00e9tricas empresariales con:</li> <li>Top 5 empleados por ventas</li> <li>An\u00e1lisis de rendimiento por departamento</li> <li>Productos m\u00e1s vendidos por categor\u00eda</li> <li>Tendencias temporales de ventas</li> <li>Generar visualizaciones b\u00e1sicas de los resultados</li> <li>Implementar validaciones y controles de calidad</li> </ul> <p>Archivo: <code>src/ejercicio_10.py</code></p> <p>C\u00f3digo base: <pre><code>def proyecto_integrador(ventas_df, empleados_df, productos_df, departamentos_df):\n    \"\"\"\n    An\u00e1lisis empresarial completo usando todas las operaciones de Pandas\n    \"\"\"\n    # Tu c\u00f3digo aqu\u00ed\n    pass\n</code></pre></p>"},{"location":"activities/p7/#criterios-de-evaluacion","title":"\ud83d\udcc8 Criterios de Evaluaci\u00f3n","text":""},{"location":"activities/p7/#rubrica-de-evaluacion-100-puntos","title":"\ud83c\udfaf R\u00fabrica de Evaluaci\u00f3n (100 puntos)","text":""},{"location":"activities/p7/#operaciones-de-concatenacion-30-puntos-ejercicios-1-3","title":"Operaciones de Concatenaci\u00f3n (30 puntos) - Ejercicios 1-3","text":"<ul> <li>Excelente (26-30): Domina <code>concat()</code> en todas sus variantes, maneja \u00edndices y keys correctamente</li> <li>Bueno (21-25): Usa <code>concat()</code> correctamente en casos b\u00e1sicos, algunas dificultades con casos complejos</li> <li>Regular (16-20): Entiende <code>concat()</code> b\u00e1sico, errores en casos avanzados</li> <li>Deficiente (0-15): No comprende las operaciones de concatenaci\u00f3n</li> </ul>"},{"location":"activities/p7/#operaciones-de-agrupacion-40-puntos-ejercicios-4-7","title":"Operaciones de Agrupaci\u00f3n (40 puntos) - Ejercicios 4-7","text":"<ul> <li>Excelente (36-40): Domina <code>groupby</code>, <code>agg</code>, <code>transform</code> con funciones personalizadas y an\u00e1lisis temporal</li> <li>Bueno (29-35): Usa <code>groupby</code> y agregaciones b\u00e1sicas correctamente, dificultades con <code>transform</code></li> <li>Regular (22-28): Entiende <code>groupby</code> b\u00e1sico, errores en agregaciones complejas</li> <li>Deficiente (0-21): No comprende las operaciones de agrupaci\u00f3n</li> </ul>"},{"location":"activities/p7/#operaciones-de-fusion-20-puntos-ejercicios-8-9","title":"Operaciones de Fusi\u00f3n (20 puntos) - Ejercicios 8-9","text":"<ul> <li>Excelente (18-20): Domina <code>merge</code> en todos los tipos, maneja claves m\u00faltiples y validaciones</li> <li>Bueno (15-17): Usa <code>merge</code> correctamente en casos b\u00e1sicos, algunas dificultades con joins complejos</li> <li>Regular (12-14): Entiende <code>merge</code> b\u00e1sico, errores en tipos de join</li> <li>Deficiente (0-11): No comprende las operaciones de fusi\u00f3n</li> </ul>"},{"location":"activities/p7/#proyecto-integrador-y-calidad-del-codigo-10-puntos-ejercicio-10","title":"Proyecto Integrador y Calidad del C\u00f3digo (10 puntos) - Ejercicio 10","text":"<ul> <li>Excelente (9-10): C\u00f3digo limpio, bien documentado, proyecto completo con validaciones</li> <li>Bueno (7-8): C\u00f3digo funcional con documentaci\u00f3n b\u00e1sica, proyecto mayormente completo</li> <li>Regular (5-6): C\u00f3digo funcional pero poco documentado, proyecto parcial</li> <li>Deficiente (0-4): C\u00f3digo dif\u00edcil de entender, proyecto incompleto</li> </ul>"},{"location":"activities/p7/#recursos-adicionales","title":"\ud83d\udcda Recursos Adicionales","text":""},{"location":"activities/p7/#documentacion-oficial","title":"\ud83d\udcd6 Documentaci\u00f3n Oficial","text":"<ul> <li>Pandas Merge Documentation</li> <li>Pandas GroupBy Documentation</li> <li>Pandas Concatenation Documentation</li> </ul>"},{"location":"activities/p7/#tutoriales-recomendados","title":"\ud83c\udfa5 Tutoriales Recomendados","text":"<ul> <li>Pandas GroupBy Tutorial</li> <li>Pandas Merge and Join</li> </ul>"},{"location":"activities/p7/#datasets-de-practica","title":"\ud83d\udcca Datasets de Pr\u00e1ctica","text":"<ul> <li>Kaggle Datasets</li> <li>UCI Machine Learning Repository</li> </ul>"},{"location":"activities/p7/#entrega","title":"\ud83d\ude80 Entrega","text":""},{"location":"activities/p7/#fecha-limite","title":"\ud83d\udcc5 Fecha L\u00edmite","text":"<p>Fecha de entrega: [Especificar fecha]</p>"},{"location":"activities/p7/#instrucciones-de-entrega","title":"\ud83d\udccb Instrucciones de Entrega","text":"<ol> <li>Completar todos los ejercicios en los archivos correspondientes</li> <li>Documentar el c\u00f3digo con comentarios explicativos</li> <li>Incluir validaciones y manejo de errores</li> <li>Crear un README.md con resumen de soluciones</li> <li>Hacer commit y push al repositorio fork</li> <li>Crear Pull Request al repositorio original</li> </ol>"},{"location":"activities/p7/#checklist-de-entrega","title":"\u2705 Checklist de Entrega","text":"<ul> <li>[ ] Todos los 10 ejercicios completados</li> <li>[ ] C\u00f3digo documentado y comentado</li> <li>[ ] Validaciones implementadas</li> <li>[ ] README.md con resumen</li> <li>[ ] Pull Request creado</li> <li>[ ] C\u00f3digo ejecutable sin errores</li> </ul>"},{"location":"activities/p7/#consejos-para-el-exito","title":"\ud83d\udca1 Consejos para el \u00c9xito","text":""},{"location":"activities/p7/#mejores-practicas","title":"\ud83c\udfaf Mejores Pr\u00e1cticas","text":"<ol> <li>Planifica antes de codificar: Entiende qu\u00e9 operaci\u00f3n necesitas antes de escribir c\u00f3digo</li> <li>Valida tus datos: Siempre verifica la integridad antes y despu\u00e9s de las operaciones</li> <li>Documenta tus decisiones: Explica por qu\u00e9 elegiste un tipo de join o agregaci\u00f3n</li> <li>Prueba con datos peque\u00f1os: Valida tu l\u00f3gica con subconjuntos antes de aplicar a todo el dataset</li> <li>Optimiza el rendimiento: Considera el orden de las operaciones para mejor eficiencia</li> </ol>"},{"location":"activities/p7/#herramientas-utiles","title":"\ud83d\udd27 Herramientas \u00datiles","text":"<ul> <li>Jupyter Notebooks: Para experimentaci\u00f3n y prototipado</li> <li>pandas.DataFrame.info(): Para entender la estructura de tus datos</li> <li>pandas.DataFrame.describe(): Para estad\u00edsticas r\u00e1pidas</li> <li>pandas.DataFrame.head(): Para inspeccionar resultados</li> </ul>"},{"location":"activities/p7/#distribucion-de-ejercicios","title":"\ud83d\udcca Distribuci\u00f3n de Ejercicios","text":"<ul> <li>Concatenaci\u00f3n (3 ejercicios): Fundamentos de combinaci\u00f3n vertical y horizontal</li> <li>Agrupaci\u00f3n (4 ejercicios): An\u00e1lisis agregado y transformaciones</li> <li>Fusi\u00f3n (2 ejercicios): Combinaci\u00f3n de DataFrames relacionales</li> <li>Integrador (1 ejercicio): Aplicaci\u00f3n completa de todos los conceptos</li> </ul> <p>\u00a1\u00c9xito en tu actividad pr\u00e1ctica! \ud83d\ude80</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"content/p1/","title":"Semana 1 - Pacto pedag\u00f3gico","text":"<p>El pacto pedag\u00f3gico es un acuerdo que se establece entre el docente y los estudiantes al inicio de un curso, con el fin de establecer las normas, expectativas, responsabilidades y compromisos de todas las partes involucradas en el proceso de ense\u00f1anza-aprendizaje.</p> Grupo Viernes 18:15 - 21:30Grupo S\u00e1bado 7:30 - 10:30 <p> <p>Tu navegador no admite la visualizaci\u00f3n de PDFs. Puedes descargarlo aqu\u00ed:      Descargar PDF.</p> </p> <p> <p>Tu navegador no admite la visualizaci\u00f3n de PDFs. Puedes descargarlo aqu\u00ed:      Descargar PDF.</p> </p>"},{"location":"content/p10/","title":"Semana 10 Filtros <code>.loc</code> y <code>.iloc</code>","text":""},{"location":"content/p10/#version-google-colab","title":"Version Google Colab","text":"<p>Este tutorial se puede ejecutar en Google Colab. Para abrir el notebook en Colab, haz clic en el siguiente enlace:</p> <p>Abrir en Colab</p> <p>Pandas es una biblioteca de Python ampliamente utilizada para el an\u00e1lisis de datos. Los m\u00e9todos <code>.loc</code> y <code>.iloc</code> permiten acceder a filas y columnas de un DataFrame de manera precisa. La principal diferencia entre ellos radica en c\u00f3mo seleccionan los datos:</p> <ul> <li><code>.loc</code>: Selecciona datos utilizando etiquetas (nombres de filas o columnas).</li> <li><code>.iloc</code>: Selecciona datos utilizando \u00edndices num\u00e9ricos (posiciones enteras).</li> </ul> <p>Ambos m\u00e9todos son muy flexibles y admiten selecciones de filas, columnas o subconjuntos de datos, ya sea individuales, rangos o listas espec\u00edficas.</p>"},{"location":"content/p10/#1-preparacion-del-entorno","title":"1. Preparaci\u00f3n del entorno","text":"<p>Antes de comenzar, aseg\u00farate de tener instalada la biblioteca Pandas. Si no la tienes, inst\u00e1lala con:</p> <pre><code>pip install pandas\n</code></pre> <p>Carguemos un DataFrame de ejemplo para trabajar con \u00e9l:</p> <pre><code>import pandas as pd\n\n# Crear un DataFrame de ejemplo\ndata = {\n    'Nombre': ['Ana', 'Bob', 'Clara', 'David', 'Emma'],\n    'Edad': [25, 30, 22, 35, 28],\n    'Ciudad': ['Madrid', 'Barcelona', 'Sevilla', 'Valencia', 'Bilbao'],\n    'Puntuaci\u00f3n': [85, 90, 88, 92, 87]\n}\n\ndf = pd.DataFrame(data, index=['a', 'b', 'c', 'd', 'e'])\nprint(df)\n</code></pre> <p>Salida:</p> <pre><code>   Nombre  Edad     Ciudad  Puntuaci\u00f3n\na    Ana    25    Madrid          85\nb    Bob    30 Barcelona          90\nc  Clara    22   Sevilla          88\nd  David    35  Valencia          92\ne   Emma    28    Bilbao          87\n</code></pre> <p>Este DataFrame tiene: - \u00cdndices de filas: <code>'a', 'b', 'c', 'd', 'e'</code>. - Columnas: <code>'Nombre', 'Edad', 'Ciudad', 'Puntuaci\u00f3n'</code>.</p> <p>Ahora, usaremos este DataFrame para explorar <code>.loc</code> y <code>.iloc</code>.</p>"},{"location":"content/p10/#2-uso-de-loc","title":"2. Uso de <code>.loc</code>","text":"<p>El m\u00e9todo <code>.loc</code> se basa en etiquetas (nombres de filas y columnas). Su sintaxis general es:</p> <pre><code>df.loc[filas, columnas]\n</code></pre> <p>Donde: - <code>filas</code>: Puede ser una etiqueta de \u00edndice, una lista de etiquetas, un rango de etiquetas (usando <code>:</code>) o una condici\u00f3n booleana. - <code>columnas</code>: Puede ser una etiqueta de columna, una lista de etiquetas o un rango de etiquetas.</p>"},{"location":"content/p10/#21-seleccionar-una-sola-fila-por-etiqueta","title":"2.1. Seleccionar una sola fila por etiqueta","text":"<pre><code># Seleccionar la fila con \u00edndice 'b'\nprint(df.loc['b'])\n</code></pre> <p>Salida:</p> <pre><code>Nombre            Bob\nEdad               30\nCiudad      Barcelona\nPuntuaci\u00f3n         90\nName: b, dtype: object\n</code></pre> <p>Esto devuelve una Serie con los valores de la fila <code>'b'</code>.</p>"},{"location":"content/p10/#22-seleccionar-una-celda-especifica","title":"2.2. Seleccionar una celda espec\u00edfica","text":"<p>Puedes especificar tanto la fila como la columna:</p> <pre><code># Seleccionar la edad de la fila 'c'\nprint(df.loc['c', 'Edad'])\n</code></pre> <p>Salida:</p> <pre><code>22\n</code></pre>"},{"location":"content/p10/#23-seleccionar-multiples-filas","title":"2.3. Seleccionar m\u00faltiples filas","text":"<p>Puedes pasar una lista de etiquetas o un rango:</p> <pre><code># Seleccionar las filas 'a' y 'c'\nprint(df.loc[['a', 'c']])\n</code></pre> <p>Salida:</p> <pre><code>   Nombre  Edad   Ciudad  Puntuaci\u00f3n\na    Ana    25  Madrid          85\nc  Clara    22 Sevilla          88\n</code></pre> <p>Usando un rango:</p> <pre><code># Seleccionar filas desde 'a' hasta 'c' (inclusive)\nprint(df.loc['a':'c'])\n</code></pre> <p>Salida:</p> <pre><code>   Nombre  Edad     Ciudad  Puntuaci\u00f3n\na    Ana    25    Madrid          85\nb    Bob    30 Barcelona          90\nc  Clara    22   Sevilla          88\n</code></pre> <p>Nota: En <code>.loc</code>, los rangos incluyen el valor final (a diferencia de los \u00edndices num\u00e9ricos en Python).</p>"},{"location":"content/p10/#24-seleccionar-columnas-especificas","title":"2.4. Seleccionar columnas espec\u00edficas","text":"<p>Puedes seleccionar columnas espec\u00edficas para una o m\u00e1s filas:</p> <pre><code># Seleccionar 'Nombre' y 'Edad' de la fila 'b'\nprint(df.loc['b', ['Nombre', 'Edad']])\n</code></pre> <p>Salida:</p> <pre><code>Nombre    Bob\nEdad       30\nName: b, dtype: object\n</code></pre>"},{"location":"content/p10/#25-seleccionar-con-condiciones-booleanas","title":"2.5. Seleccionar con condiciones booleanas","text":"<p><code>.loc</code> es muy poderoso para filtrar filas basadas en condiciones:</p> <pre><code># Seleccionar filas donde la edad sea mayor a 25\nprint(df.loc[df['Edad'] &gt; 25])\n</code></pre> <p>Salida:</p> <pre><code>   Nombre  Edad     Ciudad  Puntuaci\u00f3n\nb    Bob    30 Barcelona          90\nd  David    35  Valencia          92\ne   Emma    28    Bilbao          87\n</code></pre> <p>Puedes combinar condiciones:</p> <pre><code># Seleccionar filas donde Edad &gt; 25 y Puntuaci\u00f3n &gt;= 90\nprint(df.loc[(df['Edad'] &gt; 25) &amp; (df['Puntuaci\u00f3n'] &gt;= 90)])\n</code></pre> <p>Salida:</p> <pre><code>   Nombre  Edad     Ciudad  Puntuaci\u00f3n\nb    Bob    30 Barcelona          90\nd  David    35  Valencia          92\n</code></pre>"},{"location":"content/p10/#26-modificar-datos-con-loc","title":"2.6. Modificar datos con <code>.loc</code>","text":"<p><code>.loc</code> tambi\u00e9n permite modificar valores en el DataFrame:</p> <pre><code># Cambiar la puntuaci\u00f3n de la fila 'a'\ndf.loc['a', 'Puntuaci\u00f3n'] = 95\nprint(df.loc['a'])\n</code></pre> <p>Salida:</p> <pre><code>Nombre          Ana\nEdad             25\nCiudad       Madrid\nPuntuaci\u00f3n       95\nName: a, dtype: object\n</code></pre>"},{"location":"content/p10/#3-uso-de-iloc","title":"3. Uso de <code>.iloc</code>","text":"<p>El m\u00e9todo <code>.iloc</code> se basa en \u00edndices num\u00e9ricos (posiciones enteras). Su sintaxis es similar:</p> <pre><code>df.iloc[filas, columnas]\n</code></pre> <p>Donde: - <code>filas</code>: Posiciones de las filas (0, 1, 2, ...). - <code>columnas</code>: Posiciones de las columnas (0, 1, 2, ...).</p>"},{"location":"content/p10/#31-seleccionar-una-sola-fila-por-posicion","title":"3.1. Seleccionar una sola fila por posici\u00f3n","text":"<pre><code># Seleccionar la fila en la posici\u00f3n 1 (segunda fila)\nprint(df.iloc[1])\n</code></pre> <p>Salida:</p> <pre><code>Nombre            Bob\nEdad               30\nCiudad      Barcelona\nPuntuaci\u00f3n         90\nName: b, dtype: object\n</code></pre>"},{"location":"content/p10/#32-seleccionar-una-celda-especifica","title":"3.2. Seleccionar una celda espec\u00edfica","text":"<pre><code># Seleccionar la celda en la fila 2, columna 1 (Edad de Clara)\nprint(df.iloc[2, 1])\n</code></pre> <p>Salida:</p> <pre><code>22\n</code></pre>"},{"location":"content/p10/#33-seleccionar-multiples-filas","title":"3.3. Seleccionar m\u00faltiples filas","text":"<p>Puedes usar listas o rangos de posiciones:</p> <pre><code># Seleccionar las filas en las posiciones 0 y 2\nprint(df.iloc[[0, 2]])\n</code></pre> <p>Salida:</p> <pre><code>   Nombre  Edad   Ciudad  Puntuaci\u00f3n\na    Ana    25  Madrid          95\nc  Clara    22 Sevilla          88\n</code></pre> <p>Usando un rango:</p> <pre><code># Seleccionar filas desde la posici\u00f3n 0 hasta la 2 (excluye la 2)\nprint(df.iloc[0:2])\n</code></pre> <p>Salida:</p> <pre><code>  Nombre  Edad     Ciudad  Puntuaci\u00f3n\na   Ana    25    Madrid          95\nb   Bob    30 Barcelona          90\n</code></pre> <p>Nota: A diferencia de <code>.loc</code>, los rangos en <code>.iloc</code> excluyen el valor final, como es habitual en Python.</p>"},{"location":"content/p10/#34-seleccionar-columnas-especificas","title":"3.4. Seleccionar columnas espec\u00edficas","text":"<pre><code># Seleccionar las columnas en las posiciones 0 y 2 para la fila 1\nprint(df.iloc[1, [0, 2]])\n</code></pre> <p>Salida:</p> <pre><code>Nombre          Bob\nCiudad    Barcelona\nName: b, dtype: object\n</code></pre>"},{"location":"content/p10/#35-seleccionar-un-subconjunto-de-filas-y-columnas","title":"3.5. Seleccionar un subconjunto de filas y columnas","text":"<pre><code># Seleccionar las primeras 3 filas y las primeras 2 columnas\nprint(df.iloc[0:3, 0:2])\n</code></pre> <p>Salida:</p> <pre><code>   Nombre  Edad\na    Ana    25\nb    Bob    30\nc  Clara    22\n</code></pre>"},{"location":"content/p10/#36-modificar-datos-con-iloc","title":"3.6. Modificar datos con <code>.iloc</code>","text":"<p>Al igual que <code>.loc</code>, puedes modificar valores:</p> <pre><code># Cambiar la edad en la fila 0\ndf.iloc[0, 1] = 26\nprint(df.iloc[0])\n</code></pre> <p>Salida:</p> <pre><code>Nombre          Ana\nEdad             26\nCiudad       Madrid\nPuntuaci\u00f3n       95\nName: a, dtype: object\n</code></pre>"},{"location":"content/p10/#4-diferencias-clave-entre-loc-y-iloc","title":"4. Diferencias clave entre <code>.loc</code> y <code>.iloc</code>","text":"Caracter\u00edstica <code>.loc</code> <code>.iloc</code> Selecci\u00f3n basada en Etiquetas (nombres) \u00cdndices num\u00e9ricos (posiciones) Rangos Incluye el valor final Excluye el valor final Uso t\u00edpico Cuando conoces los nombres de filas/columnas Cuando trabajas con posiciones Condiciones booleanas Compatible No compatible"},{"location":"content/p10/#5-errores-comunes-y-como-evitarlos","title":"5. Errores comunes y c\u00f3mo evitarlos","text":"<ol> <li>Error de \u00edndice en <code>.loc</code>:</li> <li>Si usas una etiqueta que no existe, obtendr\u00e1s un KeyError:      <pre><code>df.loc['z']  # Error: 'z' no es un \u00edndice\n</code></pre></li> <li> <p>Soluci\u00f3n: Verifica las etiquetas con <code>df.index</code> o <code>df.columns</code>.</p> </li> <li> <p>Error de \u00edndice en <code>.iloc</code>:</p> </li> <li>Si usas un \u00edndice fuera de rango, obtendr\u00e1s un IndexError:      <pre><code>df.iloc[10]  # Error: \u00edndice 10 no existe\n</code></pre></li> <li> <p>Soluci\u00f3n: Usa <code>df.shape</code> para conocer las dimensiones del DataFrame.</p> </li> <li> <p>Confundir <code>.loc</code> con <code>.iloc</code>:</p> </li> <li>Usar etiquetas con <code>.iloc</code> o \u00edndices num\u00e9ricos con <code>.loc</code> causar\u00e1 errores:      <pre><code>df.loc[0]    # Error si el \u00edndice no es 0\ndf.iloc['a'] # Error: iloc no acepta etiquetas\n</code></pre></li> <li> <p>Soluci\u00f3n: Recuerda que <code>.loc</code> usa etiquetas y <code>.iloc</code> usa posiciones.</p> </li> <li> <p>Modificar vistas en lugar de copias:</p> </li> <li>Al usar <code>.loc</code> o <code>.iloc</code> para seleccionar un subconjunto y modificarlo, puedes encontrarte con un SettingWithCopyWarning si no tienes cuidado:      <pre><code>subset = df.loc[df['Edad'] &gt; 25]\nsubset['Edad'] = 0  # Puede causar advertencia\n</code></pre></li> <li>Soluci\u00f3n: Usa <code>.copy()</code> para crear una copia expl\u00edcita:      <pre><code>subset = df.loc[df['Edad'] &gt; 25].copy()\nsubset['Edad'] = 0\n</code></pre></li> </ol>"},{"location":"content/p11/","title":"Semana 11 - Operaciones de Agregar, Agrupar y Fusionar en Pandas","text":""},{"location":"content/p11/#introduccion","title":"\ud83d\udcda Introducci\u00f3n","text":"<p>En esta semana aprenderemos las operaciones fundamentales para combinar y manipular DataFrames en Pandas. Estas operaciones son esenciales para el an\u00e1lisis de datos cuando trabajamos con m\u00faltiples fuentes de informaci\u00f3n o necesitamos realizar an\u00e1lisis agregados.</p>"},{"location":"content/p11/#objetivos-de-aprendizaje","title":"\ud83c\udfaf Objetivos de Aprendizaje","text":"<p>Al finalizar esta semana, ser\u00e1s capaz de:</p> <ul> <li>\u2705 Agregar datos usando <code>append()</code> y <code>concat()</code></li> <li>\u2705 Agrupar datos con <code>groupby()</code> y aplicar funciones de agregaci\u00f3n</li> <li>\u2705 Fusionar DataFrames usando <code>merge()</code> y <code>join()</code></li> <li>\u2705 Aplicar estas operaciones en casos pr\u00e1cticos de an\u00e1lisis de datos</li> </ul>"},{"location":"content/p11/#operaciones-de-agregar","title":"\ud83d\udd17 Operaciones de Agregar","text":""},{"location":"content/p11/#11-usando-append-deprecado-en-versiones-recientes","title":"1.1 Usando <code>append()</code> (Deprecado en versiones recientes)","text":"<pre><code># Crear DataFrames de ejemplo\ndf1 = pd.DataFrame({\n    'A': [1, 2, 3],\n    'B': ['a', 'b', 'c']\n})\n\ndf2 = pd.DataFrame({\n    'A': [4, 5, 6],\n    'B': ['d', 'e', 'f']\n})\n\n# Nota: append() est\u00e1 deprecado, usar concat() en su lugar\n# resultado = df1.append(df2, ignore_index=True)\n</code></pre>"},{"location":"content/p11/#12-usando-concat-metodo-recomendado","title":"1.2 Usando <code>concat()</code> - M\u00e9todo Recomendado","text":"<pre><code># Concatenaci\u00f3n vertical (agregar filas)\nresultado_vertical = pd.concat([df1, df2], ignore_index=True)\nprint(\"Concatenaci\u00f3n vertical:\")\nprint(resultado_vertical)\n\n# Concatenaci\u00f3n horizontal (agregar columnas)\ndf3 = pd.DataFrame({\n    'C': [10, 20, 30],\n    'D': ['x', 'y', 'z']\n})\n\nresultado_horizontal = pd.concat([df1, df3], axis=1)\nprint(\"\\nConcatenaci\u00f3n horizontal:\")\nprint(resultado_horizontal)\n</code></pre>"},{"location":"content/p11/#13-opciones-avanzadas-de-concat","title":"1.3 Opciones Avanzadas de <code>concat()</code>","text":"<pre><code># Concatenaci\u00f3n con keys para identificar origen\nresultado_con_keys = pd.concat([df1, df2], keys=['grupo1', 'grupo2'])\nprint(\"Concatenaci\u00f3n con keys:\")\nprint(resultado_con_keys)\n\n# Concatenaci\u00f3n solo de intersecci\u00f3n de columnas\ndf4 = pd.DataFrame({\n    'A': [7, 8],\n    'C': [70, 80]\n})\n\nresultado_inner = pd.concat([df1, df4], join='inner')\nprint(\"\\nConcatenaci\u00f3n inner join:\")\nprint(resultado_inner)\n</code></pre>"},{"location":"content/p11/#operaciones-de-agrupacion","title":"\ud83d\udcca Operaciones de Agrupaci\u00f3n","text":""},{"location":"content/p11/#21-conceptos-basicos-de-groupby","title":"2.1 Conceptos B\u00e1sicos de <code>groupby()</code>","text":"<pre><code># Crear DataFrame de ejemplo para agrupaci\u00f3n\nventas = pd.DataFrame({\n    'vendedor': ['Ana', 'Carlos', 'Ana', 'Carlos', 'Ana', 'Carlos'],\n    'producto': ['A', 'A', 'B', 'B', 'A', 'C'],\n    'cantidad': [10, 15, 8, 12, 5, 20],\n    'precio': [100, 100, 150, 150, 100, 200],\n    'region': ['Norte', 'Sur', 'Norte', 'Sur', 'Norte', 'Sur']\n})\n\nprint(\"DataFrame de ventas:\")\nprint(ventas)\n\n# Agrupaci\u00f3n b\u00e1sica por vendedor\ngrupo_vendedor = ventas.groupby('vendedor')\nprint(\"\\nVentas totales por vendedor:\")\nprint(grupo_vendedor['cantidad'].sum())\n</code></pre>"},{"location":"content/p11/#22-funciones-de-agregacion","title":"2.2 Funciones de Agregaci\u00f3n","text":"<pre><code># M\u00faltiples funciones de agregaci\u00f3n\nprint(\"Estad\u00edsticas por vendedor:\")\nprint(grupo_vendedor['cantidad'].agg(['sum', 'mean', 'count', 'std']))\n\n# Agregaci\u00f3n personalizada\ndef rango(serie):\n    return serie.max() - serie.min()\n\nprint(\"\\nRango de cantidades por vendedor:\")\nprint(grupo_vendedor['cantidad'].agg(rango))\n\n# M\u00faltiples columnas con diferentes agregaciones\nagregaciones = {\n    'cantidad': ['sum', 'mean'],\n    'precio': ['mean', 'max']\n}\n\nresultado_multi = grupo_vendedor.agg(agregaciones)\nprint(\"\\nAgregaciones m\u00faltiples:\")\nprint(resultado_multi)\n</code></pre>"},{"location":"content/p11/#23-agrupacion-por-multiples-columnas","title":"2.3 Agrupaci\u00f3n por M\u00faltiples Columnas","text":"<pre><code># Agrupaci\u00f3n por vendedor y regi\u00f3n\ngrupo_multiple = ventas.groupby(['vendedor', 'region'])\nprint(\"Ventas por vendedor y regi\u00f3n:\")\nprint(grupo_multiple['cantidad'].sum())\n\n# Desagrupar el \u00edndice\nresultado_reset = grupo_multiple['cantidad'].sum().reset_index()\nprint(\"\\nResultado con \u00edndice simple:\")\nprint(resultado_reset)\n</code></pre>"},{"location":"content/p11/#24-transformaciones-y-filtros","title":"2.4 Transformaciones y Filtros","text":"<pre><code># Transform: mantiene el tama\u00f1o original del DataFrame\nventas['cantidad_promedio_vendedor'] = grupo_vendedor['cantidad'].transform('mean')\nprint(\"DataFrame con promedio por vendedor:\")\nprint(ventas)\n\n# Filter: filtra grupos completos\ngrupos_activos = grupo_vendedor.filter(lambda x: x['cantidad'].sum() &gt; 20)\nprint(\"\\nVendedores con ventas totales &gt; 20:\")\nprint(grupos_activos)\n\n# Apply: aplica funci\u00f3n a cada grupo\ndef calcular_total(grupo):\n    return (grupo['cantidad'] * grupo['precio']).sum()\n\ntotal_por_vendedor = grupo_vendedor.apply(calcular_total)\nprint(\"\\nTotal de ventas por vendedor:\")\nprint(total_por_vendedor)\n</code></pre>"},{"location":"content/p11/#operaciones-de-fusion","title":"\ud83d\udd04 Operaciones de Fusi\u00f3n","text":""},{"location":"content/p11/#31-preparacion-de-datos-para-fusion","title":"3.1 Preparaci\u00f3n de Datos para Fusi\u00f3n","text":"<pre><code># DataFrames de ejemplo\nempleados = pd.DataFrame({\n    'id_empleado': [1, 2, 3, 4],\n    'nombre': ['Ana', 'Carlos', 'Mar\u00eda', 'Luis'],\n    'departamento_id': [10, 20, 10, 30]\n})\n\ndepartamentos = pd.DataFrame({\n    'id_departamento': [10, 20, 30, 40],\n    'nombre_dept': ['Ventas', 'Marketing', 'IT', 'RRHH'],\n    'presupuesto': [100000, 80000, 120000, 60000]\n})\n\nprint(\"Empleados:\")\nprint(empleados)\nprint(\"\\nDepartamentos:\")\nprint(departamentos)\n</code></pre>"},{"location":"content/p11/#32-tipos-de-merge","title":"3.2 Tipos de <code>merge()</code>","text":"<pre><code># Inner join (intersecci\u00f3n)\ninner_merge = pd.merge(\n    empleados, \n    departamentos, \n    left_on='departamento_id', \n    right_on='id_departamento',\n    how='inner'\n)\nprint(\"Inner merge:\")\nprint(inner_merge)\n\n# Left join (todos los empleados)\nleft_merge = pd.merge(\n    empleados, \n    departamentos, \n    left_on='departamento_id', \n    right_on='id_departamento',\n    how='left'\n)\nprint(\"\\nLeft merge:\")\nprint(left_merge)\n\n# Right join (todos los departamentos)\nright_merge = pd.merge(\n    empleados, \n    departamentos, \n    left_on='departamento_id', \n    right_on='id_departamento',\n    how='right'\n)\nprint(\"\\nRight merge:\")\nprint(right_merge)\n\n# Outer join (todos los registros)\nouter_merge = pd.merge(\n    empleados, \n    departamentos, \n    left_on='departamento_id', \n    right_on='id_departamento',\n    how='outer'\n)\nprint(\"\\nOuter merge:\")\nprint(outer_merge)\n</code></pre>"},{"location":"content/p11/#33-fusion-con-indices","title":"3.3 Fusi\u00f3n con \u00cdndices","text":"<pre><code># Preparar DataFrames con \u00edndices\nempleados_idx = empleados.set_index('id_empleado')\nsalarios = pd.DataFrame({\n    'salario': [50000, 60000, 55000, 65000],\n    'bonus': [5000, 8000, 5500, 7000]\n}, index=[1, 2, 3, 4])\n\n# Merge usando \u00edndices\nmerge_index = pd.merge(\n    empleados_idx, \n    salarios, \n    left_index=True, \n    right_index=True\n)\nprint(\"Merge usando \u00edndices:\")\nprint(merge_index)\n</code></pre>"},{"location":"content/p11/#34-usando-join","title":"3.4 Usando <code>join()</code>","text":"<pre><code># join() es m\u00e1s directo para fusionar por \u00edndices\nresultado_join = empleados_idx.join(salarios)\nprint(\"Resultado con join():\")\nprint(resultado_join)\n\n# join() con sufijos para columnas duplicadas\nempleados_v2 = pd.DataFrame({\n    'nombre': ['Ana Garc\u00eda', 'Carlos L\u00f3pez', 'Mar\u00eda Rodr\u00edguez', 'Luis Mart\u00edn'],\n    'edad': [28, 35, 31, 29]\n}, index=[1, 2, 3, 4])\n\nresultado_sufijos = empleados_idx.join(empleados_v2, rsuffix='_v2')\nprint(\"\\nJoin con sufijos:\")\nprint(resultado_sufijos)\n</code></pre>"},{"location":"content/p11/#ejemplos-practicos","title":"\ud83d\udca1 Ejemplos Pr\u00e1cticos","text":""},{"location":"content/p11/#ejemplo-1-analisis-de-ventas-por-region","title":"Ejemplo 1: An\u00e1lisis de Ventas por Regi\u00f3n","text":"<pre><code># Datos de ventas m\u00e1s completos\nnp.random.seed(42)\nventas_completas = pd.DataFrame({\n    'fecha': pd.date_range('2024-01-01', periods=100, freq='D'),\n    'vendedor': np.random.choice(['Ana', 'Carlos', 'Mar\u00eda', 'Luis'], 100),\n    'producto': np.random.choice(['Laptop', 'Mouse', 'Teclado', 'Monitor'], 100),\n    'cantidad': np.random.randint(1, 10, 100),\n    'precio_unitario': np.random.choice([100, 25, 50, 300], 100),\n    'region': np.random.choice(['Norte', 'Sur', 'Este', 'Oeste'], 100)\n})\n\n# Calcular total de ventas\nventas_completas['total'] = ventas_completas['cantidad'] * ventas_completas['precio_unitario']\n\n# An\u00e1lisis por regi\u00f3n y mes\nventas_completas['mes'] = ventas_completas['fecha'].dt.month\nanalisis_regional = ventas_completas.groupby(['region', 'mes']).agg({\n    'total': 'sum',\n    'cantidad': 'sum',\n    'vendedor': 'nunique'\n}).round(2)\n\nprint(\"An\u00e1lisis de ventas por regi\u00f3n y mes:\")\nprint(analisis_regional.head(10))\n</code></pre>"},{"location":"content/p11/#ejemplo-2-combinando-datos-de-multiples-fuentes","title":"Ejemplo 2: Combinando Datos de M\u00faltiples Fuentes","text":"<pre><code># Informaci\u00f3n de productos\nproductos = pd.DataFrame({\n    'producto': ['Laptop', 'Mouse', 'Teclado', 'Monitor'],\n    'categoria': ['Computadoras', 'Accesorios', 'Accesorios', 'Computadoras'],\n    'costo': [800, 15, 30, 200]\n})\n\n# Fusionar con datos de ventas\nventas_con_productos = pd.merge(\n    ventas_completas, \n    productos, \n    on='producto'\n)\n\n# Calcular margen de ganancia\nventas_con_productos['margen'] = ventas_con_productos['precio_unitario'] - ventas_con_productos['costo']\nventas_con_productos['margen_porcentaje'] = (ventas_con_productos['margen'] / ventas_con_productos['precio_unitario'] * 100).round(2)\n\n# An\u00e1lisis de rentabilidad por categor\u00eda\nrentabilidad = ventas_con_productos.groupby('categoria').agg({\n    'margen': 'sum',\n    'total': 'sum',\n    'cantidad': 'sum'\n}).round(2)\n\nrentabilidad['margen_promedio'] = (rentabilidad['margen'] / rentabilidad['total'] * 100).round(2)\n\nprint(\"An\u00e1lisis de rentabilidad por categor\u00eda:\")\nprint(rentabilidad)\n</code></pre>"},{"location":"content/p12/","title":"Semana 12 - Evaluaci\u00f3n de Conocimiento","text":"<p>La evaluaci\u00f3n de conocimiento se realizar\u00e1 a trav\u00e9s de la plataforma: <pre><code>https://seia-stalone.vercel.app/\n</code></pre></p>"},{"location":"content/p12/#codigo-gkfaeydm","title":"C\u00f3digo: GKFAEYDM","text":""},{"location":"content/p13/","title":"Semana 13 - Graficos","text":""},{"location":"content/p13/#graficos-en-streamlit","title":"Graficos en  Streamlit","text":"<p>Streamlit es una biblioteca de Python que permite crear aplicaciones web interactivas con c\u00f3digo Python. Una de las caracter\u00edsticas m\u00e1s importantes de Streamlit es su capacidad para crear gr\u00e1ficos interactivos.</p> <p>https://docs.streamlit.io/library/api-reference/charts</p>"},{"location":"content/p13/#stline_chart","title":"st.line_chart","text":"<pre><code>import streamlit as st\nimport pandas as pd\n\n# Creamos un DataFrame de ejemplo con informaci\u00f3n de veh\u00edculos\nvehiculos_data = {\n    'Modelo': ['Ford', 'Toyota', 'Honda', 'Chevrolet', 'Nissan', 'Kia'],\n    'Ventas 2020': [100000, 90000, 80000, 70000, 60000, 50000],\n    'Ventas 2021': [120000, 95000, 85000, 75000, 65000, 55000]\n}\nvehiculos_df = pd.DataFrame(vehiculos_data)\n\n# Establecemos la columna 'Modelo' como \u00edndice del DataFrame\nvehiculos_df.set_index('Modelo', inplace=True)\n\n# Creamos un gr\u00e1fico de l\u00ednea con las ventas de los veh\u00edculos por a\u00f1o\nst.line_chart(vehiculos_df[['Ventas 2020', 'Ventas 2021']])\n</code></pre>"},{"location":"content/p13/#starea_chart","title":"st.area_chart","text":"<pre><code>import streamlit as st\nimport pandas as pd\nimport numpy as np\n\n# Crear el DataFrame con los ingresos de tres tiendas en cuatro trimestres\ndata = {\n    'Tienda': ['Tienda 1', 'Tienda 1', 'Tienda 1', 'Tienda 1', 'Tienda 2', 'Tienda 2', 'Tienda 2', 'Tienda 2', 'Tienda 3', 'Tienda 3', 'Tienda 3', 'Tienda 3'],\n    'Trimestre': ['Q1', 'Q2', 'Q3', 'Q4', 'Q1', 'Q2', 'Q3', 'Q4', 'Q1', 'Q2', 'Q3', 'Q4'],\n    'Ingresos': [100, 120, 110, 130, 80, 190, 100, 110, 270, 80, 85, 90]\n}\n\ndf = pd.DataFrame(data)\n\n# Mostrar el DataFrame\nst.write(df)\n\n# Graficar el DataFrame con un gr\u00e1fico de \u00e1rea\ndf_pivot = df.pivot(index='Tienda', columns='Trimestre', values='Ingresos')\nst.area_chart(df_pivot)\n</code></pre>"},{"location":"content/p13/#stbar_chart","title":"st.bar_chart","text":"<pre><code>import streamlit as st\nimport pandas as pd\n\n# Crear el DataFrame con la cantidad de animales por tipo\ndata = {\n    'Tipo': ['Perro', 'Gato', 'P\u00e1jaro', 'Conejo', 'Hamster'],\n    'Cantidad': [50, 30, 20, 10, 5]\n}\n\ndf = pd.DataFrame(data)\n\n# Mostrar el DataFrame\nst.write(df)\n\n# Graficar el DataFrame con un gr\u00e1fico de barras\nst.bar_chart(df.set_index('Tipo'))\n</code></pre>"},{"location":"content/p13/#stpyplot","title":"st.pyplot","text":"<pre><code>import streamlit as st \nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Datos de insectos\nmosca = 100\nhormiga = 50 \nmariposa = 20\nescarabajo = 30\n\n# Categor\u00edas de insectos\ninsectos = ['Moscas', 'Hormigas', 'Mariposas', 'Escarabajos']\n\n# Frecuencia de insectos\nfrecuencias = [mosca, hormiga, mariposa, escarabajo]\n\n# Crear el gr\u00e1fico \nfig = plt.figure(figsize=(8,4))\nax = fig.add_subplot(111)  \nax.bar(insectos, frecuencias)\n\n# Mostrar el gr\u00e1fico  \nst.pyplot(fig)\n</code></pre>"},{"location":"content/p13/#staltair_chart","title":"st.altair_chart","text":"<pre><code>import streamlit as st\nimport altair as alt\nimport pandas as pd\n\n# Sport popularity data\nsports = ['Football', 'Basketball', 'Baseball', 'Tennis']\npopularity = [300, 150, 100, 50]\n\n# Create DataFrame\ndata = pd.DataFrame({\n    'sport': sports,\n    'popularity': popularity\n})\n\n# Create chart\nc = alt.Chart(data).mark_circle().encode(\n    x='sport',\n    y='popularity',\n    size='popularity'\n)\n\nst.altair_chart(c, use_container_width=True)\n</code></pre>"},{"location":"content/p13/#stvega_lite_chart","title":"st.vega_lite_chart","text":"<pre><code>import streamlit as st\nimport pandas as pd\n\ndatos_peces = pd.DataFrame({\n    'Especie': ['Trucha', 'Salm\u00f3n', 'Bacalao', 'At\u00fan', 'Sardina'],\n    'Longitud (cm)': [30, 45, 60, 75, 20],\n    'Peso (kg)': [2.5, 3.2, 4.8, 6.1, 0.5]\n})\n\nst.vega_lite_chart(datos_peces, {\n    'mark': {'type': 'circle', 'tooltip': True},\n    'encoding': {\n        'x': {'field': 'Longitud (cm)', 'type': 'quantitative'},\n        'y': {'field': 'Peso (kg)', 'type': 'quantitative'},\n        'size': {'field': 'Longitud (cm)', 'type': 'quantitative'},\n        'color': {'field': 'Especie', 'type': 'nominal'},\n    },\n})\n</code></pre>"},{"location":"content/p13/#librerias-graficos-en-streamlit","title":"Librerias graficos en Streamlit","text":""},{"location":"content/p13/#matplotlib","title":"Matplotlib","text":"<ul> <li>https://matplotlib.org/</li> <li>https://docs.streamlit.io/library/api-reference/charts/st.pyplot</li> </ul>"},{"location":"content/p13/#vega-altair","title":"Vega-Altair","text":"<ul> <li>https://altair-viz.github.io/index.html</li> <li>https://docs.streamlit.io/library/api-reference/charts/st.altair_chart</li> </ul>"},{"location":"content/p13/#vega-lite","title":"Vega-Lite","text":"<ul> <li>https://vega.github.io/</li> <li>https://docs.streamlit.io/library/api-reference/charts/st.vega_lite_chart</li> </ul>"},{"location":"content/p13/#plotly","title":"Plotly","text":"<ul> <li>https://plotly.com/python/</li> <li>https://docs.streamlit.io/library/api-reference/charts/st.plotly_chart</li> </ul>"},{"location":"content/p13/#bokeh","title":"Bokeh","text":"<ul> <li>https://docs.bokeh.org/en/latest/</li> <li>https://docs.streamlit.io/library/api-reference/charts/st.bokeh_chart</li> </ul>"},{"location":"content/p13/#graficos-seaborn","title":"Gr\u00e1ficos Seaborn","text":"<p>Seaborn es una biblioteca de visualizaci\u00f3n de datos de Python basada en Matplotlib, pero dise\u00f1ada para crear gr\u00e1ficos estad\u00edsticos atractivos y informativos de forma m\u00e1s f\u00e1cil y r\u00e1pida. </p> <p>En otras palabras, Seaborn te permite:</p> <ul> <li>Crear gr\u00e1ficos con dise\u00f1os m\u00e1s elegantes y atractivos: Seaborn ofrece una gama de paletas de colores armoniosas y estilos predeterminados que mejoran la est\u00e9tica de tus visualizaciones.</li> <li>Visualizar relaciones entre variables: Seaborn facilita la creaci\u00f3n de gr\u00e1ficos que muestran la relaci\u00f3n entre dos o m\u00e1s variables, como diagramas de dispersi\u00f3n, gr\u00e1ficos de viol\u00edn y gr\u00e1ficos de caja.</li> <li>Explorar y analizar datos de forma gr\u00e1fica: Seaborn ofrece herramientas para visualizar la distribuci\u00f3n de datos, identificar valores at\u00edpicos y explorar patrones en conjuntos de datos complejos.</li> <li>Crear gr\u00e1ficos personalizados: Aunque Seaborn ofrece muchos estilos y configuraciones predefinidas, tambi\u00e9n permite personalizar los gr\u00e1ficos para que se adapten a tus necesidades espec\u00edficas.</li> </ul> <p>Seaborn es una herramienta poderosa para la visualizaci\u00f3n de datos estad\u00edsticos que te ayuda a:</p> <ul> <li>Entender mejor tus datos.</li> <li>Comunicar tus hallazgos de manera efectiva.</li> <li>Crear gr\u00e1ficos visualmente atractivos y profesionales.</li> </ul> <p>\u00bfPor qu\u00e9 elegir Seaborn?</p> <ul> <li>Facilidad de uso: Seaborn est\u00e1 dise\u00f1ado para ser f\u00e1cil de usar, incluso para usuarios que no son expertos en Python.</li> <li>Calidad de los gr\u00e1ficos: Seaborn produce gr\u00e1ficos de alta calidad que son atractivos y f\u00e1ciles de entender.</li> <li>Personalizaci\u00f3n: Seaborn ofrece opciones de personalizaci\u00f3n para adaptar los gr\u00e1ficos a tus necesidades espec\u00edficas.</li> </ul> <p>Algunos ejemplos de tipos de gr\u00e1ficos que puedes crear con Seaborn:</p> <ul> <li>Diagramas de dispersi\u00f3n: para mostrar la relaci\u00f3n entre dos variables num\u00e9ricas.</li> <li>Gr\u00e1ficos de viol\u00edn: para mostrar la distribuci\u00f3n de una variable num\u00e9rica para diferentes grupos.</li> <li>Gr\u00e1ficos de caja: para mostrar la distribuci\u00f3n de una variable num\u00e9rica para diferentes grupos.</li> <li>Mapas de calor: para visualizar la relaci\u00f3n entre dos variables categ\u00f3ricas.</li> <li>Diagramas de pares: para visualizar la relaci\u00f3n entre todas las parejas de variables en un conjunto de datos.</li> <li>Y muchos m\u00e1s...</li> </ul> <p>Si necesitas m\u00e1s informaci\u00f3n, puedes consultar la documentaci\u00f3n oficial de Seaborn: https://seaborn.pydata.org/</p>"},{"location":"content/p13/#configuracion-inicial","title":"Configuraci\u00f3n Inicial","text":"<p>Primero, necesitamos instalar las bibliotecas necesarias:</p> <pre><code>pip install streamlit seaborn pandas matplotlib\n</code></pre> <p>Importaciones b\u00e1sicas para todos los ejemplos:</p> <pre><code>import streamlit as st\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\n</code></pre>"},{"location":"content/p13/#scatter-plot","title":"Scatter Plot","text":"<p>El scatter plot es \u00fatil para visualizar relaciones entre dos variables continuas.</p> <pre><code>import streamlit as st\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Cargar datos de ejemplo\ndf_tips = sns.load_dataset(\"tips\")\n\n# Crear la p\u00e1gina\nst.title(\"Scatter Plot con Seaborn\")\nst.write(\"Visualizaci\u00f3n de la relaci\u00f3n entre cuenta total y propina\")\n\n# Crear el gr\u00e1fico\nfig, ax = plt.subplots(figsize=(10, 6))\nsns.scatterplot(\n    data=df_tips, \n    x=\"total_bill\", \n    y=\"tip\", \n    hue=\"time\",  # Color seg\u00fan tiempo de comida\n    size=\"size\"  # Tama\u00f1o seg\u00fan n\u00famero de personas\n)\nplt.title(\"Relaci\u00f3n entre Cuenta Total y Propina\")\n\n# Mostrar el gr\u00e1fico\nst.pyplot(fig)\n</code></pre>"},{"location":"content/p13/#caracteristicas-principales","title":"Caracter\u00edsticas principales:","text":"<ul> <li><code>hue</code>: Agrega una tercera dimensi\u00f3n mediante colores</li> <li><code>size</code>: Representa una cuarta dimensi\u00f3n mediante el tama\u00f1o de los puntos</li> <li>\u00datil para detectar patrones y correlaciones</li> </ul>"},{"location":"content/p13/#box-plot","title":"Box Plot","text":"<p>El box plot muestra la distribuci\u00f3n de datos num\u00e9ricos a trav\u00e9s de cuartiles.</p> <pre><code>import streamlit as st\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Cargar datos\ndf_tips = sns.load_dataset(\"tips\")\n\nst.title(\"Box Plot con Seaborn\")\nst.write(\"Distribuci\u00f3n de propinas por d\u00eda\")\n\n# Crear el gr\u00e1fico\nfig, ax = plt.subplots(figsize=(10, 6))\nsns.boxplot(\n    data=df_tips,\n    x=\"day\",\n    y=\"tip\",\n    hue=\"time\"  # Separar por tiempo de comida\n)\nplt.title(\"Distribuci\u00f3n de Propinas por D\u00eda\")\n\nst.pyplot(fig)\n</code></pre>"},{"location":"content/p13/#elementos-del-box-plot","title":"Elementos del Box Plot:","text":"<ul> <li>L\u00ednea central: mediana</li> <li>Caja: rango intercuartil (IQR)</li> <li>Bigotes: 1.5 * IQR</li> <li>Puntos: valores at\u00edpicos</li> </ul>"},{"location":"content/p13/#violin-plot","title":"Violin Plot","text":"<p>El violin plot combina un box plot con un plot de densidad de kernel.</p> <pre><code>import streamlit as st\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Cargar datos\ndf_iris = sns.load_dataset(\"iris\")\n\nst.title(\"Violin Plot con Seaborn\")\nst.write(\"Distribuci\u00f3n de medidas de p\u00e9talos por especie\")\n\n# Crear el gr\u00e1fico\nfig, ax = plt.subplots(figsize=(10, 6))\nsns.violinplot(\n    data=df_iris,\n    x=\"species\",\n    y=\"petal_length\",\n    inner=\"box\"  # Mostrar box plot dentro del violin\n)\nplt.title(\"Distribuci\u00f3n de Longitud de P\u00e9talos por Especie\")\n\nst.pyplot(fig)\n</code></pre>"},{"location":"content/p13/#ventajas","title":"Ventajas:","text":"<ul> <li>Muestra la distribuci\u00f3n completa de los datos</li> <li>Permite ver la densidad en diferentes valores</li> <li>\u00datil para comparar distribuciones entre grupos</li> </ul>"},{"location":"content/p13/#heat-map","title":"Heat Map","text":"<p>El heatmap es excelente para visualizar matrices de correlaci\u00f3n y datos tabulares.</p> <pre><code>import streamlit as st\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Cargar datos\ndf_iris = sns.load_dataset(\"iris\")\n\nst.title(\"Heat Map con Seaborn\")\nst.write(\"Matriz de correlaci\u00f3n del dataset iris\")\n\n# Seleccionar solo columnas num\u00e9ricas\nnumeric_columns = df_iris.select_dtypes(include=['float64', 'int64']).columns\n\n# Crear el gr\u00e1fico\nfig, ax = plt.subplots(figsize=(10, 8))\nsns.heatmap(\n    df_iris[numeric_columns].corr(),  # Solo usar columnas num\u00e9ricas\n    annot=True,     # Mostrar valores\n    cmap='coolwarm', # Esquema de colores\n    center=0        # Centrar el colormap en 0\n)\nplt.title(\"Matriz de Correlaci\u00f3n - Dataset Iris\")\n\nst.pyplot(fig)\n</code></pre>"},{"location":"content/p13/#opciones-utiles","title":"Opciones \u00fatiles:","text":"<ul> <li><code>annot</code>: Muestra valores num\u00e9ricos</li> <li><code>cmap</code>: Define el esquema de colores</li> <li><code>center</code>: Define el punto central del colormap</li> </ul>"},{"location":"content/p13/#pair-plot","title":"Pair Plot","text":"<p>El pair plot crea una matriz de gr\u00e1ficos que muestra relaciones entre m\u00faltiples variables.</p> <pre><code>import streamlit as st\nimport seaborn as sns\n\n# Cargar datos\ndf_iris = sns.load_dataset(\"iris\")\n\nst.title(\"Pair Plot con Seaborn\")\nst.write(\"Visualizaci\u00f3n de m\u00faltiples variables\")\n\n# Crear el gr\u00e1fico\nfig = sns.pairplot(\n    df_iris,\n    hue=\"species\",    # Color por especie\n    diag_kind=\"kde\"   # Tipo de gr\u00e1fico en la diagonal\n)\n\nst.pyplot(fig)\n</code></pre>"},{"location":"content/p13/#caracteristicas","title":"Caracter\u00edsticas:","text":"<ul> <li>Muestra scatter plots para cada par de variables</li> <li>Histogramas o KDE en la diagonal</li> <li>\u00datil para exploraci\u00f3n inicial de datos</li> </ul> <p>Te proporciono la estructura similar pero para un histograma:</p>"},{"location":"content/p13/#histogram-plot","title":"Histogram Plot","text":"<p>El histograma es \u00fatil para visualizar la distribuci\u00f3n de una variable continua y detectar su forma, dispersi\u00f3n y valores at\u00edpicos.</p> <pre><code>import streamlit as st\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Cargar datos de ejemplo\ndf_tips = sns.load_dataset(\"tips\")\n\n# Crear la p\u00e1gina\nst.title(\"Histogram Plot con Seaborn\")\nst.write(\"Visualizaci\u00f3n de la distribuci\u00f3n de propinas\")\n\n# Crear el gr\u00e1fico\nfig, ax = plt.subplots(figsize=(10, 6))\nsns.histplot(\n    data=df_tips,\n    x=\"tip\",\n    hue=\"time\",     # Color seg\u00fan tiempo de comida\n    multiple=\"stack\",# Apilar los histogramas\n    bins=20,        # N\u00famero de barras\n    kde=True        # Agregar l\u00ednea de densidad\n)\nplt.title(\"Distribuci\u00f3n de Propinas por Tiempo de Comida\")\n\n# Mostrar el gr\u00e1fico\nst.pyplot(fig)\n</code></pre>"},{"location":"content/p13/#caracteristicas-principales_1","title":"Caracter\u00edsticas principales:","text":"<ul> <li><code>bins</code>: Define el n\u00famero de barras en el histograma</li> <li><code>kde</code>: Agrega una curva de estimaci\u00f3n de densidad</li> <li><code>multiple</code>: Controla c\u00f3mo se muestran m\u00faltiples histogramas (\"layer\", \"stack\", \"dodge\")</li> <li><code>stat</code>: Puede ser \"count\", \"frequency\", \"density\", \"probability\"</li> </ul>"},{"location":"content/p13/#consejos-adicionales-para-streamlit","title":"Consejos Adicionales para Streamlit","text":"<ol> <li> <p>Configuraci\u00f3n de la p\u00e1gina: <pre><code>st.set_page_config(\n    page_title=\"Mi App de Visualizaci\u00f3n\",\n    layout=\"wide\",\n    initial_sidebar_state=\"expanded\"\n)\n</code></pre></p> </li> <li> <p>Personalizaci\u00f3n de gr\u00e1ficos: <pre><code># Establecer el estilo de Seaborn\nsns.set_style(\"whitegrid\")\nsns.set_palette(\"husl\")\n</code></pre></p> </li> <li> <p>Interactividad: <pre><code># Selector en sidebar\nvariable_x = st.sidebar.selectbox(\"Variable X\", df.columns)\nvariable_y = st.sidebar.selectbox(\"Variable Y\", df.columns)\n</code></pre></p> </li> <li> <p>Cach\u00e9 para mejor rendimiento: <pre><code>@st.cache_data\ndef load_data():\n    return sns.load_dataset(\"tips\")\n</code></pre></p> </li> </ol>"},{"location":"content/p13/#interpretando-y-entendiendo-los-tipos-de-graficos","title":"Interpretando y Entendiendo los Tipos de Gr\u00e1ficos","text":"<p>Los gr\u00e1ficos son herramientas visuales esenciales para comprender y comunicar informaci\u00f3n a partir de datos.  A continuaci\u00f3n, se presenta una gu\u00eda para interpretar y entender algunos de los tipos de gr\u00e1ficos m\u00e1s comunes:</p>"},{"location":"content/p13/#graficos-de-dispersion-scatter-plots","title":"Gr\u00e1ficos de Dispersi\u00f3n (Scatter Plots):","text":"<ul> <li>Prop\u00f3sito: Mostrar la relaci\u00f3n entre dos variables num\u00e9ricas.</li> <li>Interpretaci\u00f3n: Cada punto en el gr\u00e1fico representa una observaci\u00f3n. La posici\u00f3n del punto en el eje horizontal (X) representa el valor de la primera variable, y la posici\u00f3n en el eje vertical (Y) representa el valor de la segunda variable.<ul> <li>Patrones: Observar si los puntos forman un patr\u00f3n lineal, curvo o aleatorio.  Un patr\u00f3n lineal sugiere una correlaci\u00f3n entre las variables.</li> <li>Concentraci\u00f3n:  Verificar si los puntos est\u00e1n agrupados o dispersos. La concentraci\u00f3n puede indicar la fuerza de la relaci\u00f3n entre las variables.</li> <li>Valores At\u00edpicos: Identificar puntos que se alejan del patr\u00f3n general.  Estos puntos pueden ser errores de datos o indicar observaciones inusuales.</li> </ul> </li> </ul>"},{"location":"content/p13/#graficos-de-caja-box-plots","title":"Gr\u00e1ficos de Caja (Box Plots):","text":"<ul> <li>Prop\u00f3sito: Mostrar la distribuci\u00f3n de una variable num\u00e9rica para diferentes grupos.</li> <li>Interpretaci\u00f3n:<ul> <li>Caja: La caja representa el rango intercuartil (IQR), que contiene el 50% central de los datos.</li> <li>L\u00ednea Central: La l\u00ednea dentro de la caja representa la mediana, el valor que divide los datos a la mitad.</li> <li>Bigotes: Las l\u00edneas que se extienden desde la caja (bigotes) representan el rango de los datos, excluyendo los valores at\u00edpicos.</li> <li>Puntos Individuales: Los puntos fuera de los bigotes representan valores at\u00edpicos, que son observaciones significativamente diferentes del resto de los datos.</li> </ul> </li> </ul>"},{"location":"content/p13/#graficos-de-violin-violin-plots","title":"Gr\u00e1ficos de Viol\u00edn (Violin Plots):","text":"<ul> <li>Prop\u00f3sito: Mostrar la distribuci\u00f3n de una variable num\u00e9rica para diferentes grupos, combinando un gr\u00e1fico de caja con un gr\u00e1fico de densidad.</li> <li>Interpretaci\u00f3n:<ul> <li>Forma del Viol\u00edn: La forma del viol\u00edn muestra la densidad de los datos. Una forma m\u00e1s ancha indica una mayor concentraci\u00f3n de datos en ese rango de valores.</li> <li>Caja y Bigotes:  Similar al gr\u00e1fico de caja, la caja y los bigotes muestran la mediana, el rango intercuartil y los valores at\u00edpicos.</li> </ul> </li> </ul> <p>Mapas de Calor (Heat Maps):</p> <ul> <li>Prop\u00f3sito: Visualizar la relaci\u00f3n entre dos variables categ\u00f3ricas o mostrar la intensidad de un valor en una matriz.</li> <li>Interpretaci\u00f3n:<ul> <li>Celdas: Cada celda en el mapa de calor representa la intersecci\u00f3n de dos categor\u00edas.</li> <li>Color: El color de la celda indica la intensidad o valor asociado a esa combinaci\u00f3n de categor\u00edas.</li> <li>Escala de Color: La escala de color proporciona una referencia para interpretar los colores y la intensidad de los valores.</li> </ul> </li> </ul>"},{"location":"content/p13/#diagramas-de-pares-pair-plots","title":"Diagramas de Pares (Pair Plots):","text":"<ul> <li>Prop\u00f3sito: Mostrar las relaciones entre todas las parejas de variables en un conjunto de datos.</li> <li>Interpretaci\u00f3n:<ul> <li>Matriz de Gr\u00e1ficos: El diagrama de pares crea una matriz de gr\u00e1ficos, donde cada gr\u00e1fico muestra la relaci\u00f3n entre dos variables.</li> <li>Gr\u00e1ficos de Dispersi\u00f3n: Los gr\u00e1ficos fuera de la diagonal son gr\u00e1ficos de dispersi\u00f3n que muestran la relaci\u00f3n entre dos variables num\u00e9ricas.</li> <li>Histogramas o KDE: Los gr\u00e1ficos en la diagonal suelen ser histogramas o gr\u00e1ficos de densidad de kernel (KDE), que muestran la distribuci\u00f3n de una sola variable.</li> </ul> </li> </ul> <p>Te proporciono la estructura similar para el histograma:</p>"},{"location":"content/p13/#graficos-de-histograma","title":"Gr\u00e1ficos de Histograma:","text":"<ul> <li>Prop\u00f3sito: Mostrar la distribuci\u00f3n y frecuencia de una variable num\u00e9rica.</li> <li>Interpretaci\u00f3n: Cada barra representa un rango de valores (bin) y su altura indica la frecuencia o cantidad de observaciones en ese rango.<ul> <li>Forma: Observar si la distribuci\u00f3n es sim\u00e9trica, sesgada a la derecha/izquierda, unimodal, bimodal o multimodal.</li> <li>Dispersi\u00f3n: Verificar qu\u00e9 tan extendidos est\u00e1n los datos y si hay concentraciones en ciertos rangos.</li> <li>Valores At\u00edpicos: Identificar barras aisladas en los extremos que pueden indicar valores inusuales o errores en los datos.</li> </ul> </li> </ul>"},{"location":"content/p13/#ejemplo-streamlit-con-graficos-seaborn","title":"Ejemplo Streamlit con graficos Seaborn","text":"<p> <pre><code>Regi\u00f3n,Departamento,Municipio,Poblaci\u00f3n,Hogares con acceso a internet,Penetraci\u00f3n de internet (%),Uso de internet,Dispositivos m\u00f3viles,Uso de tel\u00e9fonos inteligentes (%),Acceso a computadores (%),Uso de redes sociales (%),Compras online (%),Nivel educativo,Edad promedio,Ingresos promedio\nAmazon\u00eda,Amazonas,Leticia,43000,10000,23,1.5,1.2,70,5,80,15,8,30,1000000\nAmazon\u00eda,Caquet\u00e1,Florencia,150000,30000,20,1,1,65,5,75,10,9,31,1200000\nAmazon\u00eda,Putumayo,Mocoa,50000,10000,20,1,1,60,5,70,10,8,29,1000000\nAmazon\u00eda,Vaup\u00e9s,Mit\u00fa,30000,5000,17,1,1,50,2,55,5,6,28,800000\nAndina,Antioquia,Medell\u00edn,2500000,1200000,48,2.5,1.8,85,15,90,30,11,34,2000000\nAndina,Boyac\u00e1,Tunja,150000,50000,33,1.5,1.2,70,8,85,20,10,32,1300000\nAndina,Caldas,Manizales,400000,150000,38,2,1.5,75,12,88,25,10,33,1500000\nAndina,Cundinamarca,Bogot\u00e1,8000000,5000000,63,3,2.2,90,20,95,40,12,36,2500000\nCaribe,Atl\u00e1ntico,Barranquilla,1200000,600000,50,2,1.6,80,12,88,25,10,32,1600000\nCaribe,Bol\u00edvar,Cartagena,900000,400000,44,1.8,1.4,75,10,85,20,9,31,1300000\nCaribe,Cesar,Valledupar,400000,100000,25,1.2,1,60,5,75,15,8,30,1000000\nCaribe,C\u00f3rdoba,Monter\u00eda,450000,150000,33,1.5,1.2,65,8,80,18,9,31,1100000\nInsular,San Andr\u00e9s,San Andr\u00e9s,70000,40000,57,3,2,90,20,95,50,12,33,1800000\nInsular,Providencia,Providencia,5000,3000,60,3,2,85,15,90,40,11,32,1600000\nOrinoqu\u00eda,Arauca,Arauca,70000,20000,29,1.2,1,60,5,70,10,8,29,900000\nOrinoqu\u00eda,Casanare,Yopal,120000,30000,25,1,1,60,5,70,10,8,30,900000\nOrinoqu\u00eda,Meta,Villavicencio,400000,100000,25,1.2,1,60,5,70,10,8,30,900000\nPac\u00edfica,Cauca,Popay\u00e1n,250000,80000,32,1,1,65,5,75,15,9,31,1100000\nPac\u00edfica,Choc\u00f3,Quibd\u00f3,150000,40000,27,1,1,55,3,65,10,7,29,800000\nPac\u00edfica,Nari\u00f1o,Pasto,400000,120000,30,1.5,1.2,60,5,70,15,9,31,1000000\nAmazon\u00eda,Amazonas,Puerto Nari\u00f1o,3000,500,17,1,1,45,2,50,5,6,27,700000\nAmazon\u00eda,Caquet\u00e1,San Vicente del Cagu\u00e1n,30000,5000,17,1,1,50,2,55,5,6,28,800000\nAmazon\u00eda,Putumayo,Puerto As\u00eds,35000,7000,20,1,1,55,3,60,10,7,28,900000\nAmazon\u00eda,Vaup\u00e9s,Caruru,2000,300,15,1,1,40,1,45,5,5,26,600000\nAndina,Antioquia,Envigado,200000,100000,50,2.5,1.8,80,12,88,25,10,33,1800000\nAndina,Boyac\u00e1,Chiquinquir\u00e1,50000,15000,30,1.2,1,65,5,75,15,9,31,1000000\nAndina,Caldas,Pereira,450000,180000,40,2,1.5,75,10,85,20,10,32,1600000\nAndina,Cundinamarca,Soacha,500000,250000,50,2,1.5,75,10,85,20,10,32,1500000\nCaribe,Atl\u00e1ntico,Sabanalarga,100000,40000,40,1.2,1,60,5,75,15,8,30,1000000\nCaribe,Bol\u00edvar,Magangu\u00e9,100000,30000,30,1,1,55,3,65,10,8,29,900000\nCaribe,Cesar,Aguachica,80000,20000,25,1,1,55,3,65,10,7,28,800000\nCaribe,C\u00f3rdoba,Sincelejo,250000,80000,32,1.2,1,60,5,70,15,8,30,900000\nInsular,San Andr\u00e9s,Providencia,4000,2500,63,3,2,85,15,90,40,11,32,1500000\nInsular,Providencia,Santa Catalina,1000,600,60,2.5,2,80,12,88,35,10,31,1400000\nOrinoqu\u00eda,Arauca,Tame,40000,10000,25,1,1,55,3,65,10,7,28,800000\nOrinoqu\u00eda,Casanare,Paz de Ariporo,25000,6000,24,1,1,55,3,65,10,7,28,700000\nOrinoqu\u00eda,Meta,Puerto L\u00f3pez,40000,8000,20,1,1,50,2,55,5,6,27,700000\nPac\u00edfica,Cauca,Santander de Quilichao,100000,30000,30,1,1,60,5,70,10,8,29,900000\nPac\u00edfica,Choc\u00f3,Istmina,20000,4000,20,1,1,50,2,55,5,6,27,700000\nPac\u00edfica,Nari\u00f1o,Ipiales,70000,20000,29,1.2,1,60,5,70,10,8,29,900000\nAmazon\u00eda,Amazonas,Tarapac\u00e1,2000,250,13,1,1,40,1,45,5,5,26,500000\nAmazon\u00eda,Caquet\u00e1,Curillo,5000,800,16,1,1,45,2,50,5,6,27,600000\nAmazon\u00eda,Putumayo,Valle del Guamuez,20000,3000,15,1,1,45,2,50,5,6,27,600000\nAmazon\u00eda,Vaup\u00e9s,Pacoa,1000,100,10,1,1,35,1,40,5,4,25,400000\nAndina,Antioquia,Rionegro,150000,40000,27,1.5,1.2,60,5,70,15,8,30,1000000\nAndina,Boyac\u00e1,Nobsa,5000,1000,20,1,1,50,2,55,5,6,27,700000\nAndina,Caldas,Marmato,10000,2000,20,1,1,50,2,55,5,6,27,700000\nAndina,Cundinamarca,La Calera,10000,4000,40,1.5,1.2,70,8,85,20,9,32,1200000\nCaribe,Atl\u00e1ntico,Luruaco,15000,3000,20,1,1,50,2,55,5,6,27,700000\nCaribe,Bol\u00edvar,San Pablo,15000,2000,13,1,1,45,2,50,5,5,26,600000\nCaribe,Cesar,El Copey,10000,1000,10,1,1,40,1,45,5,5,26,500000\nCaribe,C\u00f3rdoba,Puerto Escondido,15000,2000,13,1,1,45,2,50,5,5,26,600000\nInsular,San Andr\u00e9s,Serrana Bank,10,5,50,2,2,70,10,80,25,9,30,1200000\nInsular,Providencia,Quitasue\u00f1o Bank,10,5,50,2,2,70,10,80,25,9,30,1200000\nOrinoqu\u00eda,Arauca,Fortul,20000,3000,15,1,1,45,2,50,5,6,27,600000\nOrinoqu\u00eda,Casanare,Hato Corozal,20000,3000,15,1,1,45,2,50,5,6,27,600000\nOrinoqu\u00eda,Meta,Granada,40000,5000,13,1,1,40,1,45,5,5,26,500000\nPac\u00edfica,Cauca,Bolivar,10000,1500,15,1,1,45,2,50,5,6,27,600000\nPac\u00edfica,Choc\u00f3,Jurad\u00f3,2000,300,15,1,1,40,1,45,5,5,26,500000\nPac\u00edfica,Nari\u00f1o,Samaniego,15000,2000,13,1,1,45,2,50,5,5,26,600000\nAmazon\u00eda,Amazonas,Puerto Alegr\u00eda,500,50,10,1,1,35,1,40,5,4,25,400000\nAmazon\u00eda,Caquet\u00e1,Bel\u00e9n de los Andaquies,5000,500,10,1,1,40,1,45,5,5,26,500000\nAmazon\u00eda,Putumayo,Orito,10000,800,8,1,1,35,1,40,5,4,25,400000\nAmazon\u00eda,Vaup\u00e9s,Taraira,200,20,10,1,1,30,1,35,3,4,24,300000\nAndina,Antioquia,Girardota,100000,25000,25,1.2,1,60,5,70,15,8,30,900000\nAndina,Boyac\u00e1,Santa Sof\u00eda,5000,800,16,1,1,45,2,50,5,6,27,600000\nAndina,Caldas,Salamina,40000,10000,25,1.2,1,60,5,70,15,8,30,800000\nAndina,Cundinamarca,Cajic\u00e1,50000,20000,40,1.5,1.2,70,8,85,20,9,32,1200000\nCaribe,Atl\u00e1ntico,Usiacur\u00ed,20000,3000,15,1,1,45,2,50,5,6,27,600000\nCaribe,Bol\u00edvar,San Juan Nepomuceno,30000,4000,13,1,1,40,1,45,5,5,26,500000\nCaribe,Cesar,La Jagua de Ibirico,20000,2000,10,1,1,40,1,45,5,5,26,500000\nCaribe,C\u00f3rdoba,Montel\u00edbano,50000,10000,20,1,1,50,2,55,5,6,27,700000\nInsular,San Andr\u00e9s,Johnny Cay,50,5,100,2,2,70,10,80,25,9,30,1200000\nInsular,Providencia,Roncador Cay,10,5,50,2,2,70,10,80,25,9,30,1200000\nOrinoqu\u00eda,Arauca,Arauquita,30000,4000,13,1,1,40,1,45,5,5,26,500000\nOrinoqu\u00eda,Casanare,Tauramena,20000,3000,15,1,1,45,2,50,5,6,27,600000\nOrinoqu\u00eda,Meta,San Mart\u00edn,40000,5000,13,1,1,40,1,45,5,5,26,500000\nPac\u00edfica,Cauca,Caloto,25000,2000,8,1,1,35,1,40,5,4,25,400000\nPac\u00edfica,Choc\u00f3,Bah\u00eda Solano,5000,400,8,1,1,35,1,40,5,4,25,400000\nPac\u00edfica,Nari\u00f1o,La Uni\u00f3n,25000,3000,12,1,1,40,1,45,5,5,26,500000\n</code></pre> <pre><code>import streamlit as st\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Cargar los datos del CSV\ndf = pd.read_csv(\"static\\datasets\\datos_tecnologia_co.csv\")\n\n# T\u00edtulo de la aplicaci\u00f3n\nst.title(\"An\u00e1lisis de Penetraci\u00f3n de Internet en Colombia\")\n\n# Men\u00fa lateral para seleccionar las variables\nst.sidebar.header(\"Opciones de visualizaci\u00f3n\")\nregion = st.sidebar.selectbox(\"Regi\u00f3n\", df[\"Regi\u00f3n\"].unique())\nvariable_x = st.sidebar.selectbox(\"Variable X\", df.columns[3:])\nvariable_y = st.sidebar.selectbox(\"Variable Y\", df.columns[3:])\n\n# Selector de tipo de gr\u00e1fico\nchart_type = st.sidebar.selectbox(\n   \"Tipo de gr\u00e1fico\",\n   (\"Dispersi\u00f3n\", \"Histograma\", \"Boxplot\", \"Heatmap\"),\n)\n\n# Filtrar los datos seg\u00fan la regi\u00f3n seleccionada\nfiltered_df = df[df[\"Regi\u00f3n\"] == region]\n\n# Crear el gr\u00e1fico seg\u00fan el tipo seleccionado\nif chart_type == \"Dispersi\u00f3n\":\n   fig, ax = plt.subplots(figsize=(10, 6))\n   sns.scatterplot(\n      x=variable_x, y=variable_y, data=filtered_df, hue=\"Departamento\", ax=ax\n   )\n   ax.set_xlabel(variable_x)\n   ax.set_ylabel(variable_y)\n   ax.set_title(f\"Relaci\u00f3n entre {variable_x} y {variable_y} en {region}\")\nelif chart_type == \"Histograma\":\n   fig, ax = plt.subplots(figsize=(10, 6))\n   sns.histplot(x=variable_x, data=filtered_df, hue=\"Departamento\", ax=ax)\n   ax.set_xlabel(variable_x)\n   ax.set_title(f\"Histograma de {variable_x} en {region}\")\nelif chart_type == \"Boxplot\":\n   fig, ax = plt.subplots(figsize=(10, 6))\n   sns.boxplot(x=\"Departamento\", y=variable_y, data=filtered_df, ax=ax)\n   ax.set_ylabel(variable_y)\n   ax.set_title(f\"Boxplot de {variable_y} por Departamento en {region}\")\nelif chart_type == \"Heatmap\":\n   fig, ax = plt.subplots(figsize=(10, 6))\n   # Seleccionar solo las columnas num\u00e9ricas\n   numeric_cols = filtered_df.select_dtypes(include=['number'])\n   corr_matrix = numeric_cols.corr()\n   sns.heatmap(corr_matrix, annot=True, cmap=\"coolwarm\", ax=ax)\n   ax.set_title(f\"Correlaci\u00f3n de variables en {region}\")\n\nst.pyplot(fig)\n\n# Informaci\u00f3n de c\u00f3mo interpretar cada gr\u00e1fico\nst.subheader(\"Interpretaci\u00f3n de los gr\u00e1ficos\")\n\nif chart_type == \"Dispersi\u00f3n\":\n   st.write(\n      f\"El gr\u00e1fico de dispersi\u00f3n muestra la relaci\u00f3n entre {variable_x} y \"\n      f\"{variable_y} para cada departamento en la regi\u00f3n {region}. Puedes \"\n      f\"observar la tendencia general de la relaci\u00f3n, si hay una \"\n      f\"correlaci\u00f3n positiva o negativa, y si hay alg\u00fan punto at\u00edpico.\"\n   )\nelif chart_type == \"Histograma\":\n   st.write(\n      f\"El histograma muestra la distribuci\u00f3n de {variable_x} para los \"\n      f\"departamentos en la regi\u00f3n {region}. Puedes observar la frecuencia \"\n      f\"de cada valor de {variable_x} y la forma general de la \"\n      f\"distribuci\u00f3n (si es normal, sesgada, etc.).\"\n   )\nelif chart_type == \"Boxplot\":\n   st.write(\n      f\"El boxplot muestra la distribuci\u00f3n de {variable_y} para cada \"\n      f\"departamento en la regi\u00f3n {region}. Puedes observar la mediana, \"\n      f\"los cuartiles, los valores at\u00edpicos y la dispersi\u00f3n de los datos \"\n      f\"para cada departamento.\"\n   )\nelif chart_type == \"Heatmap\":\n   st.write(\n      f\"El mapa de calor muestra la correlaci\u00f3n entre las variables \"\n      f\"num\u00e9ricas en la regi\u00f3n {region}. Un color m\u00e1s rojo indica una \"\n      f\"correlaci\u00f3n positiva m\u00e1s fuerte, mientras que un color m\u00e1s azul \"\n      f\"indica una correlaci\u00f3n negativa m\u00e1s fuerte. Una correlaci\u00f3n \"\n      f\"cercana a 1 indica una fuerte correlaci\u00f3n positiva, una \"\n      f\"correlaci\u00f3n cercana a -1 indica una fuerte correlaci\u00f3n \"\n      f\"negativa, y una correlaci\u00f3n cercana a 0 indica que no hay \"\n      f\"correlaci\u00f3n.\"\n   )\n\n# Mostrar tabla de datos\nst.subheader(\"Tabla de datos\")\nst.dataframe(filtered_df)\n\n# Descripci\u00f3n de las variables\nst.subheader(\"Descripci\u00f3n de las variables\")\nst.write(\"\"\"\n   * **Regi\u00f3n:** Regi\u00f3n geogr\u00e1fica de Colombia.\n   * **Departamento:** Departamento de Colombia.\n   * **Municipio:** Municipio de Colombia.\n   * **Poblaci\u00f3n:** Poblaci\u00f3n total del municipio.\n   * **Hogares con acceso a internet:** N\u00famero de hogares con acceso a internet.\n   * **Penetraci\u00f3n de internet (%):** Porcentaje de hogares con acceso a internet.\n   * **Uso de internet:** Frecuencia de uso de internet.\n   * **Dispositivos m\u00f3viles:** N\u00famero de dispositivos m\u00f3viles por hogar.\n   * **Uso de tel\u00e9fonos inteligentes (%):** Porcentaje de hogares que usan tel\u00e9fonos inteligentes.\n   * **Acceso a computadores (%):** Porcentaje de hogares con acceso a computadores.\n   * **Uso de redes sociales (%):** Porcentaje de hogares que usan redes sociales.\n   * **Compras online (%):** Porcentaje de hogares que realizan compras online.\n   * **Nivel educativo:** Nivel educativo promedio de la poblaci\u00f3n.\n   * **Edad promedio:** Edad promedio de la poblaci\u00f3n.\n   * **Ingresos promedio:** Ingresos promedio de la poblaci\u00f3n.\n\"\"\")\n\n# A\u00f1adir informaci\u00f3n adicional\nst.subheader(\"Informaci\u00f3n adicional\")\nst.write(\"\"\"\n   * Los datos se basan en una encuesta realizada en 2023.\n   * La penetraci\u00f3n de internet se refiere al porcentaje de hogares con acceso a internet.\n   * El uso de internet se refiere a la frecuencia de uso de internet por parte de los hogares.\n\"\"\")\n</code></pre> </p>"},{"location":"content/p14/","title":"Semana 14: Despliegue de Aplicaciones Streamlit en la Nube","text":""},{"location":"content/p14/#objetivos-de-la-semana","title":"Objetivos de la Semana","text":"<ul> <li>Aprender a desplegar aplicaciones Streamlit en servicios cloud gratuitos</li> <li>Comprender los conceptos b\u00e1sicos de despliegue web</li> <li>Configurar repositorios Git para despliegue autom\u00e1tico</li> <li>Resolver problemas comunes en el despliegue</li> </ul>"},{"location":"content/p14/#introduccion-al-despliegue-en-la-nube","title":"Introducci\u00f3n al Despliegue en la Nube","text":"<p>El despliegue en la nube permite que tus aplicaciones Streamlit est\u00e9n disponibles 24/7 en internet sin necesidad de mantener tu computadora encendida. Existen varias plataformas que ofrecen servicios gratuitos perfectos para proyectos educativos y prototipos.</p>"},{"location":"content/p14/#opciones-de-despliegue-gratuito","title":"Opciones de Despliegue Gratuito","text":""},{"location":"content/p14/#1-streamlit-community-cloud-recomendado","title":"1. Streamlit Community Cloud (Recomendado)","text":"<p>Ventajas:</p> <ul> <li>Dise\u00f1ado espec\u00edficamente para Streamlit</li> <li>Despliegue autom\u00e1tico desde GitHub</li> <li>Sin l\u00edmite de tiempo de ejecuci\u00f3n</li> <li>Soporte para dependencias personalizadas</li> </ul> <p>Requisitos:</p> <ul> <li>Cuenta de GitHub</li> <li>Repositorio p\u00fablico con tu aplicaci\u00f3n</li> </ul>"},{"location":"content/p14/#2-heroku","title":"2. Heroku","text":"<p>Ventajas:</p> <ul> <li>Soporte para m\u00faltiples lenguajes</li> <li>Buena documentaci\u00f3n</li> <li>Dyno gratuito disponible</li> </ul> <p>Limitaciones:</p> <ul> <li>Se duerme despu\u00e9s de 30 minutos de inactividad</li> <li>L\u00edmite de horas mensuales</li> </ul>"},{"location":"content/p14/#3-railway","title":"3. Railway","text":"<p>Ventajas:</p> <ul> <li>Interfaz moderna</li> <li>Despliegue desde GitHub</li> <li>Buen rendimiento</li> </ul> <p>Limitaciones:</p> <ul> <li>Cr\u00e9dito mensual limitado en plan gratuito</li> </ul>"},{"location":"content/p14/#tutorial-despliegue-en-streamlit-community-cloud","title":"Tutorial: Despliegue en Streamlit Community Cloud","text":""},{"location":"content/p14/#paso-1-preparar-tu-aplicacion","title":"Paso 1: Preparar tu Aplicaci\u00f3n","text":"<ol> <li> <p>Estructura del proyecto: <pre><code>mi-app-streamlit/\n\u251c\u2500\u2500 app.py              # Archivo principal\n\u251c\u2500\u2500 requirements.txt    # Dependencias\n\u251c\u2500\u2500 README.md          # Documentaci\u00f3n\n\u2514\u2500\u2500 .gitignore        # Archivos a ignorar\n</code></pre></p> </li> <li> <p>Crear requirements.txt: <pre><code>streamlit&gt;=1.28.0\npandas&gt;=1.5.0\nnumpy&gt;=1.24.0\n# Agrega aqu\u00ed todas las librer\u00edas que uses\n</code></pre></p> </li> <li> <p>Configurar app.py: <pre><code>import streamlit as st\nimport pandas as pd\nimport numpy as np\n\n# Configuraci\u00f3n de la p\u00e1gina\nst.set_page_config(\n    page_title=\"Mi Aplicaci\u00f3n Streamlit\",\n    page_icon=\"\ud83d\ude80\",\n    layout=\"wide\"\n)\n\nst.title(\"\u00a1Hola desde la nube! \ud83c\udf24\ufe0f\")\nst.write(\"Esta aplicaci\u00f3n est\u00e1 desplegada en Streamlit Community Cloud\")\n\n# Tu c\u00f3digo aqu\u00ed\n</code></pre></p> </li> </ol>"},{"location":"content/p14/#paso-2-subir-a-github","title":"Paso 2: Subir a GitHub","text":"<ol> <li> <p>Crear repositorio en GitHub:</p> <ul> <li>Ve a github.com</li> <li>Crea un nuevo repositorio p\u00fablico</li> <li>No inicialices con README (ya tienes uno local)</li> </ul> </li> <li> <p>Subir tu c\u00f3digo: <pre><code>git init\ngit add .\ngit commit -m \"Primera versi\u00f3n de mi app Streamlit\"\ngit branch -M main\ngit remote add origin https://github.com/TU_USUARIO/TU_REPOSITORIO.git\ngit push -u origin main\n</code></pre></p> </li> </ol>"},{"location":"content/p14/#paso-3-desplegar-en-streamlit-community-cloud","title":"Paso 3: Desplegar en Streamlit Community Cloud","text":"<ol> <li> <p>Crear cuenta:</p> <ul> <li>Ve a share.streamlit.io</li> <li>Inicia sesi\u00f3n con tu cuenta de GitHub</li> </ul> </li> <li> <p>Desplegar aplicaci\u00f3n:</p> <ul> <li>Haz clic en \"New app\"</li> <li>Selecciona tu repositorio</li> <li>Elige la rama (main)</li> <li>Especifica el archivo principal (app.py)</li> <li>Haz clic en \"Deploy\"</li> </ul> </li> <li> <p>Esperar el despliegue:</p> <ul> <li>El proceso toma 2-5 minutos</li> <li>Recibir\u00e1s una URL como: <code>https://tu-app.streamlit.app</code></li> </ul> </li> </ol>"},{"location":"content/p14/#configuracion-avanzada","title":"Configuraci\u00f3n Avanzada","text":""},{"location":"content/p14/#variables-de-entorno","title":"Variables de Entorno","text":"<p>Para aplicaciones m\u00e1s complejas, puedes usar variables de entorno:</p> <pre><code>import os\nimport streamlit as st\n\n# En tu app.py\nAPI_KEY = os.getenv('API_KEY', 'valor_por_defecto')\nst.write(f\"API Key: {API_KEY}\")\n</code></pre> <p>Configurar en Streamlit Cloud:</p> <ol> <li>Ve al dashboard de tu app</li> <li>Haz clic en \"Settings\"</li> <li>En \"Secrets\", agrega:</li> </ol> <pre><code>API_KEY = \"tu_clave_secreta\"\n</code></pre>"},{"location":"content/p14/#manejo-de-errores","title":"Manejo de Errores","text":"<pre><code>import streamlit as st\nimport traceback\n\ntry:\n    # Tu c\u00f3digo principal\n    st.title(\"Mi Aplicaci\u00f3n\")\n    # ... resto del c\u00f3digo\nexcept Exception as e:\n    st.error(f\"Error: {str(e)}\")\n    st.code(traceback.format_exc())\n</code></pre>"},{"location":"content/p14/#solucion-de-problemas-comunes","title":"Soluci\u00f3n de Problemas Comunes","text":""},{"location":"content/p14/#error-no-module-named-xxx","title":"Error: \"No module named 'xxx'\"","text":"<p>Soluci\u00f3n: Aseg\u00farate de incluir todas las dependencias en <code>requirements.txt</code></p>"},{"location":"content/p14/#error-app-is-taking-too-long-to-load","title":"Error: \"App is taking too long to load\"","text":"<p>Soluciones:</p> <ul> <li>Optimiza tu c\u00f3digo</li> <li>Usa <code>@st.cache_data</code> para funciones costosas</li> <li>Reduce el tama\u00f1o de datasets</li> </ul>"},{"location":"content/p14/#error-memory-limit-exceeded","title":"Error: \"Memory limit exceeded\"","text":"<p>Soluciones:</p> <ul> <li>Procesa datos en chunks</li> <li>Usa muestras de datos grandes</li> <li>Optimiza el uso de memoria</li> </ul>"},{"location":"content/p14/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":""},{"location":"content/p14/#1-optimizacion-de-rendimiento","title":"1. Optimizaci\u00f3n de Rendimiento","text":"<pre><code>import streamlit as st\n\n@st.cache_data\ndef cargar_datos():\n    # Esta funci\u00f3n solo se ejecuta una vez\n    return pd.read_csv('datos_grandes.csv')\n\n@st.cache_resource\ndef crear_modelo():\n    # Para modelos ML que no cambian\n    return cargar_modelo_ml()\n</code></pre>"},{"location":"content/p14/#2-diseno-responsivo","title":"2. Dise\u00f1o Responsivo","text":"<pre><code># Usar columnas responsivas\ncol1, col2 = st.columns([2, 1])\n\nwith col1:\n    st.write(\"Contenido principal\")\n\nwith col2:\n    st.write(\"Barra lateral\")\n</code></pre>"},{"location":"content/p14/#3-documentacion-clara","title":"3. Documentaci\u00f3n Clara","text":"<pre><code># Agrega docstrings y comentarios\ndef procesar_datos(df):\n    \"\"\"\n    Procesa el DataFrame y retorna estad\u00edsticas.\n\n    Args:\n        df: DataFrame de entrada\n\n    Returns:\n        dict: Diccionario con estad\u00edsticas\n    \"\"\"\n    return df.describe()\n</code></pre>"},{"location":"content/p14/#ejercicio-practico","title":"Ejercicio Pr\u00e1ctico","text":""},{"location":"content/p14/#desafio-desplegar-tu-primera-app","title":"Desaf\u00edo: Desplegar tu Primera App","text":"<ol> <li> <p>Crea una aplicaci\u00f3n simple que muestre:</p> <ul> <li>Un gr\u00e1fico interactivo</li> <li>Un dataframe filtrable</li> <li>Informaci\u00f3n sobre el dataset</li> </ul> </li> <li> <p>Sigue los pasos del tutorial para desplegarla</p> </li> <li> <p>Comparte tu URL en el foro de la clase</p> </li> </ol>"},{"location":"content/p14/#ejemplo-de-aplicacion","title":"Ejemplo de Aplicaci\u00f3n","text":"<pre><code>import streamlit as st\nimport pandas as pd\nimport plotly.express as px\n\nst.set_page_config(page_title=\"An\u00e1lisis de Datos\", layout=\"wide\")\n\n# Cargar datos\n@st.cache_data\ndef cargar_datos():\n    return pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/iris.csv')\n\ndf = cargar_datos()\n\n# Sidebar\nst.sidebar.header(\"Filtros\")\nespecie = st.sidebar.selectbox(\"Seleccionar especie:\", df['Name'].unique())\n\n# Main content\nst.title(\"An\u00e1lisis del Dataset Iris\")\n\n# Filtrar datos\nfiltered_df = df[df['Name'] == especie]\n\n# Mostrar m\u00e9tricas\ncol1, col2, col3 = st.columns(3)\ncol1.metric(\"Total de muestras\", len(filtered_df))\ncol2.metric(\"Promedio Sepal Length\", f\"{filtered_df['SepalLength'].mean():.2f}\")\ncol3.metric(\"Promedio Petal Length\", f\"{filtered_df['PetalLength'].mean():.2f}\")\n\n# Gr\u00e1fico\nfig = px.scatter(filtered_df, x='SepalLength', y='PetalLength', \n                 color='Name', title=f'Dispersi\u00f3n para {especie}')\nst.plotly_chart(fig, use_container_width=True)\n\n# Tabla de datos\nst.subheader(\"Datos filtrados\")\nst.dataframe(filtered_df)\n</code></pre>"},{"location":"content/p14/#tarea-de-la-semana","title":"Tarea de la Semana","text":"<ol> <li>Despliega al menos una aplicaci\u00f3n Streamlit en la nube</li> <li>Documenta el proceso con capturas de pantalla</li> <li>Crea un README profesional para tu repositorio</li> </ol>"},{"location":"content/p15/","title":"Semana 15","text":"<p>Note</p> <p>El contenido se publicar\u00e1 en la fecha correspondiente.</p>"},{"location":"content/p16/","title":"Semana 16 - Evaluaci\u00f3n de Conocimiento","text":"<p>La evaluaci\u00f3n de conocimiento se realizar\u00e1 a trav\u00e9s de la plataforma: <pre><code>https://seia-stalone.vercel.app/\n</code></pre></p>"},{"location":"content/p16/#codigo-a5n83zj4","title":"C\u00f3digo: A5N83ZJ4","text":""},{"location":"content/p17/","title":"Semana 17 - Ensayo individual","text":""},{"location":"content/p17/#aprendizaje-experiencia-y-opinion-del-curso","title":"Aprendizaje, experiencia y opini\u00f3n del curso","text":""},{"location":"content/p17/#objetivo","title":"Objetivo","text":"<ul> <li>Elaborar un ensayo personal e individual que integre lo aprendido en el curso, tu experiencia pr\u00e1ctica en el Proyecto Integrador y tu opini\u00f3n sobre el curso.</li> </ul>"},{"location":"content/p17/#alcance","title":"Alcance","text":"<ul> <li>Ensayo centrado en tu vivencia y criterio propio. No es una bit\u00e1cora t\u00e9cnica ni un informe de avances grupal.</li> </ul>"},{"location":"content/p17/#instrucciones","title":"Instrucciones","text":"<ul> <li>Redacta en primera persona, con un hilo narrativo claro.</li> <li>Integra conceptos clave trabajados durante el curso (Python, Git/GitHub, entornos, manejo de datos con Pandas, visualizaci\u00f3n y despliegue) desde tu experiencia concreta.</li> <li>Describe situaciones reales (\u00e9xitos, errores, decisiones) y c\u00f3mo las afrontaste.</li> <li>Exp\u00f3n tu opini\u00f3n sobre el curso: qu\u00e9 te aport\u00f3, qu\u00e9 mejorar\u00edas y por qu\u00e9.</li> </ul>"},{"location":"content/p17/#estructura-sugerida","title":"Estructura sugerida","text":"<ul> <li>Introducci\u00f3n: contexto, objetivos personales y expectativa inicial del curso.</li> <li>Desarrollo: aprendizajes significativos (elige los m\u00e1s relevantes para ti) con ejemplos concretos del Proyecto Integrador.</li> <li>Experiencia: desaf\u00edos t\u00e9cnicos/organizativos, c\u00f3mo los resolviste y qu\u00e9 aprendiste de ellos.</li> <li>Opini\u00f3n: valoraci\u00f3n cr\u00edtica del curso (contenidos, ritmo, metodolog\u00eda, evaluaciones) con argumentos.</li> <li>Cierre: conclusiones, impacto en tu perfil y pr\u00f3ximos pasos/mejoras que realizar\u00e1s.</li> </ul>"},{"location":"content/p17/#entrega","title":"Entrega","text":"<ul> <li>Archivo: <code>Ensayo_&lt;NOMBRE&gt;.pdf</code> o <code>Ensayo_&lt;NOMBRE&gt;.md</code>.</li> <li>Canal: carpeta de Drive.</li> </ul>"},{"location":"content/p17/#sugerencias-para-escribir-mejor","title":"Sugerencias para escribir mejor","text":"<ul> <li>Evita enumerar contenidos semana a semana; selecciona lo que realmente te transform\u00f3.</li> <li>Sost\u00e9n tus opiniones con situaciones concretas vividas.</li> <li>Relee y edita: busca precisi\u00f3n, elimina repeticiones, cuida ortograf\u00eda.</li> </ul>"},{"location":"content/p18/","title":"Semana 18 - Presentaci\u00f3n Proyecto Integrador","text":""},{"location":"content/p18/#instrucciones-para-la-presentacion-del-proyecto-integrador","title":"Instrucciones para la presentaci\u00f3n del proyecto integrador:","text":"<ul> <li>Asistencia obligatoria de todos los participantes durante toda la jornada acad\u00e9mica.</li> <li>Subir la presentaci\u00f3n a la carpeta compartida de Google Drive con antelaci\u00f3n.</li> <li>Cumplir estrictamente con el horario de presentaci\u00f3n.</li> <li>La no participaci\u00f3n en el horario asignado implicar\u00e1 una exposici\u00f3n individual de recuperaci\u00f3n en la semana 18.</li> <li>La presentacion debe grabarse en audio para su evaluaci\u00f3n y el archivo de audio se almacenar\u00e1 como evidencia.</li> </ul>"},{"location":"content/p18/#horario-de-presentacion-del-proyecto-integrador","title":"Horario de presentaci\u00f3n del proyecto integrador.","text":"GRUPO NOMBRES DESDE HASTA 1 SANTIAGO DIAZ USMA 6:30 6:55 1 JAVIER ESTEBAN RESTREPO PARIAS 6:30 6:55 1 MATEO GONZALEZ VILLEGAS 6:30 6:55 1 LUIS FERNANDO MIRANDA RIVAS 6:30 6:55 1 LEANDRO ALBERTO ACEVEDO ZAPATA 6:30 6:55 2 SAMUEL ALVIS BORNACELLY 7:00 7:25 2 JULIAN ECHAVARRIA YEPES 7:00 7:25 2 VICTOR MANUEL POLO RUEDAS 7:00 7:25 3 JUAN MANUEL RIVERA RESTREPO 7:30 7:55 3 ANDRES DARIO VALLEJO UCHIMA 7:30 7:55 3 ALEJANDRO URREGO CARDONA 7:30 7:55 4 DANIEL CANDELARIO SALDARRIAGA 8:00 8:25 4 JUAN ESTEBAN ZAPATA TOBON 8:00 8:25 4 ANA SOFIA VELEZ MARULANDA 8:00 8:25 4 EDGARLY 8:00 8:25 5 JUAN MIGUEL SANTAMAR\u00cdA M\u00daNERA 8:30 8:55 5 JOEL STIVEN MARI\u00d1OS RIVERA 8:30 8:55 5 BRAHIAN ANGEL OSPINA 8:30 8:55 5 LEANDRO ALBERTO CESPEDES BEDOYA 8:30 8:55"},{"location":"content/p2/","title":"Semana 2 - Python","text":"<p>Python es un lenguaje de programaci\u00f3n de alto nivel, de prop\u00f3sito general, que fue creado por Guido van Rossum en el a\u00f1o 1989. Es un lenguaje intuitivo, f\u00e1cil de aprender y con una sintaxis clara y legible, que lo hace accesible tanto para principiantes como para programadores experimentados.</p> <p>Python se utiliza ampliamente en una gran variedad de aplicaciones, desde el desarrollo de aplicaciones web hasta la automatizaci\u00f3n de tareas, el an\u00e1lisis de datos y la inteligencia artificial. Tambi\u00e9n es muy popular en la comunidad cient\u00edfica y en la investigaci\u00f3n, gracias a la gran cantidad de bibliotecas y herramientas disponibles que lo hacen muy \u00fatil para el c\u00e1lculo y la visualizaci\u00f3n de datos.</p> <p>Adem\u00e1s de ser f\u00e1cil de aprender y de utilizar, Python tambi\u00e9n es un lenguaje de c\u00f3digo abierto, lo que significa que est\u00e1 disponible gratuitamente y que hay una gran comunidad de desarrolladores que contribuyen a su desarrollo y mejora.</p>"},{"location":"content/p2/#python-lenguaje-interpretado","title":"Python - Lenguaje interpretado","text":"<p>Python es un lenguaje de programaci\u00f3n interpretado de alto nivel. Esto significa que no se traduce a c\u00f3digo de m\u00e1quina antes de ejecutarse. En su lugar, se ejecuta l\u00ednea por l\u00ednea por un int\u00e9rprete. Este proceso de interpretaci\u00f3n puede ser m\u00e1s lento que la ejecuci\u00f3n de c\u00f3digo compilado, pero tiene algunas ventajas. Por ejemplo, los programas interpretados pueden ser m\u00e1s f\u00e1ciles de depurar y depurar. Tambi\u00e9n pueden ser portables a diferentes plataformas, ya que no necesitan ser compilados para cada plataforma espec\u00edfica.</p>"},{"location":"content/p2/#tabla-comparativa-lenguajes-compilados-vs-lenguajes-interpretados","title":"Tabla comparativa: Lenguajes compilados vs. Lenguajes interpretados","text":"Criterio Lenguajes compilados Lenguajes interpretados Ejemplos C, C++, Rust, Go, Haskell Python, Ruby, JavaScript, PHP Traducci\u00f3n Se realiza una vez, antes de la ejecuci\u00f3n Se realiza cada vez que se ejecuta el programa Velocidad Suelen ser m\u00e1s r\u00e1pidos y eficientes Suelen ser m\u00e1s lentos y consumir m\u00e1s recursos Portabilidad Dependen de la plataforma y el compilador Son independientes de la plataforma y el int\u00e9rprete Depuraci\u00f3n Es m\u00e1s dif\u00edcil encontrar y corregir errores Es m\u00e1s f\u00e1cil encontrar y corregir errores Flexibilidad Suelen ser m\u00e1s r\u00edgidos y estrictos Suelen ser m\u00e1s din\u00e1micos y flexibles Control Permiten un mayor control sobre el hardware Abstraen el hardware y lo gestionan autom\u00e1ticamente Tama\u00f1o Suelen generar archivos ejecutables m\u00e1s grandes Suelen generar archivos de c\u00f3digo fuente m\u00e1s peque\u00f1os <p>M\u00e1s informaci\u00f3n acerca de lenguajes interpretados</p>"},{"location":"content/p2/#instalacion-de-python","title":"Instalaci\u00f3n de Python","text":"<p>La instalaci\u00f3n de Python depende del sistema operativo que est\u00e9 utilizando. Aqu\u00ed se describen los pasos para instalar Python en los sistemas operativos m\u00e1s comunes:</p> <ul> <li>Windows: Descargue el instalador de Python desde el sitio web oficial de Python (https://www.python.org/downloads/).   Ejecute el instalador y siga las instrucciones en pantalla para instalar Python en su computadora.   Verifique que Python est\u00e1 instalado correctamente abriendo el s\u00edmbolo del sistema y escribiendo python y presionando Enter.</li> <li>macOS: Descargue el instalador de Python desde el sitio web oficial de Python (https://www.python.org/downloads/).   Ejecute el instalador y siga las instrucciones en pantalla para instalar Python en su computadora.   Verifique que Python est\u00e1 instalado correctamente abriendo la terminal y escribiendo python y presionando Enter.</li> <li>Linux: La mayor\u00eda de las distribuciones de Linux ya vienen con Python preinstalado. Para verificar si Python est\u00e1 instalado, abra una terminal y escriba python y presione Enter.</li> </ul> <p>Si no est\u00e1 instalado, puede instalar Python desde los repositorios de software de su distribuci\u00f3n de Linux. Por ejemplo, en Ubuntu, puede instalar Python escribiendo sudo apt-get install python en una terminal. Una vez que Python est\u00e9 instalado, puede comenzar a escribir y ejecutar programas en Python utilizando un editor de texto o un entorno de desarrollo integrado (IDE). Hay muchas opciones disponibles, incluyendo IDLE (incluido con la instalaci\u00f3n de Python), PyCharm, Visual Studio Code, entre otros.</p>"},{"location":"content/p2/#descargar-python","title":"Descargar Python","text":""},{"location":"content/p2/#sangrado-en-python","title":"Sangrado en Python","text":"<p>Sangrado (o indentaci\u00f3n) es un espacio en blanco al comienzo de una l\u00ednea de c\u00f3digo que se usa para resaltar la estructura y la organizaci\u00f3n del c\u00f3digo. El sangrado hace que el c\u00f3digo sea m\u00e1s legible visualmente agrupando l\u00edneas relacionadas.</p> <p>Es una forma de organizar visualmente el c\u00f3digo para facilitar su lectura. Se utilizan espacios o tabs para \"sangrar\" <code>(indentar)</code> determinadas l\u00edneas de c\u00f3digo.</p> <p>Python requiere sangrado de forma estricta, de tal manera que el sangrado indica la estructura y bloques de c\u00f3digo. Por ejemplo:</p> <pre><code>if condition:\n    print(\"Verdadero\")\nelse:\n    print(\"Falso\")\n</code></pre> <p>Aqu\u00ed el sangrado indica que la l\u00ednea print(\"Verdadero\") est\u00e1 dentro del bloque if, mientras que la l\u00ednea print(\"Falso\") est\u00e1 dentro del bloque else.</p> <p>Otro ejemplo:</p> <pre><code>for i in  range(5):\n print(i)\n</code></pre> <p>La l\u00ednea print(i) est\u00e1 sangrada debajo del bucle for, indicando que se ejecutar\u00e1 en cada iteraci\u00f3n.</p> <p>Algunos puntos sobre el sangrado en Python:</p> <ul> <li> <p>Es obligatorio. Python usa el sangrado para determinar la estructura del c\u00f3digo.</p> </li> <li> <p>Es estricto. El sangrado debe ser consistente dentro de un bloque, usar espacios no tabs.</p> </li> <li> <p>Se recomiendan 4 espacios, aunque Python tambi\u00e9n acepta tabs.</p> </li> <li> <p>No puede mezclar espacios y tabs dentro de un bloque.</p> </li> </ul> <p>El sangrado hace que el c\u00f3digo Python sea m\u00e1s legible visualmente, ayudando a agrupar l\u00edneas relacionadas y resaltando la estructura anidada. Por eso es una parte importante del estilo de codificaci\u00f3n en Python.</p>"},{"location":"content/p2/#variables-en-python","title":"Variables en python","text":"<p>En Python, las variables son usadas para almacenar informaci\u00f3n y pueden ser referenciadas por un nombre.</p> <p>Para crear una variable en Python, simplemente asignamos un valor a un nombre. Por ejemplo:</p> <pre><code>nombre = \"Juan\"\nedad = 25\nprint(\"Mi nombre es\", nombre)\nprint(\"Tengo\", edad, \"a\u00f1os\")\n</code></pre> <p>:::info Reglas</p> <p>En Python, hay ciertas reglas que deben seguirse al crear identificadores de variables:</p> <ul> <li> <p>Deben comenzar con una letra o un gui\u00f3n bajo.</p> </li> <li> <p>No pueden comenzar con un n\u00famero.</p> </li> <li> <p>No pueden contener espacios en blanco.</p> </li> <li> <p>No pueden ser una palabra reservada en Python (por ejemplo, \"if\", \"else\", \"for\", etc.).</p> </li> <li> <p>Deben ser \u00fanicos y significativos.</p> </li> <li> <p>Deben ser descriptivos y en min\u00fasculas, separando palabras con guiones bajos.</p> </li> </ul> <p>:::</p> <pre><code>#Identificadores v\u00e1lidos\nnombre = \"Juan\"\nedad = 25\n_nombre_completo = \"Juan P\u00e9rez\"\n#Identificadores inv\u00e1lidos\n123nombre = \"Juan\" # Comienza con un n\u00famero\nnombre-completo = \"Juan P\u00e9rez\" # Contiene un gui\u00f3n\nif = \"condicional\" # Es una palabra reservada\n</code></pre>"},{"location":"content/p2/#snake-case","title":"Snake case","text":"<p>El snake case es una convenci\u00f3n de nomenclatura muy utilizada en Python para nombrar variables, funciones y m\u00f3dulos. Aqu\u00ed tienes una explicaci\u00f3n m\u00e1s detallada:</p> <ol> <li>Definici\u00f3n: Snake case consiste en escribir palabras en min\u00fasculas, separ\u00e1ndolas con guiones bajos (_).</li> <li>Uso en Python:<ul> <li>Variables: mi_variable, contador, nombre_usuario</li> <li>Funciones: calcular_promedio(), obtener_datos(), imprimir_resultado()</li> <li>M\u00f3dulos: utilidades.py, procesamiento_datos.py</li> </ul> </li> <li>Ejemplos:</li> </ol> <pre><code># Variables\nnumero_de_usuarios = 100\nnombre_completo = \"Juan P\u00e9rez\"\n\n# Funci\u00f3n\ndef calcular_area_rectangulo(largo, ancho):\n    return largo * ancho\n\n# Llamada a funci\u00f3n\narea = calcular_area_rectangulo(5, 3)\n\n# En una clase\nclass ProcesadorTexto:\n    def __init__(self):\n        self.texto_actual = \"\"\n\n    def contar_palabras(self):\n        return len(self.texto_actual.split())\n</code></pre> <ol> <li>Ventajas:<ul> <li>Mejora la legibilidad del c\u00f3digo</li> <li>Es consistente con la filosof\u00eda de Python de c\u00f3digo expl\u00edcito y claro</li> <li>Facilita la distinci\u00f3n entre variables/funciones y clases (que usan PascalCase)</li> </ul> </li> <li>Cu\u00e1ndo no usar snake case:<ul> <li>Nombres de clases (usar PascalCase)</li> <li>Constantes (usar MAY\u00daSCULAS_CON_GUIONES_BAJOS)</li> </ul> </li> <li>Consideraciones:<ul> <li>Evitar nombres de una sola letra, excepto para contadores o \u00edndices muy simples</li> <li>Usar nombres descriptivos pero no excesivamente largos</li> </ul> </li> </ol>"},{"location":"content/p2/#constantes-en-python","title":"Constantes en Python","text":"<p>Las constantes en Python son un concepto un poco diferente comparado con otros lenguajes de programaci\u00f3n. </p> <ol> <li>Convenci\u00f3n de nombrado:<ul> <li>Se escriben en MAY\u00daSCULAS_CON_GUIONES_BAJOS</li> <li>Ejemplo: MAX_VALUE, PI, DEFAULT_CONFIG</li> </ul> </li> <li>Declaraci\u00f3n: En Python, t\u00e9cnicamente no existen constantes \"verdaderas\". Se usan variables regulares, pero por convenci\u00f3n, se tratan como constantes.</li> </ol> <pre><code>x = 5 # n\u00famero entero\ny = 5.0 # n\u00famero flotante\nz = 3 + 4j # n\u00famero complejo\n</code></pre>"},{"location":"content/p2/#tipos-de-datos-en-python","title":"Tipos de datos en python","text":"<p>En Python, existen diferentes tipos de datos que se pueden utilizar para almacenar informaci\u00f3n. Aqu\u00ed hay algunos de los tipos de datos m\u00e1s comunes:</p> <ol> <li>N\u00fameros: Python tiene soporte para n\u00fameros enteros (int), n\u00fameros flotantes (float) y n\u00fameros complejos (complex). Por ejemplo:</li> </ol> <pre><code>x = 5 # n\u00famero entero\ny = 5.0 # n\u00famero flotante\nz = 3 + 4j # n\u00famero complejo\n</code></pre> <ol> <li>Cadenas: Las cadenas en Python se usan para representar texto y se escriben entre comillas simples o dobles. Por ejemplo:</li> </ol> <pre><code>nombre = \"John Doe\"\napellido = 'Smith'\n</code></pre> <ol> <li>Listas: Las listas en Python son secuencias ordenadas de valores, que pueden ser de cualquier tipo de datos. Por ejemplo:</li> </ol> <pre><code>frutas = [\"manzana\", \"banana\", \"pera\"]\nnumeros = [1, 2, 3, 4, 5]\n</code></pre> <ol> <li>Tuplas: Las tuplas son similares a las listas, pero son inmutables y no se pueden modificar una vez creadas. Por ejemplo:</li> </ol> <pre><code>colores = (\"rojo\", \"verde\", \"azul\")\n</code></pre> <ol> <li>Diccionarios: Los diccionarios en Python son estructuras de datos no ordenadas que asocian claves con valores. Por ejemplo:</li> </ol> <pre><code>persona = {\n \"nombre\": \"John Doe\",\n \"edad\": 30,\n \"ciudad\": \"New York\"\n}\n</code></pre>"},{"location":"content/p2/#comentarios-en-python","title":"Comentarios en python","text":"<p>Los comentarios en Python son l\u00edneas de texto que se utilizan para describir el c\u00f3digo y ayudar a otros programadores a comprenderlo. Los comentarios no son interpretados por Python y no tienen ning\u00fan impacto en el funcionamiento del programa.</p> <p>Hay dos maneras de crear comentarios en Python:</p> <ol> <li>Usando el car\u00e1cter #:</li> </ol> <pre><code># Este es un comentario en una sola l\u00ednea\nx = 5 # Este es un comentario en la misma l\u00ednea que el c\u00f3digo\n</code></pre> <ol> <li>Usando tres comillas dobles:</li> </ol> <pre><code>\"\"\"\nEste es un comentario\nen varias l\u00edneas\n\"\"\"\n</code></pre>"},{"location":"content/p2/#la-funcion-print-de-python","title":"La funci\u00f3n print() de Python","text":"<p>La funci\u00f3n <code>print()</code> en Python es una herramienta fundamental para mostrar informaci\u00f3n en la pantalla. Es una funci\u00f3n integrada que se utiliza para imprimir cadenas de texto, variables, valores y otras expresiones.</p> <p>Sintaxis b\u00e1sica:</p> <pre><code>print(objeto)\n</code></pre> <p>Par\u00e1metros:</p> <ul> <li>objeto:\u00a0Puede ser una cadena de texto (entre comillas simples o dobles), una variable, una expresi\u00f3n, un objeto, etc.</li> </ul> <p>Ejemplos:</p> <pre><code># Imprimir una cadena de texto\nprint(\"Hola mundo!\")\n# Imprimir una variable\nnombre = \"Ana\"\nprint(nombre)\n# Imprimir una expresi\u00f3n\nsuma = 1 + 2\nprint(suma)\n# Imprimir m\u00faltiples objetos\nprint(\"El resultado es:\", suma, \"y el nombre es:\", nombre)\n</code></pre> <p>Opciones adicionales:</p> <ul> <li>Separador:\u00a0Se puede usar el argumento\u00a0<code>sep</code>\u00a0para especificar el separador entre los objetos que se imprimen. El valor por defecto es un espacio.</li> </ul> <pre><code>print(\"a\", \"b\", \"c\", sep=\", \")\n</code></pre> <p>Salida: <pre><code>a, b, c\n</code></pre></p> <ul> <li>Fin de l\u00ednea:\u00a0El argumento\u00a0<code>end</code>\u00a0define el car\u00e1cter que se imprime al final de la salida. El valor por defecto es un salto de l\u00ednea (<code>\\n</code>).</li> </ul> <pre><code>print(\"Primera l\u00ednea\", end=\" \")\nprint(\"Segunda l\u00ednea\")\n</code></pre> <p>Salida:</p> <pre><code>Primera l\u00ednea Segunda l\u00ednea\n</code></pre> <ul> <li>Formateo de cadenas f:\u00a0Python 3.6 introdujo las cadenas f, que permiten formatear cadenas de forma m\u00e1s elegante.</li> </ul> <pre><code>edad = 25\nprint(f\"Hola, me llamo {nombre} y tengo {edad} a\u00f1os.\")\n</code></pre> <p>Salida:</p> <pre><code>Hola, me llamo Ana y tengo 25 a\u00f1os.\n</code></pre>"},{"location":"content/p2/#la-funcion-input-en-python","title":"La funci\u00f3n\u00a0<code>input()</code>\u00a0en Python","text":"<p>La funci\u00f3n <code>input()</code> en Python es indispensable para interactuar con el usuario y obtener informaci\u00f3n que introduzca por teclado.</p> <p>Sintaxis:</p> <pre><code>entrada = input(prompt)\n</code></pre> <p>Par\u00e1metros:</p> <ul> <li>prompt (opcional):\u00a0Es una cadena de texto que se muestra al usuario antes de que introduzca la informaci\u00f3n. Esta cadena sirve para guiar al usuario sobre qu\u00e9 tipo de informaci\u00f3n se espera.</li> </ul> <p>Retorno:</p> <p>La funci\u00f3n <code>input()</code> siempre devuelve un string, incluso si el usuario introduce un n\u00famero. Esto significa que si necesita trabajar con la informaci\u00f3n como un n\u00famero, deber\u00e1 convertirla expl\u00edcitamente usando funciones como <code>int()</code>, <code>float()</code>, etc.</p> <p>Ejemplos:</p> <pre><code># Pedir el nombre del usuario\nnombre = input(\"\u00bfC\u00f3mo te llamas? \")\nprint(f\"Hola, {nombre}!\")\n# Solicitar dos n\u00fameros y sumarlos\nnum1 = int(input(\"Introduce el primer n\u00famero: \"))\nnum2 = int(input(\"Introduce el segundo n\u00famero: \"))\nsuma = num1 + num2\nprint(f\"La suma es: {suma}\")\n</code></pre> <p>Puntos a tener en cuenta:</p> <ul> <li> <p>La funci\u00f3n\u00a0<code>input()</code>\u00a0siempre espera que el usuario pulse la tecla\u00a0<code>Enter</code>\u00a0para finalizar la entrada.</p> </li> <li> <p>Si no se proporciona un\u00a0<code>prompt</code>, la funci\u00f3n muestra un mensaje gen\u00e9rico como\u00a0<code>Introduce un valor:</code>.</p> </li> <li> <p>Se recomienda usar el\u00a0<code>prompt</code>\u00a0para guiar al usuario y evitar confusiones.</p> </li> <li> <p>Para procesar la entrada como un tipo de dato espec\u00edfico, use funciones de conversi\u00f3n como\u00a0<code>int()</code>,\u00a0<code>float()</code>, etc.</p> </li> </ul>"},{"location":"content/p2/#estructuras-de-control-condicionales","title":"Estructuras de control condicionales","text":"<p>Los condicionales en Python permiten ejecutar c\u00f3digo solo si se cumple una determinada condici\u00f3n. Esto es muy \u00fatil para controlar el flujo de un programa y tomar decisiones basadas en diferentes situaciones.</p>"},{"location":"content/p2/#la-estructura-if","title":"La estructura if","text":"<p>La estructura if es la estructura condicional m\u00e1s b\u00e1sica en Python. Se utiliza para evaluar una condici\u00f3n y ejecutar un bloque de c\u00f3digo si la condici\u00f3n es verdadera.</p> <p>La sintaxis de la estructura if es la siguiente:</p> <pre><code>if condici\u00f3n:\n # Bloque de c\u00f3digo que se ejecuta si la condici\u00f3n es verdadera\n</code></pre> <p>Por ejemplo, el siguiente c\u00f3digo imprime el mensaje \"Eres mayor de edad\" si la variable edad es mayor o igual a 18:</p> <pre><code>edad = 18\nif edad &gt;= 18:\n print(\"Eres mayor de edad\")\n</code></pre>"},{"location":"content/p2/#la-estructura-elif","title":"La estructura elif","text":"<p>La estructura elif se utiliza para agregar condiciones adicionales a una estructura if. Se eval\u00faan secuencialmente, y el bloque de c\u00f3digo correspondiente a la primera condici\u00f3n que se cumple se ejecuta.</p> <p>La sintaxis de la estructura elif es la siguiente:</p> <pre><code>if condici\u00f3n 1:\n # Bloque de c\u00f3digo que se ejecuta si la condici\u00f3n 1 es verdadera\nelif condici\u00f3n 2:\n # Bloque de c\u00f3digo que se ejecuta si la condici\u00f3n 2 es verdadera\n</code></pre> <p>Por ejemplo, el siguiente c\u00f3digo imprime el mensaje \"Eres mayor de edad\", \"Eres adolescente\" o \"Eres menor de edad\", dependiendo de la edad del usuario:</p> <pre><code>edad = 17\nif edad &gt;= 18:\n print(\"Eres mayor de edad\")\nelif edad &gt;= 16:\n print(\"Eres adolescente\")\nelse:\n print(\"Eres menor de edad\")\n</code></pre>"},{"location":"content/p2/#la-estructura-else","title":"La estructura else","text":"<p>La estructura else se utiliza para ejecutar un bloque de c\u00f3digo si ninguna de las condiciones anteriores se cumple.</p> <p>La sintaxis de la estructura else es la siguiente:</p> <pre><code>if condici\u00f3n 1:\n # Bloque de c\u00f3digo que se ejecuta si la condici\u00f3n 1 es verdadera\nelif condici\u00f3n 2:\n # Bloque de c\u00f3digo que se ejecuta si la condici\u00f3n 2 es verdadera\nelse:\n # Bloque de c\u00f3digo que se ejecuta si ninguna de las condiciones anteriores se cumple\n</code></pre> <p>Por ejemplo, el siguiente c\u00f3digo imprime el mensaje \"Eres menor de edad\" si la variable edad no es mayor o igual a 18:</p> <pre><code>edad = 17\nif edad &gt;= 18:\n print(\"Eres mayor de edad\")\nelse:\n print(\"Eres menor de edad\")\n</code></pre>"},{"location":"content/p2/#ejemplos-de-estructuras-de-control-condicionales","title":"Ejemplos de estructuras de control condicionales","text":"<ol> <li>Comparar dos n\u00fameros</li> </ol> <pre><code>a = 10\nb = 20\nif a &gt; b:\n print(\"a es mayor que b\")\nelif a &lt; b:\n print(\"b es mayor que a\")\nelse:\n print(\"a y b son iguales\")\n</code></pre> <ol> <li>Comparar una cadena con un valor</li> </ol> <pre><code>cadena = \"Hola\"\nif cadena == \"Hola\":\n print(\"La cadena es 'Hola'\")\nelse:\n print(\"La cadena no es 'Hola'\")\n</code></pre> <ol> <li>Validar un n\u00famero</li> </ol> <pre><code>numero = input(\"Introduce un n\u00famero: \")\ntry:\n    numero = int(numero)\n    if numero &gt; 0:\n        print(\"El n\u00famero es positivo\")\n    else:\n        print(\"El n\u00famero es negativo\")\nexcept  ValueError:\n    print(\"El n\u00famero introducido no es v\u00e1lido\")\n</code></pre>"},{"location":"content/p2/#libro-recomendado-de-python","title":"Libro recomendado de Python","text":"<p>Bienvenid@ a El Libro De Python</p>"},{"location":"content/p3/","title":"Semana 3 - ciclos en Python","text":""},{"location":"content/p3/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>Los ciclos (o bucles) permiten ejecutar un bloque de c\u00f3digo repetidamente sin necesidad de reescribirlo. En Python existen dos construcciones b\u00e1sicas:</p> Construcci\u00f3n Uso t\u00edpico \u00bfTermina autom\u00e1ticamente? <code>for</code> Recorrer iterables S\u00ed, cuando el iterable se agota <code>while</code> Repetir mientras se cumpla una condici\u00f3n No, puede ser infinito si no se actualiza la condici\u00f3n <p>A su vez, cada construcci\u00f3n admite flujos de control (<code>break</code>, <code>continue</code>, <code>else</code>) y combinaciones avanzadas (<code>else</code>, <code>else</code> + <code>continue</code>, <code>else</code> + <code>break</code>).  </p>"},{"location":"content/p3/#2-ciclo-for","title":"2. Ciclo <code>for</code>","text":""},{"location":"content/p3/#21-sintaxis-basica","title":"2.1 Sintaxis b\u00e1sica","text":"<pre><code>for variable in iterable:\n    # bloque a repetir\nelse:          # opcional\n    # se ejecuta si NO hubo break\n</code></pre>"},{"location":"content/p3/#22-objetos-iterables-mas-usados","title":"2.2 Objetos iterables m\u00e1s usados","text":"Iterable Ejemplo \u00bfQu\u00e9 recorre? <code>range()</code> <code>range(5)</code> N\u00fameros enteros <code>list</code> <code>[1, 2, 3]</code> Elementos de la lista <code>str</code> <code>\"abc\"</code> Caracteres <code>dict</code> <code>{\"a\": 1, \"b\": 2}</code> Claves (por defecto) <code>enumerate()</code> <code>enumerate([\"x\", \"y\"])</code> Pares (\u00edndice, elemento) <code>zip()</code> <code>zip(l1, l2)</code> Tuplas emparejadas Generador <code>(x**2 for x in range(3))</code> Valores producidos bajo demanda"},{"location":"content/p3/#23-ejemplos-paso-a-paso","title":"2.3 Ejemplos paso a paso","text":""},{"location":"content/p3/#231-recorrer-un-rango","title":"2.3.1 Recorrer un rango","text":"<pre><code>for n in range(1, 6):      # 1,2,3,4,5\n    print(\"n =\", n)\n</code></pre>"},{"location":"content/p3/#232-recorrer-una-lista-con-desempaquetado","title":"2.3.2 Recorrer una lista con desempaquetado","text":"<pre><code>productos = [(\"Manzanas\", 3), (\"Peras\", 5)]\nfor nombre, cantidad in productos:\n    print(f\"{nombre}: {cantidad} kg\")\n</code></pre>"},{"location":"content/p3/#233-recorrer-diccionarios","title":"2.3.3 Recorrer diccionarios","text":"<pre><code>precios = {\"manzana\": 1.2, \"pera\": 0.9}\nfor fruta, precio in precios.items():\n    print(f\"{fruta} cuesta ${precio}\")\n</code></pre>"},{"location":"content/p3/#234-usar-enumerate-para-indice-valor","title":"2.3.4 Usar <code>enumerate</code> para \u00edndice + valor","text":"<pre><code>palabras = [\"sol\", \"luna\", \"estrella\"]\nfor idx, pal in enumerate(palabras, start=1):\n    print(f\"{idx}. {pal}\")\n</code></pre>"},{"location":"content/p3/#235-recorrer-dos-listas-al-mismo-tiempo-zip","title":"2.3.5 Recorrer dos listas al mismo tiempo (<code>zip</code>)","text":"<pre><code>nombres = [\"Ana\", \"Luis\", \"Eva\"]\nedades = [25, 30, 22]\nfor nom, ed in zip(nombres, edades):\n    print(f\"{nom} tiene {ed} a\u00f1os\")\n</code></pre>"},{"location":"content/p3/#236-bucle-anidado-nested-for","title":"2.3.6 Bucle anidado (nested for)","text":"<pre><code>for i in range(1, 4):\n    for j in range(1, 3):\n        print(f\"i={i}, j={j}\")\n</code></pre>"},{"location":"content/p3/#237-comprension-de-listas-for-en-una-sola-linea","title":"2.3.7 Comprensi\u00f3n de listas (for en una sola l\u00ednea)","text":"<pre><code>cuadrados = [x**2 for x in range(5)]   # [0, 1, 4, 9, 16]\n</code></pre>"},{"location":"content/p3/#3-ciclo-while","title":"3. Ciclo <code>while</code>","text":""},{"location":"content/p3/#31-sintaxis-basica","title":"3.1 Sintaxis b\u00e1sica","text":"<pre><code>while condici\u00f3n:\n    # bloque a repetir\nelse:          # opcional\n    # se ejecuta si la condici\u00f3n es falsa y NO hubo break\n</code></pre>"},{"location":"content/p3/#32-ejemplos-paso-a-paso","title":"3.2 Ejemplos paso a paso","text":""},{"location":"content/p3/#321-contador-simple","title":"3.2.1 Contador simple","text":"<pre><code>cont = 0\nwhile cont &lt; 3:\n    print(cont)\n    cont += 1\n</code></pre>"},{"location":"content/p3/#322-lectura-hasta-sentinela","title":"3.2.2 Lectura hasta sentinela","text":"<pre><code>total = 0\nwhile True:\n    n = input(\"N\u00famero (q para salir): \")\n    if n == \"q\":\n        break\n    total += float(n)\nprint(\"Total:\", total)\n</code></pre>"},{"location":"content/p3/#323-re-try-con-continue","title":"3.2.3 Re-try con <code>continue</code>","text":"<pre><code>import random\nwhile True:\n    dado = random.randint(1, 6)\n    if dado == 6:\n        continue           # volver a tirar\n    print(\"Sacaste\", dado)\n    break                  # terminar\n</code></pre>"},{"location":"content/p3/#324-else-en-while","title":"3.2.4 <code>else</code> en while","text":"<pre><code>i = 0\nwhile i &lt; 3:\n    print(i)\n    i += 1\nelse:\n    print(\"Termin\u00f3 sin break\")\n</code></pre>"},{"location":"content/p3/#4-flujos-de-control-dentro-de-ciclos","title":"4. Flujos de control dentro de ciclos","text":"Sentencia Qu\u00e9 hace Ejemplo <code>break</code> Salir del ciclo inmediatamente <code>if x &lt; 0: break</code> <code>continue</code> Saltar al siguiente ciclo <code>if x % 2 == 0: continue</code> <code>else</code> Ejecutar solo si no hubo <code>break</code> Ver secciones anteriores"},{"location":"content/p3/#5-ciclos-infinitos-y-sus-formas-de-salir","title":"5. Ciclos \u201cinfinitos\u201d y sus formas de salir","text":"<pre><code># Opci\u00f3n 1: while True + break\nwhile True:\n    opcion = input(\"&gt; \")\n    if opcion == \"salir\":\n        break\n\n# Opci\u00f3n 2: flag externa\nseguir = True\nwhile seguir:\n    ...\n    if condicion:\n        seguir = False\n</code></pre>"},{"location":"content/p3/#6-iteradores-y-generadores-avanzado","title":"6. Iteradores y generadores (avanzado)","text":""},{"location":"content/p3/#61-uso-de-iter-y-next","title":"6.1 Uso de <code>iter()</code> y <code>next()</code>","text":"<pre><code>it = iter([10, 20, 30])\nprint(next(it))  # 10\nprint(next(it))  # 20\n</code></pre>"},{"location":"content/p3/#7-resumen-visual","title":"7. Resumen visual","text":"<pre><code>graph TD\n    A[Ciclo] --&gt;|determinista| B[for]\n    A --&gt;|condicional| C[while]\n    B --&gt; D[range]\n    B --&gt; E[listas]\n    B --&gt; F[dict]\n    B --&gt; G[enumerate/zip]\n    C --&gt; H[condici\u00f3n]\n    C --&gt; I[break/continue]</code></pre>"},{"location":"content/p3/#8-mejores-practicas-y-recomendaciones","title":"8. Mejores pr\u00e1cticas y recomendaciones","text":"<ol> <li>Preferir <code>for</code> sobre <code>while</code> cuando se conoce la cantidad de iteraciones.</li> <li>Evitar ciclos infinitos sin mecanismo de salida claro.</li> <li>Usar nombres descriptivos para variables de control.</li> <li>Aprovechar <code>enumerate</code> y <code>zip</code> para c\u00f3digo m\u00e1s legible.</li> </ol>"},{"location":"content/p3s/","title":"Soluci\u00f3n","text":""},{"location":"content/p3s/#ejercicio_01py","title":"ejercicio_01.py","text":"<pre><code># Imprimir los n\u00fameros del 0 al 9 con for\nfor i in range(10):\n    print(i)\n</code></pre>"},{"location":"content/p3s/#ejercicio_02py","title":"ejercicio_02.py","text":"<pre><code># Imprimir los n\u00fameros del 10 al 1 con while\nn = 10\nwhile n &gt;= 1:\n    print(n)\n    n -= 1\n</code></pre>"},{"location":"content/p3s/#ejercicio_03py","title":"ejercicio_03.py","text":"<pre><code># Suma del 1 al 100 con for\ntotal = 0\nfor i in range(1, 101):\n    total += i\nprint(total)\n</code></pre>"},{"location":"content/p3s/#ejercicio_04py","title":"ejercicio_04.py","text":"<pre><code># Sumar n\u00fameros hasta que el usuario ingrese 0 con while\nsuma = 0\nwhile True:\n    num = float(input(\"Ingresa n\u00famero (0 para terminar): \"))\n    if num == 0:\n        break\n    suma += num\nprint(\"Suma total:\", suma)\n</code></pre>"},{"location":"content/p3s/#ejercicio_05py","title":"ejercicio_05.py","text":"<pre><code># Tabla de multiplicar del 7 con for\nfor i in range(1, 11):\n    print(f\"7 x {i} = {7 * i}\")\n</code></pre>"},{"location":"content/p3s/#ejercicio_06py","title":"ejercicio_06.py","text":"<pre><code># Primeros 15 m\u00faltiplos de 3 con while\ncont = 1\nwhile cont &lt;= 15:\n    print(cont * 3)\n    cont += 1\n</code></pre>"},{"location":"content/p3s/#ejercicio_07py","title":"ejercicio_07.py","text":"<pre><code># Contar letras 'a' en \"manzana\" con for\ntexto = \"manzana\"\ncant = 0\nfor letra in texto:\n    if letra == 'a':\n        cant += 1\nprint(cant)\n</code></pre>"},{"location":"content/p3s/#ejercicio_08py","title":"ejercicio_08.py","text":"<pre><code># Cuadrados del 1 al 20 con while\nn = 1\nwhile n &lt;= 20:\n    print(n ** 2)\n    n += 1\n</code></pre>"},{"location":"content/p3s/#ejercicio_09py","title":"ejercicio_09.py","text":"<pre><code># Pares del 2 al 50 con for\nfor n in range(2, 51, 2):\n    print(n)\n</code></pre>"},{"location":"content/p3s/#ejercicio_10py","title":"ejercicio_10.py","text":"<pre><code># Contar palabras hasta \"fin\" con while\ncont = 0\nwhile True:\n    palabra = input(\"Palabra (fin para terminar): \")\n    if palabra == \"fin\":\n        break\n    cont += 1\nprint(\"Palabras le\u00eddas:\", cont)\n</code></pre>"},{"location":"content/p3s/#ejercicio_11py","title":"ejercicio_11.py","text":"<pre><code># Imprimir cada car\u00e1cter de \"python\" con for\nfor ch in \"python\":\n    print(ch)\n</code></pre>"},{"location":"content/p3s/#ejercicio_12py","title":"ejercicio_12.py","text":"<pre><code># Factorial de n con while\nn = int(input(\"Introduce n: \"))\nfactorial = 1\ni = 1\nwhile i &lt;= n:\n    factorial *= i\n    i += 1\nprint(\"Factorial:\", factorial)\n</code></pre>"},{"location":"content/p3s/#ejercicio_13py","title":"ejercicio_13.py","text":"<pre><code># N\u00fameros del 1 al 30 de 3 en 3 con for\nfor n in range(1, 30, 3):\n    print(n)\n</code></pre>"},{"location":"content/p3s/#ejercicio_14py","title":"ejercicio_14.py","text":"<pre><code># Adivinar n\u00famero del 1 al 10 con while\nimport random\nsecreto = random.randint(1, 10)\nwhile True:\n    intento = int(input(\"Adivina (1-10): \"))\n    if intento == secreto:\n        print(\"\u00a1Acertaste!\")\n        break\n    print(\"Int\u00e9ntalo de nuevo.\")\n</code></pre>"},{"location":"content/p3s/#ejercicio_15py","title":"ejercicio_15.py","text":"<pre><code># Tri\u00e1ngulo de asteriscos de 5 filas con for\nfor i in range(1, 6):\n    print(\"*\" * i)\n</code></pre>"},{"location":"content/p3s/#ejercicio_16py","title":"ejercicio_16.py","text":"<pre><code># Reloj de 00:00 a 00:59 con while\nminutos = 0\nsegundos = 0\nwhile minutos &lt; 1:\n    print(f\"{minutos:02d}:{segundos:02d}\")\n    segundos += 1\n    if segundos == 60:\n        segundos = 0\n        minutos += 1\n</code></pre>"},{"location":"content/p3s/#ejercicio_17py","title":"ejercicio_17.py","text":"<pre><code># Suma de d\u00edgitos de un n\u00famero con for\nnum = input(\"Introduce n\u00famero: \")\nsuma = 0\nfor d in num:\n    suma += int(d)\nprint(\"Suma de d\u00edgitos:\", suma)\n</code></pre>"},{"location":"content/p3s/#ejercicio_18py","title":"ejercicio_18.py","text":"<pre><code># Fibonacci hasta superar 1000 con while\na, b = 1, 1\nwhile a &lt;= 1000:\n    print(a)\n    a, b = b, a + b\n</code></pre>"},{"location":"content/p3s/#ejercicio_19py","title":"ejercicio_19.py","text":"<pre><code># Contar vocales en frase con for\nfrase = \"programacion es divertida\"\nvocales = \"aeiou\u00e1\u00e9\u00ed\u00f3\u00fa\"\ncont = 0\nfor letra in frase.lower():\n    if letra in vocales:\n        cont += 1\nprint(\"Vocales:\", cont)\n</code></pre>"},{"location":"content/p3s/#ejercicio_20py","title":"ejercicio_20.py","text":"<pre><code># Edad mayor introducida con while\nmayor = -1\nwhile True:\n    edad = int(input(\"Edad (-1 para terminar): \"))\n    if edad == -1:\n        break\n    if edad &gt; mayor:\n        mayor = edad\nprint(\"Edad mayor:\", mayor)\n</code></pre>"},{"location":"content/p4/","title":"Semana 4 - Estructuras de control (bucles) y Estructuras de datos - Colecciones en Python","text":"<p>En Python, las estructuras de control repetitivas se utilizan para ejecutar una o m\u00e1s instrucciones de manera repetitiva mientras se cumpla una condici\u00f3n determinada. Las estructuras de control repetitivas en Python son: Bucle while, Bucle for</p>"},{"location":"content/p4/#bucle-while","title":"Bucle while","text":"<p>Bucle while: El bucle while se utiliza para ejecutar un conjunto de instrucciones mientras se cumpla una determinada condici\u00f3n. La sintaxis del bucle while en Python es la siguiente:</p> <pre><code>while condici\u00f3n:\n    # bloque de instrucciones a ejecutar mientras la condici\u00f3n sea verdadera\n</code></pre>"},{"location":"content/p4/#formas-de-usar-el-bucle-for-en-python","title":"Formas de usar el bucle for en Python:","text":""},{"location":"content/p4/#bucle-while-basico","title":"Bucle while b\u00e1sico","text":"<pre><code>contador = 0\nwhile contador &lt; 5:\n    print(contador)\n    contador += 1\n</code></pre>"},{"location":"content/p4/#while-infinito","title":"While infinito","text":"<pre><code>while True:\n    pass\n</code></pre>"},{"location":"content/p4/#romper-el-bucle","title":"Romper el bucle","text":"<pre><code>contador = 0\nwhile contador &lt; 5:\n    print(contador)\n    if contador == 2:\n        break\n    contador += 1\n</code></pre>"},{"location":"content/p4/#continuar-la-iteracion","title":"Continuar la iteraci\u00f3n","text":"<pre><code>contador = 0\nwhile contador &lt; 5:\n    contador += 1\n    if contador == 2:\n        continue\n    print(contador)\n</code></pre>"},{"location":"content/p4/#while-con-else","title":"While con else","text":"<pre><code>contador = 0\nwhile contador &lt; 5:\n    print(contador)\n    contador += 1\nelse:\n    print(\"Fin del bucle while\")\n</code></pre>"},{"location":"content/p4/#while-anidado","title":"While anidado","text":"<pre><code>contador1 = 2\nwhile contador1 &lt; 5:\n    contador2 = 0\n    while contador2 &lt; 5:\n        print(contador1, contador2)\n        contador2 += 1\n    contador1 += 1\n</code></pre>"},{"location":"content/p4/#ejercicios-resueltos-bucle-while","title":"Ejercicios resueltos bucle while","text":"<ol> <li>Pedir al usuario que adivine un n\u00famero secreto. El usuario tendr\u00e1 un n\u00famero limitado de intentos para adivinar el n\u00famero. Si no lo adivina en ese n\u00famero de intentos, el programa le dir\u00e1 que perdi\u00f3.</li> </ol> <pre><code>import random\n\nnumero_secreto = random.randint(1, 20)\nintentos = 0\nmax_intentos = 5\nadivinado = False\n\nprint(\"Estoy pensando en un n\u00famero entre 1 y 20.\")\nwhile intentos &lt; max_intentos and not adivinado:\n    intento = int(input(\"Intenta adivinar el n\u00famero: \"))\n    intentos += 1\n    if intento == numero_secreto:\n        print(\"\u00a1Correcto! Adivinaste el n\u00famero en\", intentos, \"intentos.\")\n        adivinado = True\n    elif intento &lt; numero_secreto:\n        print(\"El n\u00famero es mayor que\", intento)\n    else:\n        print(\"El n\u00famero es menor que\", intento)\n\nif not adivinado:\n    print(\"Lo siento, no adivinaste el n\u00famero en el n\u00famero m\u00e1ximo de intentos.\")\n    print(\"El n\u00famero secreto era\", numero_secreto)\n</code></pre> <ol> <li>Pedir al usuario que ingrese una cadena y contar la cantidad de letras que contiene.</li> </ol> <pre><code>cadena = input(\"Ingresa una cadena: \")\ni = 0\ncontador = 0\nwhile i &lt; len(cadena):\n    if cadena[i].isalpha():\n        contador += 1\n    i += 1\nprint(\"La cadena tiene\", contador, \"letras.\")\n</code></pre> <ol> <li>Pedir al usuario que ingrese un n\u00famero entero positivo y mostrar su tabla de multiplicar.</li> </ol> <pre><code>numero = int(input(\"Ingresa un n\u00famero entero positivo: \"))\ni = 1\nwhile i &lt;= 10:\n    print(numero, \"x\", i, \"=\", numero*i)\n    i += 1\n</code></pre> <ol> <li>Pedir al usuario que ingrese una lista de n\u00fameros y calcular su promedio.</li> </ol> <pre><code>lista = input(\"Ingresa una lista de n\u00fameros separados por comas: \")\nlista = lista.split(\",\")\ni = 0\nsuma = 0\nwhile i &lt; len(lista):\n    suma += int(lista[i])\n    i += 1\n\npromedio = suma / len(lista)\nprint(\"El promedio de la lista es\", promedio)\n</code></pre>"},{"location":"content/p4/#bucle-for","title":"Bucle for","text":"<p>El bucle for se utiliza para recorrer una secuencia de elementos, como una lista o una cadena, y ejecutar un conjunto de instrucciones para cada elemento. La sintaxis del bucle for en Python es la siguiente:</p> <pre><code>for variable in secuencia:\n    # bloque de instrucciones a ejecutar para cada elemento de la secuencia\n</code></pre>"},{"location":"content/p4/#formas-de-usar-el-bucle-for-en-python_1","title":"Formas de usar el bucle for en Python:","text":""},{"location":"content/p4/#bucle-for-basico","title":"Bucle for b\u00e1sico","text":"<pre><code>for i in range(1, 6):\n    print(i)\n</code></pre>"},{"location":"content/p4/#recorrer-una-lista","title":"Recorrer una lista","text":"<pre><code>frutas = ['manzana', 'banana', 'zanahoria']\nfor fruta in frutas:\n    print(fruta)\n</code></pre>"},{"location":"content/p4/#iterar-sobre-una-cadena","title":"Iterar sobre una cadena","text":"<pre><code>for letra in \"Hola\":\n    print(letra)\n</code></pre>"},{"location":"content/p4/#iterar-en-pasos","title":"Iterar en pasos","text":"<pre><code>for i in range(0, 10, 2):\n    print(i)\n</code></pre>"},{"location":"content/p4/#iterar-sobre-diccionarios","title":"Iterar sobre diccionarios","text":"<pre><code>dicc = {'a': 1, 'b': 2, 'c': 3}\nfor llave in dicc:\n    print(llave)\n\nfor llave in dicc.keys():\n    print(llave)\n\nfor valor in dicc.values():\n    print(valor)\n\nfor llave, valor in dicc.items():\n    print(llave, valor)\n</code></pre>"},{"location":"content/p4/#rango-personalizado","title":"Rango personalizado","text":"<pre><code>import random\n\nmi_lista = [random.randint(1, 10) for i in range(10)]\nfor i in mi_lista:\n    print(i)\n</code></pre>"},{"location":"content/p4/#break","title":"Break","text":"<pre><code>for i in range(1, 11):\n    if i == 5:\n        break\n    print(i)\n</code></pre>"},{"location":"content/p4/#continue","title":"Continue","text":"<pre><code>for i in range(1, 11):\n    if i % 2 == 0:\n        continue\n    print(i)\n</code></pre>"},{"location":"content/p4/#ejercicios-resueltos-bucle-for","title":"Ejercicios resueltos bucle for","text":"<ol> <li>Pedir al usuario que ingrese una palabra y mostrarla en orden inverso.</li> </ol> <pre><code>palabra = input(\"Ingresa una palabra: \")\ninverso = \"\"\nfor letra in palabra:\n    inverso = letra + inverso\nprint(\"La palabra en orden inverso es:\", inverso)\n</code></pre> <ol> <li>Pedir al usuario que ingrese una cadena de texto y mostrar solamente las letras may\u00fasculas utilizando un ciclo for.</li> </ol> <pre><code>cadena = input(\"Ingresa una cadena de texto: \")\nfor letra in cadena:\n    if letra.isupper():\n        print(letra)\n</code></pre> <ol> <li>Pedir al usuario que ingrese una cadena de texto y contar cu\u00e1ntas palabras tiene utilizando un ciclo for</li> </ol> <pre><code>cadena = input(\"Ingresa una cadena de texto: \")\npalabras = cadena.split()\ncontador = 0\nfor palabra in palabras:\n    contador += 1\nprint(\"La cadena de texto ingresada tiene\", contador, \"palabras.\")\n</code></pre> <ol> <li>Imprime los m\u00faltiplos de 7 entre 0 y 100:</li> </ol> <pre><code>for i in range(0,101):\n    if i % 7 == 0:\n        print(i)\n</code></pre>"},{"location":"content/p4/#estructuras-de-datos-colecciones-en-python","title":"Estructuras de datos - Colecciones en Python","text":"<p>En Python, una colecci\u00f3n es una estructura de datos que puede almacenar varios elementos. Hay varios tipos de colecciones en Python, cada una con diferentes propiedades y usos.</p> <p>Aqu\u00ed hay una breve descripci\u00f3n de las principales colecciones en Python:</p> <ul> <li>Listas: son colecciones ordenadas y modificables que pueden contener elementos de diferentes tipos de datos.</li> <li>Tuplas: son colecciones ordenadas e inmutables que pueden contener elementos de diferentes tipos de datos.</li> <li>Conjuntos: son colecciones no ordenadas y no indexadas que no permiten elementos duplicados.</li> <li>Diccionarios: son colecciones no ordenadas pero modificables que consisten en pares clave-valor. Aqu\u00ed hay algunos ejemplos de c\u00f3mo crear e interactuar con estas colecciones:</li> </ul> <pre><code># Creamos una lista con algunos elementos\nmy_list = [1, 2, 3, 'cuatro', 'cinco']\n\n# Accedemos a un elemento de la lista\nprint(my_list[0])  # Salida: 1\n\n# Creamos una tupla con algunos elementos\nmy_tuple = (1, 2, 3, 'cuatro', 'cinco')\n\n# Accedemos a un elemento de la tupla\nprint(my_tuple[0])  # Salida: 1\n\n# Creamos un conjunto con algunos elementos\nmy_set = {1, 2, 3, 4, 5}\n\n# Accedemos a un elemento del conjunto (no es posible porque los conjuntos no tienen \u00edndices)\n# En cambio, podemos verificar si un elemento est\u00e1 en el conjunto\nprint(3 in my_set)  # Salida: True\n\n# Creamos un diccionario con algunas claves y valores\nmy_dict = {'nombre': 'Juan', 'edad': 30, 'ciudad': 'Buenos Aires'}\n\n# Accedemos a un valor del diccionario mediante su clave\nprint(my_dict['nombre'])  # Salida: Juan\n</code></pre>"},{"location":"content/p4/#listas","title":"Listas","text":"<p>En Python, una lista es una colecci\u00f3n ordenada y modificable de elementos. Las listas pueden contener elementos de diferentes tipos de datos, como n\u00fameros, cadenas, booleanos, entre otros. Las listas en Python son muy \u00fatiles para almacenar y manipular grandes cantidades de datos.</p> <p>Aqu\u00ed hay un ejemplo de c\u00f3mo crear y utilizar una lista en Python, que incluye algunas de las caracter\u00edsticas y m\u00e9todos m\u00e1s comunes de las listas:</p> <p><pre><code># Creamos una lista con algunos elementos\nmy_list = [1, 2, 3, 'cuatro', 'cinco', 6.7, True]\n\n# Accedemos a un elemento de la lista\nprint(my_list[0])  # Salida: 1\n\n# Podemos utilizar \u00edndices negativos para acceder a los elementos desde el final de la lista\nprint(my_list[-1])  # Salida: True\n\n# Podemos reemplazar un elemento de la lista asignando un nuevo valor a su \u00edndice\nmy_list[2] = 'tres'\nprint(my_list)  # Salida: [1, 2, 'tres', 'cuatro', 'cinco', 6.7, True]\n\n# Podemos agregar un nuevo elemento al final de la lista con el m\u00e9todo append()\nmy_list.append('seis')\nprint(my_list)  # Salida: [1, 2, 'tres', 'cuatro', 'cinco', 6.7, True, 'seis']\n\n# Podemos insertar un nuevo elemento en una posici\u00f3n espec\u00edfica de la lista con el m\u00e9todo insert()\nmy_list.insert(4, '4.5')\nprint(my_list)  # Salida: [1, 2, 'tres', 'cuatro', '4.5', 'cinco', 6.7, True, 'seis']\n\n# Podemos eliminar un elemento de la lista con el m\u00e9todo remove()\nmy_list.remove('tres')\nprint(my_list)  # Salida: [1, 2, 'cuatro', '4.5', 'cinco', 6.7, True, 'seis']\n\n# Podemos ordenar los elementos de la lista con el m\u00e9todo sort()\nmy_list.sort()\nprint(my_list)  # Salida: [1, True, 2, 4.5, 6.7, 'cinco', 'cuatro', 'seis']\n\n# Podemos contar la cantidad de veces que aparece un elemento en la lista con el m\u00e9todo count()\nprint(my_list.count(1))  # Salida: 1\n\n# Podemos encontrar el \u00edndice de un elemento en la lista con el m\u00e9todo index()\nprint(my_list.index('cuatro'))  # Salida: 6\n\n# Podemos eliminar el \u00faltimo elemento de la lista con el m\u00e9todo pop()\nmy_list.pop()\nprint(my_list)  # Salida: [1, True, 2, 4.5, 6.7, 'cinco', 'cuatro']\n\n# Podemos obtener la longitud de la lista con la funci\u00f3n len()\nprint(len(my_list))  # Salida: 7\n</code></pre> Estos son solo algunos de los m\u00e9todos y caracter\u00edsticas m\u00e1s comunes de las listas en Python. Hay muchos m\u00e1s que puedes explorar en la documentaci\u00f3n oficial de Python.</p> <p>https://docs.python.org/es/3/tutorial/datastructures.html#</p>"},{"location":"content/p4/#metodos-de-las-listas","title":"M\u00e9todos de las listas","text":"<ul> <li>append() - Agrega un elemento al final de la lista.</li> <li>extend() - Agrega los elementos de otra lista al final de la lista actual.</li> <li>insert() - Inserta un elemento en una posici\u00f3n espec\u00edfica de la lista.</li> <li>pop() - Elimina un elemento del final de la lista y lo devuelve.</li> <li>remove() - Elimina el primer elemento de la lista que coincide con el argumento dado.</li> <li>count() - Cuenta el n\u00famero de veces que aparece un elemento en la lista.</li> <li>index() - Devuelve el \u00edndice de la primera aparici\u00f3n de un elemento en la lista.</li> <li>sort() - Ordena los elementos de la lista en orden ascendente.</li> <li>reverse() - Ordena los elementos de la lista en orden descendente.</li> <li>clear() - Elimina todos los elementos de la lista.</li> </ul>"},{"location":"content/p4/#ejercicios-de-listas","title":"Ejercicios de listas","text":"<ol> <li>Dada una lista de n\u00fameros enteros, escribe una funci\u00f3n que devuelva una nueva lista con los n\u00fameros pares de la lista original.</li> </ol> <p><pre><code>def numeros_pares(lista):\n    pares = []\n    for num in lista:\n        if num % 2 == 0:\n            pares.append(num)\n    return pares\n\nnumeros = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(numeros_pares(numeros))  # Salida: [2, 4, 6, 8]\n</code></pre> 2. Dada una lista de palabras, escribe una funci\u00f3n que devuelva una nueva lista con las palabras que tienen m\u00e1s de 5 letras.</p> <p><pre><code>def palabras_largas(lista):\n    largas = []\n    for palabra in lista:\n        if len(palabra) &gt; 5:\n            largas.append(palabra)\n    return largas\n\npalabras = ['manzana', 'banana', 'naranja', 'pera', 'sand\u00eda', 'kiwi']\nprint(palabras_largas(palabras))  # Salida: ['manzana', 'banana', 'naranja', 'sand\u00eda']\n</code></pre> Hay muchos m\u00e1s que puedes explorar en la documentaci\u00f3n oficial de Python.</p> <p>https://docs.python.org/es/3/tutorial/datastructures.html#more-on-lists</p>"},{"location":"content/p4/#tuplas","title":"Tuplas","text":"<p>En Python, una tupla es una colecci\u00f3n ordenada e inmutable de elementos que pueden ser de diferentes tipos de datos. La principal diferencia entre las tuplas y las listas es que las tuplas no se pueden modificar una vez creadas, mientras que las listas pueden ser modificadas.</p> <p>Aqu\u00ed hay un ejemplo de c\u00f3mo crear y usar una tupla en Python:</p> <p><pre><code># Creamos una tupla con algunos elementos\nmi_tupla = (1, 2, 'tres', True)\n\n# Accedemos a un elemento de la tupla\nprint(mi_tupla[0])  # Salida: 1\n\n# Intentamos modificar un elemento de la tupla (esto dar\u00e1 un error porque las tuplas son inmutables)\n# mi_tupla[0] = 5  # TypeError: 'tuple' object does not support item assignment\n\n# Convertimos la tupla en una lista para poder modificarla\nmi_lista = list(mi_tupla)\n\n# Modificamos un elemento de la lista\nmi_lista[0] = 5\n\n# Convertimos la lista de nuevo en una tupla\nmi_tupla = tuple(mi_lista)\n\n# Accedemos a un elemento de la tupla modificado\nprint(mi_tupla[0])  # Salida: 5\n\n# Contamos cu\u00e1ntas veces aparece un elemento en la tupla\nprint(mi_tupla.count(2))  # Salida: 1\n\n# Encontramos el \u00edndice de la primera aparici\u00f3n de un elemento en la tupla\nprint(mi_tupla.index('tres'))  # Salida: 2\n</code></pre> En este ejemplo, creamos una tupla mi_tupla con cuatro elementos, y luego intentamos modificar un elemento de la tupla, lo cual da un error porque las tuplas son inmutables. En cambio, convertimos la tupla en una lista, modificamos un elemento de la lista, y luego convertimos la lista de nuevo en una tupla. Luego, utilizamos los m\u00e9todos count e index para contar cu\u00e1ntas veces aparece un elemento en la tupla y encontrar el \u00edndice de la primera aparici\u00f3n de un elemento en la tupla, respectivamente. Es importante tener en cuenta que las tuplas son \u00fatiles cuando se desea tener una colecci\u00f3n ordenada e inmutable de elementos. Si se desea modificar los elementos de la colecci\u00f3n, es mejor utilizar una lista en su lugar.</p>"},{"location":"content/p4/#metodos-de-las-tuplas","title":"M\u00e9todos de las tuplas","text":"<ul> <li>count() - Cuenta el n\u00famero de veces que un elemento aparece en la tupla.</li> <li>index() - Devuelve el \u00edndice de la primera aparici\u00f3n de un elemento en la tupla.</li> <li>len() - Devuelve la longitud de la tupla.</li> <li>min() - Devuelve el elemento m\u00e1s peque\u00f1o en la tupla.</li> <li>max() - Devuelve el elemento m\u00e1s grande en la tupla.</li> <li>sorted() - Ordena los elementos de la tupla en orden ascendente.</li> <li>sum() - Suma los elementos de la tupla.</li> </ul>"},{"location":"content/p4/#ejercicios-de-tuplas","title":"Ejercicios de tuplas","text":"<ol> <li>Dadas dos tuplas de n\u00fameros enteros del mismo tama\u00f1o, escribe una funci\u00f3n que devuelva una nueva tupla con la suma de cada par de n\u00fameros correspondientes en las dos tuplas.</li> </ol> <p><pre><code>def suma_tuplas(tupla1, tupla2):\n    suma = ()\n    for i in range(len(tupla1)):\n        suma += (tupla1[i] + tupla2[i],)\n    return suma\n\ntupla1 = (1, 2, 3)\ntupla2 = (4, 5, 6)\nprint(suma_tuplas(tupla1, tupla2))  # Salida: (5, 7, 9)\n</code></pre> 2. Dada una tupla de cadenas de texto, escribe una funci\u00f3n que devuelva una nueva tupla con las cadenas de texto que tienen m\u00e1s de 5 caracteres.</p> <p><pre><code>def tupla_palabras_largas(tupla):\n    largas = ()\n    for palabra in tupla:\n        if len(palabra) &gt; 5:\n            largas += (palabra,)\n    return largas\n\ntupla = ('manzana', 'banana', 'naranja', 'pera', 'sand\u00eda', 'kiwi')\nprint(tupla_palabras_largas(tupla)) \n</code></pre> Hay muchos m\u00e1s que puedes explorar en la documentaci\u00f3n oficial de Python.</p> <p>https://docs.python.org/es/3/tutorial/datastructures.html#tuples-and-sequences</p>"},{"location":"content/p4/#conjuntos","title":"Conjuntos","text":"<p>Los conjuntos de datos en Python son una colecci\u00f3n no ordenada y no indexada de elementos \u00fanicos e inmutables. Es decir, los conjuntos no pueden contener elementos duplicados y sus elementos no se pueden modificar despu\u00e9s de haber sido agregados al conjunto. Los conjuntos son muy \u00fatiles para realizar operaciones matem\u00e1ticas como uni\u00f3n, intersecci\u00f3n y diferencia de conjuntos.</p> <p>Aqu\u00ed hay un ejemplo de c\u00f3mo utilizar conjuntos en Python, utilizando algunos de sus m\u00e9todos y caracter\u00edsticas:</p> <p><pre><code># Creamos un conjunto con algunos elementos\nmy_set = {1, 2, 3, 4, 5}\n\n# Agregamos un elemento al conjunto\nmy_set.add(6)\n\n# Eliminamos un elemento del conjunto\nmy_set.remove(2)\n\n# Verificamos si un elemento est\u00e1 en el conjunto\nprint(3 in my_set)  # Salida: True\n\n# Creamos otro conjunto con algunos elementos\nother_set = {4, 5, 6, 7}\n\n# Realizamos la uni\u00f3n de dos conjuntos\nunion_set = my_set.union(other_set)\nprint(union_set)  # Salida: {1, 3, 4, 5, 6, 7}\n\n# Realizamos la intersecci\u00f3n de dos conjuntos\nintersection_set = my_set.intersection(other_set)\nprint(intersection_set)  # Salida: {4, 5, 6}\n\n# Realizamos la diferencia de dos conjuntos\ndifference_set = my_set.difference(other_set)\nprint(difference_set)  # Salida: {1, 3}\n\n# Vaciamos el conjunto\nmy_set.clear()\nprint(my_set)  # Salida: set()\n</code></pre> Como se puede ver en el ejemplo anterior, los conjuntos de datos en Python ofrecen una serie de m\u00e9todos \u00fatiles para trabajar con elementos \u00fanicos e inmutables. Algunos de los m\u00e9todos comunes de los conjuntos incluyen add(), remove(), union(), intersection(), difference() y clear().</p>"},{"location":"content/p4/#metodos-de-los-conjuntos","title":"M\u00e9todos de los conjuntos","text":"<ul> <li>add() - Agrega un elemento al conjunto.</li> <li>update() - Agrega los elementos de otro conjunto al conjunto actual.</li> <li>remove() - Elimina un elemento del conjunto.</li> <li>discard() - Elimina un elemento del conjunto si est\u00e1 presente.</li> <li>pop() - Elimina un elemento aleatorio del conjunto.</li> <li>clear() - Elimina todos los elementos del conjunto.</li> <li>isdisjoint() - Comprueba si dos conjuntos son disjuntos.</li> <li>issubset() - Comprueba si un conjunto es subconjunto de otro conjunto.</li> <li>issuperset() - Comprueba si un conjunto es superconjunto de otro conjunto.</li> <li>union() - Devuelve la uni\u00f3n de dos conjuntos.</li> <li>intersection() - Devuelve la intersecci\u00f3n de dos conjuntos.</li> <li>difference() - Devuelve la diferencia de dos conjuntos.</li> <li>symmetric_difference() - Devuelve la diferencia sim\u00e9trica de dos conjuntos.</li> </ul>"},{"location":"content/p4/#ejercicios-de-conjuntos","title":"Ejercicios de conjuntos","text":"<ol> <li>Dadas dos listas de n\u00fameros enteros, escribe una funci\u00f3n que devuelva un conjunto con los n\u00fameros que aparecen en ambas listas.</li> </ol> <p><pre><code>def numeros_comunes(lista1, lista2):\n    set1 = set(lista1)\n    set2 = set(lista2)\n    comunes = set1.intersection(set2)\n    return comunes\n\nlista1 = [1, 2, 3, 4, 5]\nlista2 = [4, 5, 6, 7, 8]\nprint(numeros_comunes(lista1, lista2))  # Salida: {4, 5}\n</code></pre> 2. Dada una lista de n\u00fameros enteros, escribe una funci\u00f3n que devuelva un conjunto con los n\u00fameros \u00fanicos en la lista.</p> <p><pre><code>def numeros_unicos(lista):\n    unicos = set(lista)\n    return unicos\n\nlista = [1, 2, 3, 3, 4, 4, 5, 5, 5]\nprint(numeros_unicos(lista))  # Salida: {1, 2, 3, 4, 5}\n</code></pre> Hay muchos m\u00e1s que puedes explorar en la documentaci\u00f3n oficial de Python.</p> <p>https://docs.python.org/es/3/tutorial/datastructures.html#sets</p>"},{"location":"content/p4/#diccionarios","title":"Diccionarios","text":"<p>Los diccionarios en Python son una estructura de datos que nos permiten almacenar informaci\u00f3n en forma de pares de clave-valor. Cada clave es \u00fanica y se utiliza para acceder a su valor correspondiente. Los diccionarios son mutables, lo que significa que podemos agregar, eliminar y actualizar elementos en ellos.</p> <p>Aqu\u00ed hay un ejemplo de c\u00f3mo crear y utilizar un diccionario en Python, con algunas de sus caracter\u00edsticas y m\u00e9todos:</p> <pre><code># Creamos un diccionario con algunos datos\npersona = {'nombre': 'Mar\u00eda', 'edad': 25, 'ciudad': 'Madrid'}\n\n# Accedemos a un valor del diccionario mediante su clave\nprint(persona['edad'])  # Salida: 25\n\n# Agregamos una nueva clave-valor al diccionario\npersona['profesion'] = 'Programadora'\nprint(persona)  # Salida: {'nombre': 'Mar\u00eda', 'edad': 25, 'ciudad': 'Madrid', 'profesion': 'Programadora'}\n\n# Eliminamos una clave-valor del diccionario\ndel persona['ciudad']\nprint(persona)  # Salida: {'nombre': 'Mar\u00eda', 'edad': 25, 'profesion': 'Programadora'}\n\n# Verificamos si una clave est\u00e1 en el diccionario\nprint('nombre' in persona)  # Salida: True\n\n# Obtenemos todas las claves del diccionario\nprint(persona.keys())  # Salida: dict_keys(['nombre', 'edad', 'profesion'])\n\n# Obtenemos todos los valores del diccionario\nprint(persona.values())  # Salida: dict_values(['Mar\u00eda', 25, 'Programadora'])\n\n# Obtenemos todos los pares clave-valor del diccionario\nprint(persona.items())  # Salida: dict_items([('nombre', 'Mar\u00eda'), ('edad', 25), ('profesion', 'Programadora')])\n</code></pre> <p>En este ejemplo, creamos un diccionario llamado persona con tres claves (nombre, edad y ciudad) y sus respectivos valores. Luego, accedimos al valor de la clave edad utilizando la sintaxis de indexaci\u00f3n de diccionario (persona['edad']).</p> <p>A continuaci\u00f3n, agregamos una nueva clave-valor al diccionario utilizando la sintaxis de asignaci\u00f3n de diccionario (persona['profesion'] = 'Programadora'). Tambi\u00e9n eliminamos la clave-valor ciudad utilizando el operador del.</p> <p>Luego, utilizamos algunos m\u00e9todos de diccionario para verificar si una clave est\u00e1 en el diccionario ('nombre' in persona), obtener todas las claves del diccionario (persona.keys()), todos los valores del diccionario (persona.values()) y todos los pares clave-valor del diccionario (persona.items()).</p> <p>Es importante tener en cuenta que los diccionarios en Python son muy \u00fatiles y vers\u00e1tiles, y que hay muchas formas diferentes de utilizarlos. Se recomienda leer la documentaci\u00f3n de Python para obtener m\u00e1s informaci\u00f3n sobre c\u00f3mo utilizar los diccionarios y sus m\u00e9todos.</p>"},{"location":"content/p4/#metodos-de-los-diccionarios","title":"M\u00e9todos de los diccionarios","text":"<ul> <li>get() - Obtiene el valor asociado con la clave dada.</li> <li>setdefault() - Asigna el valor dado a la clave dada, si la clave no existe.</li> <li>pop() - Elimina la clave y su valor asociado.</li> <li>popitem() - Elimina cualquier clave y su valor asociado del diccionario.</li> <li>update() - Actualiza el diccionario con los valores de otro diccionario.</li> <li>keys() - Devuelve una lista de las claves del diccionario.</li> <li>values() - Devuelve una lista de los valores del diccionario.</li> <li>items() - Devuelve una lista de tuplas, donde cada tupla contiene una clave y su valor asociado.</li> <li>len() - Devuelve el n\u00famero de elementos en el diccionario.</li> <li>clear() - Elimina todos los elementos del diccionario.</li> </ul>"},{"location":"content/p4/#ejercicios-de-diccionarios","title":"Ejercicios de diccionarios","text":"<ol> <li>Dado un diccionario que contiene nombres de personas y sus edades, escribe una funci\u00f3n que devuelva el nombre de la persona m\u00e1s joven.</li> </ol> <p><pre><code>def persona_mas_joven(diccionario):\n    edad_min = float('inf')\n    nombre = ''\n    for clave, valor in diccionario.items():\n        if valor &lt; edad_min:\n            edad_min = valor\n            nombre = clave\n    return nombre\n\nedades = {'Juan': 25, 'Mar\u00eda': 30, 'Pedro': 20, 'Ana': 28}\nprint(persona_mas_joven(edades))  # Salida: 'Pedro'\n</code></pre> 2. Dada una lista de diccionarios que contienen informaci\u00f3n de productos, escribe una funci\u00f3n que calcule el precio total de la lista.</p> <pre><code>def precio_total(productos):\n    total = 0\n    for producto in productos:\n        total += producto['precio'] * producto['cantidad']\n    return total\n\nproductos = [\n    {'nombre': 'Camisa', 'precio': 50, 'cantidad': 2},\n    {'nombre': 'Pantal\u00f3n', 'precio': 80, 'cantidad': 1},\n    {'nombre': 'Zapatillas', 'precio': 120, 'cantidad': 1}\n]\nprint(precio_total(productos))  # Salida: 300\n</code></pre>"},{"location":"content/p4/#tecnicas-para-iterar-sobre-los-elementos-de-un-diccionario","title":"T\u00e9cnicas para iterar sobre los elementos de un diccionario.","text":"<ol> <li>Iterar sobre las claves del diccionario:</li> </ol> <p><pre><code>diccionario = {\"a\": 1, \"b\": 2, \"c\": 3}\n\nfor clave in diccionario:\n    print(clave)\n</code></pre> Este c\u00f3digo imprimir\u00e1 las claves 'a', 'b' y 'c'.</p> <ol> <li>Iterar sobre los valores del diccionario:</li> </ol> <p><pre><code>diccionario = {\"a\": 1, \"b\": 2, \"c\": 3}\n\nfor valor in diccionario.values():\n    print(valor)\n</code></pre> Este c\u00f3digo imprimir\u00e1 los valores 1, 2 y 3.</p> <ol> <li>Iterar sobre las tuplas (clave, valor) del diccionario:</li> </ol> <p><pre><code>diccionario = {\"a\": 1, \"b\": 2, \"c\": 3}\n\nfor clave, valor in diccionario.items():\n    print(clave, valor)\n</code></pre> Este c\u00f3digo imprimir\u00e1 las tuplas ('a', 1), ('b', 2) y ('c', 3).</p> <ol> <li>Usar una comprensi\u00f3n de diccionario:</li> </ol> <p><pre><code>diccionario = {\"a\": 1, \"b\": 2, \"c\": 3}\n\nnuevo_diccionario = {clave: valor ** 2 for clave, valor in diccionario.items()}\n</code></pre> Este c\u00f3digo crear\u00e1 un nuevo diccionario con las mismas claves que el original y los valores elevados al cuadrado.</p> <p>Es importante tener en cuenta que los diccionarios en Python no est\u00e1n ordenados, por lo que el orden de las claves, valores y tuplas (clave, valor) puede variar de una ejecuci\u00f3n a otra.</p> <p>Hay muchos m\u00e1s que puedes explorar en la documentaci\u00f3n oficial de Python.</p> <p>https://docs.python.org/es/3/tutorial/datastructures.html#dictionaries</p>"},{"location":"content/p4/#funciones","title":"Funciones","text":"<p>En Python, una funci\u00f3n es un bloque de c\u00f3digo reutilizable que realiza una tarea espec\u00edfica cuando se llama. Las funciones son una parte fundamental de la programaci\u00f3n en Python y son utilizadas para modular y organizar el c\u00f3digo en tareas m\u00e1s peque\u00f1as y manejables. Aqu\u00ed tienes una explicaci\u00f3n detallada de las funciones en Python:</p>"},{"location":"content/p4/#definicion-de-una-funcion","title":"Definici\u00f3n de una funci\u00f3n","text":"<p>Para definir una funci\u00f3n en Python, puedes usar la palabra clave def, seguida del nombre de la funci\u00f3n y los par\u00e1metros entre par\u00e9ntesis. Luego, un bloque de c\u00f3digo indentado define lo que hace la funci\u00f3n. Aqu\u00ed tienes un ejemplo simple:</p> <pre><code>def saludar(nombre):\n    print(\"Hola,\", nombre)\n</code></pre>"},{"location":"content/p4/#llamando-a-una-funcion","title":"Llamando a una funci\u00f3n","text":"<p>Para ejecutar o \"llamar\" una funci\u00f3n, simplemente escribes su nombre seguido de par\u00e9ntesis que pueden contener los argumentos necesarios. Por ejemplo:</p> <pre><code>saludar(\"Juan\")\n</code></pre> <p>Esto imprimir\u00e1 \"Hola, Juan\" en la pantalla.</p>"},{"location":"content/p4/#parametros","title":"Par\u00e1metros","text":"<p>Los par\u00e1metros son valores que se pasan a una funci\u00f3n cuando se llama. Los par\u00e1metros se utilizan para que una funci\u00f3n pueda aceptar datos de entrada y trabajar con ellos. En el ejemplo anterior, \"nombre\" es un par\u00e1metro de la funci\u00f3n \"saludar\".</p>"},{"location":"content/p4/#valor-de-retorno","title":"Valor de retorno","text":"<p>Una funci\u00f3n puede devolver un valor utilizando la palabra clave return. Esto es \u00fatil cuando quieres que una funci\u00f3n realice un c\u00e1lculo y devuelva el resultado. Por ejemplo:</p> <pre><code>def suma(a, b):\n    resultado = a + b\n    return resultado\n</code></pre> <p>Puedes llamar a esta funci\u00f3n y almacenar el valor de retorno en una variable:</p> <pre><code>resultado_suma = suma(3, 5)\n</code></pre> <p>En este caso, resultado_suma contendr\u00eda el valor 8.</p>"},{"location":"content/p4/#documentacion-de-funciones","title":"Documentaci\u00f3n de funciones","text":"<p>Es una buena pr\u00e1ctica incluir documentaci\u00f3n en tus funciones para explicar qu\u00e9 hace la funci\u00f3n, qu\u00e9 par\u00e1metros espera y qu\u00e9 valor devuelve. Puedes usar comentarios de cadena de documentaci\u00f3n (docstrings) para esto:</p> <pre><code>def suma(a, b):\n    \"\"\"\n    Esta funci\u00f3n suma dos n\u00fameros y devuelve el resultado.\n    :param a: El primer n\u00famero a sumar.\n    :param b: El segundo n\u00famero a sumar.\n    :return: La suma de a y b.\n    \"\"\"\n    resultado = a + b\n    return resultado\n</code></pre> <p>Puedes acceder a esta documentaci\u00f3n utilizando la funci\u00f3n help en Python.</p>"},{"location":"content/p4/#funciones-sin-retorno","title":"Funciones sin retorno","text":"<p>No todas las funciones necesitan devolver un valor. Algunas funciones simplemente realizan una tarea sin necesidad de un valor de retorno. En ese caso, la funci\u00f3n puede no tener una instrucci\u00f3n return o puede tener return sin un valor despu\u00e9s de \u00e9l.</p> <pre><code>def saludar(nombre):\n    print(\"Hola,\", nombre)\n\n### \u00c1mbito de las variables\n\nLas variables definidas dentro de una funci\u00f3n tienen un alcance local, lo significa que solo est\u00e1n disponibles dentro de esa funci\u00f3n. Las variables definidas fuera de una funci\u00f3n tienen un alcance global y se pueden acceder desde cualquier parte del programa.\n\n```python  \nx = 10\n\ndef imprimir_x():\n    x = 5  # Esta variable x es local a la funci\u00f3n\n    print(\"x dentro de la funci\u00f3n:\", x)\n\nimprimir_x()\nprint(\"x fuera de la funci\u00f3n:\", x)\n</code></pre> <p>Esto imprimir\u00e1 \"x dentro de la funci\u00f3n: 5\" y \"x fuera de la funci\u00f3n: 10\".</p>"},{"location":"content/p4/#variables-globales","title":"Variables Globales","text":"<p>Las variables globales en Python son variables declaradas fuera de cualquier funci\u00f3n, permitiendo que sean accesibles desde cualquier parte del c\u00f3digo.  Aqu\u00ed una explicaci\u00f3n detallada:</p>"},{"location":"content/p4/#1-por-que-utilizar-variables-globales","title":"1. \u00bfPor qu\u00e9 utilizar variables globales?","text":"<ul> <li>Acceso universal:  Las variables globales son visibles y modificables desde cualquier funci\u00f3n dentro del script. </li> <li>Almacenamiento de informaci\u00f3n compartida:  Son \u00fatiles para compartir datos entre diferentes partes del c\u00f3digo.</li> <li>Configuraci\u00f3n global:  Se pueden usar para establecer valores predeterminados o constantes que se utilizan a lo largo del programa.</li> </ul>"},{"location":"content/p4/#2-declaracion-y-acceso","title":"2. Declaraci\u00f3n y Acceso:","text":"<ul> <li>Declaraci\u00f3n:  Se declara una variable global simplemente asign\u00e1ndole un valor fuera de cualquier funci\u00f3n:</li> </ul> <pre><code>global_variable = \"Hola mundo!\"\n</code></pre> <ul> <li>Acceso:  Para acceder a una variable global dentro de una funci\u00f3n, se utiliza la palabra clave <code>global</code>:</li> </ul> <pre><code>def my_function():\n    global global_variable\n    print(global_variable) \n</code></pre>"},{"location":"content/p4/#3-importancia-de-la-palabra-clave-global","title":"3. Importancia de la palabra clave <code>global</code>:","text":"<ul> <li>Ambig\u00fcedad:  Python asume que cualquier variable utilizada dentro de una funci\u00f3n es una variable local. Si se intenta modificar una variable global sin utilizar <code>global</code>, Python crear\u00e1 una nueva variable local con el mismo nombre, dejando la variable global sin cambios.</li> <li>Control de acceso:  La palabra clave <code>global</code> le dice a Python que la variable que se va a usar es la variable global, no una variable local.</li> </ul>"},{"location":"content/p4/#4-ejemplos","title":"4. Ejemplos:","text":"<p>Ejemplo 1:  Contador global</p> <pre><code>global_counter = 0 \n\ndef increment_counter():\n    global global_counter \n    global_counter += 1\n    print(f\"Contador incrementado a: {global_counter}\")\n\nincrement_counter() # Salida: Contador incrementado a: 1\nincrement_counter() # Salida: Contador incrementado a: 2\n</code></pre> <p>Ejemplo 2:  Configuraci\u00f3n global</p> <pre><code>global_config = {\n    \"nombre\": \"Mi aplicaci\u00f3n\",\n    \"version\": \"1.0\"\n}\n\ndef mostrar_config():\n    print(f\"Nombre: {global_config['nombre']}\")\n    print(f\"Versi\u00f3n: {global_config['version']}\")\n\nmostrar_config() # Salida: Nombre: Mi aplicaci\u00f3n\n                #        Versi\u00f3n: 1.0\n</code></pre>"},{"location":"content/p4/#5-precauciones","title":"5. Precauciones:","text":"<ul> <li>Evite el uso excesivo:  Las variables globales pueden hacer que el c\u00f3digo sea dif\u00edcil de entender y mantener, especialmente en programas grandes. Es preferible utilizar variables locales y pasar datos entre funciones cuando sea posible.</li> <li>Posibles errores:  Modificar variables globales desde diferentes partes del c\u00f3digo puede llevar a errores dif\u00edciles de rastrear.</li> <li>Limitaciones:  Las variables globales no se pueden usar para compartir informaci\u00f3n entre diferentes scripts o m\u00f3dulos.</li> </ul>"},{"location":"content/p5/","title":"Semana 5 - Gu\u00eda Completa sobre Git, GitHub y Fork","text":"<p>Esta gu\u00eda proporciona una explicaci\u00f3n detallada sobre Git, GitHub y el concepto de Fork, tres herramientas y conceptos fundamentales en el desarrollo colaborativo de software. Est\u00e1 dise\u00f1ada para principiantes y usuarios intermedios que desean comprender c\u00f3mo funcionan estas tecnolog\u00edas y c\u00f3mo utilizarlas de manera efectiva.</p>"},{"location":"content/p5/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>En el desarrollo moderno de software, la colaboraci\u00f3n y el control de versiones son esenciales. Git es un sistema de control de versiones distribuido que permite a los desarrolladores gestionar cambios en el c\u00f3digo de manera eficiente. GitHub, por su parte, es una plataforma basada en la nube que utiliza Git para alojar repositorios y facilitar la colaboraci\u00f3n entre equipos. Finalmente, el concepto de Fork es una pr\u00e1ctica com\u00fan en GitHub que permite a los usuarios crear copias de repositorios para contribuir o experimentar sin afectar el proyecto original.</p> <p>En esta gu\u00eda, exploraremos cada uno de estos conceptos en detalle, incluyendo su prop\u00f3sito, funcionamiento, comandos principales y ejemplos pr\u00e1cticos.</p>"},{"location":"content/p5/#2-que-es-git","title":"2. \u00bfQu\u00e9 es Git?","text":"<p>Git es un sistema de control de versiones distribuido creado por Linus Torvalds en 2005. Permite a m\u00faltiples desarrolladores trabajar en un mismo proyecto de manera simult\u00e1nea, rastreando los cambios en el c\u00f3digo y coordinando el trabajo sin conflictos.</p>"},{"location":"content/p5/#21-caracteristicas-principales-de-git","title":"2.1. Caracter\u00edsticas Principales de Git","text":"<ul> <li>Distribuido: Cada desarrollador tiene una copia completa del repositorio, incluyendo su historial, lo que permite trabajar sin conexi\u00f3n y reduce la dependencia de un servidor central.</li> <li>R\u00e1pido y eficiente: Git est\u00e1 optimizado para manejar grandes proyectos con rapidez.</li> <li>Rastreo de cambios: Registra qui\u00e9n hizo qu\u00e9 cambio, cu\u00e1ndo y por qu\u00e9.</li> <li>Ramificaci\u00f3n (Branching): Permite crear ramas para trabajar en nuevas funcionalidades o correcciones sin afectar el c\u00f3digo principal.</li> <li>Fusi\u00f3n (Merging): Integra los cambios de diferentes ramas de manera controlada.</li> <li>Resoluci\u00f3n de conflictos: Ayuda a gestionar conflictos cuando dos desarrolladores modifican el mismo archivo.</li> </ul>"},{"location":"content/p5/#22-conceptos-clave-de-git","title":"2.2. Conceptos Clave de Git","text":"<ul> <li>Repositorio: Un directorio que contiene todos los archivos del proyecto y su historial de cambios.</li> <li>Commit: Una instant\u00e1nea de los cambios realizados en el repositorio en un momento espec\u00edfico. Cada commit tiene un identificador \u00fanico (hash).</li> <li>Rama (Branch): Una l\u00ednea de desarrollo paralela que permite trabajar en nuevas funcionalidades sin afectar la rama principal.</li> <li>Merge: El proceso de combinar los cambios de una rama en otra.</li> <li>Clone: Crear una copia local de un repositorio remoto.</li> <li>Push: Enviar los cambios locales a un repositorio remoto.</li> <li>Pull: Obtener los cambios de un repositorio remoto y combinarlos con el repositorio local.</li> </ul>"},{"location":"content/p5/#23-instalacion-de-git","title":"2.3. Instalaci\u00f3n de Git","text":"<ol> <li>Descarga Git desde git-scm.com.</li> <li>Instala Git siguiendo las instrucciones para tu sistema operativo (Windows, macOS, Linux).</li> <li>Verifica la instalaci\u00f3n ejecutando en la terminal:    <pre><code>git --version\n</code></pre></li> </ol>"},{"location":"content/p5/#24-configuracion-inicial","title":"2.4. Configuraci\u00f3n Inicial","text":"<p>Configura tu nombre y correo electr\u00f3nico, que se asociar\u00e1n con tus commits:</p> <pre><code>git config --global user.name \"Tu Nombre\"\ngit config --global user.email \"tu.correo@ejemplo.com\"\n</code></pre>"},{"location":"content/p5/#25-comandos-basicos-de-git","title":"2.5. Comandos B\u00e1sicos de Git","text":"Comando Descripci\u00f3n <code>git init</code> Inicializa un nuevo repositorio Git en el directorio actual. <code>git clone &lt;URL&gt;</code> Clona un repositorio remoto al directorio local. <code>git add &lt;archivo&gt;</code> Agrega un archivo al \u00e1rea de preparaci\u00f3n (staging). <code>git commit -m \"Mensaje\"</code> Crea un commit con los cambios preparados. <code>git push origin &lt;rama&gt;</code> Env\u00eda los cambios locales a la rama especificada en el repositorio remoto. <code>git pull origin &lt;rama&gt;</code> Obtiene y combina los cambios del repositorio remoto. <code>git branch</code> Lista las ramas del repositorio. <code>git checkout &lt;rama&gt;</code> Cambia a la rama especificada. <code>git merge &lt;rama&gt;</code> Combina la rama especificada con la rama actual."},{"location":"content/p5/#26-ejemplo-practico-crear-un-repositorio-local","title":"2.6. Ejemplo Pr\u00e1ctico: Crear un Repositorio Local","text":"<ol> <li>Crea un directorio y navega a \u00e9l:    <pre><code>mkdir mi-proyecto\ncd mi-proyecto\n</code></pre></li> <li>Inicializa un repositorio Git:    <pre><code>git init\n</code></pre></li> <li>Crea un archivo y haz un commit:    <pre><code>echo \"# Mi Proyecto\" &gt; README.md\ngit add README.md\ngit commit -m \"Primer commit: agregar README\"\n</code></pre></li> </ol>"},{"location":"content/p5/#3-que-es-github","title":"3. \u00bfQu\u00e9 es GitHub?","text":"<p>GitHub es una plataforma en l\u00ednea que utiliza Git para alojar repositorios de c\u00f3digo, permitiendo la colaboraci\u00f3n entre desarrolladores, la gesti\u00f3n de proyectos y el despliegue de aplicaciones. Fue adquirida por Microsoft en 2018 y es ampliamente utilizada en proyectos de c\u00f3digo abierto y privados.</p>"},{"location":"content/p5/#31-caracteristicas-principales-de-github","title":"3.1. Caracter\u00edsticas Principales de GitHub","text":"<ul> <li>Repositorios remotos: Almacena el c\u00f3digo en la nube, accesible desde cualquier lugar.</li> <li>Colaboraci\u00f3n: Permite a m\u00faltiples desarrolladores trabajar en el mismo proyecto mediante pull requests, issues y comentarios.</li> <li>Control de versiones: Integra Git para rastrear los cambios en el c\u00f3digo.</li> <li>Herramientas de gesti\u00f3n: Incluye tableros de proyectos, wikis y acciones (GitHub Actions) para automatizaci\u00f3n.</li> <li>C\u00f3digo abierto: Facilita la contribuci\u00f3n a proyectos p\u00fablicos mediante forks y pull requests.</li> <li>Integraciones: Compatible con herramientas como CI/CD, editores de c\u00f3digo y plataformas de despliegue.</li> </ul>"},{"location":"content/p5/#32-conceptos-clave-de-github","title":"3.2. Conceptos Clave de GitHub","text":"<ul> <li>Repositorio: Un espacio en GitHub que contiene los archivos del proyecto y su historial.</li> <li>Pull Request (PR): Una solicitud para fusionar cambios de una rama o fork en el repositorio principal.</li> <li>Issue: Un sistema para reportar errores, sugerir mejoras o discutir ideas.</li> <li>Fork: Una copia de un repositorio que permite experimentar o contribuir sin afectar el original.</li> <li>GitHub Actions: Flujos de trabajo automatizados para compilaci\u00f3n, pruebas y despliegue.</li> <li>Star: Marcar un repositorio como favorito para seguirlo o mostrar inter\u00e9s.</li> </ul>"},{"location":"content/p5/#33-crear-una-cuenta-en-github","title":"3.3. Crear una Cuenta en GitHub","text":"<ol> <li>Visita github.com y reg\u00edstrate con tu correo electr\u00f3nico.</li> <li>Verifica tu cuenta y configura tu perfil.</li> <li>Opcionalmente, configura la autenticaci\u00f3n de dos factores (2FA) para mayor seguridad.</li> </ol>"},{"location":"content/p5/#34-crear-un-repositorio-en-github","title":"3.4. Crear un Repositorio en GitHub","text":"<ol> <li>Inicia sesi\u00f3n en GitHub y haz clic en New (o el bot\u00f3n \"+\").</li> <li>Completa los detalles:</li> <li>Nombre del repositorio.</li> <li>Descripci\u00f3n (opcional).</li> <li>Visibilidad (p\u00fablico o privado).</li> <li>Opcionalmente, inicializa con un README, .gitignore o licencia.</li> <li>Haz clic en Create repository.</li> </ol>"},{"location":"content/p5/#35-conectar-un-repositorio-local-con-github","title":"3.5. Conectar un Repositorio Local con GitHub","text":"<ol> <li>En tu repositorio local, agrega el remoto:    <pre><code>git remote add origin &lt;URL-del-repositorio&gt;\n</code></pre></li> <li>Env\u00eda los cambios al repositorio remoto:    <pre><code>git push -u origin main\n</code></pre></li> </ol>"},{"location":"content/p5/#4-que-es-un-fork","title":"4. \u00bfQu\u00e9 es un Fork?","text":"<p>Un Fork en GitHub es una copia de un repositorio que se crea en tu propia cuenta. Esto te permite trabajar en el proyecto de manera independiente, realizar cambios, experimentar o contribuir al repositorio original sin modificarlo directamente.</p>"},{"location":"content/p5/#41-por-que-usar-un-fork","title":"4.1. \u00bfPor qu\u00e9 usar un Fork?","text":"<ul> <li>Contribuir a proyectos de c\u00f3digo abierto: Puedes proponer mejoras al proyecto original mediante pull requests.</li> <li>Experimentar sin riesgos: Modifica el c\u00f3digo sin afectar el repositorio original.</li> <li>Crear tu propia versi\u00f3n: Usa el fork como base para un proyecto derivado.</li> <li>Colaboraci\u00f3n controlada: Los forks permiten a los mantenedores revisar los cambios antes de integrarlos.</li> </ul>"},{"location":"content/p5/#42-como-crear-un-fork","title":"4.2. C\u00f3mo Crear un Fork","text":"<ol> <li>Navega al repositorio que deseas copiar en GitHub.</li> <li>Haz clic en el bot\u00f3n Fork en la esquina superior derecha.</li> <li>Selecciona tu cuenta como destino del fork.</li> <li>GitHub crear\u00e1 una copia del repositorio en tu cuenta.</li> </ol>"},{"location":"content/p5/#43-flujo-de-trabajo-con-un-fork","title":"4.3. Flujo de Trabajo con un Fork","text":"<ol> <li>Clonar el Fork:    Clona el fork a tu m\u00e1quina local:    <pre><code>git clone &lt;URL-de-tu-fork&gt;\n</code></pre></li> <li>Configurar el Repositorio Original como Remoto:    Agrega el repositorio original como un remoto (llamado <code>upstream</code>) para mantener tu fork actualizado:    <pre><code>git remote add upstream &lt;URL-del-repositorio-original&gt;\n</code></pre></li> <li>Sincronizar tu Fork:    Obt\u00e9n los cambios del repositorio original:    <pre><code>git fetch upstream\ngit checkout main\ngit merge upstream/main\ngit push origin main\n</code></pre></li> <li>Crear una Rama para tus Cambios:    <pre><code>git checkout -b mi-rama\n</code></pre></li> <li>Hacer Cambios y Commits:    Modifica los archivos, agr\u00e9galos y haz commits:    <pre><code>git add .\ngit commit -m \"Descripci\u00f3n de los cambios\"\n</code></pre></li> <li>Enviar los Cambios a tu Fork:    <pre><code>git push origin mi-rama\n</code></pre></li> <li>Crear un Pull Request:</li> <li>Ve a tu fork en GitHub.</li> <li>Selecciona la rama <code>mi-rama</code> y haz clic en New pull request.</li> <li>Configura el pull request para que apunte al repositorio original (base: <code>main</code> del repositorio original, compare: <code>mi-rama</code> de tu fork).</li> <li>Describe tus cambios y env\u00eda el pull request.</li> </ol>"},{"location":"content/p5/#44-ejemplo-practico-contribuir-a-un-proyecto-de-codigo-abierto","title":"4.4. Ejemplo Pr\u00e1ctico: Contribuir a un Proyecto de C\u00f3digo Abierto","text":"<p>Supongamos que quieres contribuir a un proyecto llamado <code>proyecto-ejemplo</code> en GitHub:</p> <ol> <li>Haz un fork del repositorio <code>github.com/usuario/proyecto-ejemplo</code>.</li> <li>Clona tu fork:    <pre><code>git clone git@github.com:tu-usuario/proyecto-ejemplo.git\ncd proyecto-ejemplo\n</code></pre></li> <li>Configura el remoto <code>upstream</code>:    <pre><code>git remote add upstream git@github.com:usuario/proyecto-ejemplo.git\n</code></pre></li> <li>Crea una rama para corregir un error:    <pre><code>git checkout -b corregir-error\n</code></pre></li> <li>Modifica los archivos, haz commits y env\u00eda los cambios:    <pre><code>git add .\ngit commit -m \"Corrige error en la funci\u00f3n X\"\ngit push origin corregir-error\n</code></pre></li> <li>Crea un pull request desde <code>corregir-error</code> en tu fork hacia la rama <code>main</code> del repositorio original.</li> <li>Los mantenedores revisar\u00e1n tu pull request y, si es aprobado, fusionar\u00e1n tus cambios.</li> </ol>"},{"location":"content/p5/#5-mejores-practicas","title":"5. Mejores Pr\u00e1cticas","text":""},{"location":"content/p5/#51-para-git","title":"5.1. Para Git","text":"<ul> <li>Escribe mensajes de commit claros y descriptivos.</li> <li>Usa ramas para aislar nuevas funcionalidades o correcciones.</li> <li>Realiza commits peque\u00f1os y frecuentes para facilitar el rastreo de cambios.</li> <li>Resuelve conflictos de manera cuidadosa al fusionar ramas.</li> </ul>"},{"location":"content/p5/#52-para-github","title":"5.2. Para GitHub","text":"<ul> <li>Mant\u00e9n tu fork sincronizado con el repositorio original.</li> <li>Lee las gu\u00edas de contribuci\u00f3n del proyecto antes de enviar pull requests.</li> <li>Usa issues para discutir ideas antes de implementar cambios grandes.</li> <li>Revisa tu c\u00f3digo antes de enviar un pull request.</li> </ul>"},{"location":"content/p5/#53-para-forks","title":"5.3. Para Forks","text":"<ul> <li>Usa nombres de ramas descriptivos (por ejemplo, <code>agregar-funcion-X</code> o <code>arreglar-bug-Y</code>).</li> <li>No modifiques directamente la rama <code>main</code> de tu fork; usa ramas espec\u00edficas.</li> <li>Aseg\u00farate de que tus cambios sean compatibles con el proyecto original.</li> </ul>"},{"location":"content/p5/#6-errores-comunes-y-soluciones","title":"6. Errores Comunes y Soluciones","text":"Problema Soluci\u00f3n Conflicto al hacer merge Usa <code>git mergetool</code> o edita manualmente los archivos en conflicto, luego haz commit. No puedo empujar cambios (<code>push</code>) Aseg\u00farate de tener permisos y que tu rama est\u00e1 actualizada (<code>git pull --rebase</code>). Mi fork est\u00e1 desactualizado Sincroniza con el repositorio original usando <code>git fetch upstream</code> y <code>git merge</code>. Error de autenticaci\u00f3n Verifica tu configuraci\u00f3n de SSH o token de acceso personal en GitHub."},{"location":"content/p5/#actividad-fork-de-un-repositorio-y-ejercicios-de-programacion-en-python","title":"Actividad: Fork de un Repositorio y Ejercicios de Programaci\u00f3n en Python","text":"<p>Esta actividad est\u00e1 dise\u00f1ada para que los estudiantes practiquen el uso de Git y GitHub mediante la creaci\u00f3n de un fork de un repositorio, y desarrollen habilidades de programaci\u00f3n en Python creando ejercicios sobre estructuras condicionales, ciclos y colecciones. Cada estudiante crear\u00e1 una carpeta con su nombre en el repositorio y a\u00f1adir\u00e1 20 ejercicios (5 por cada categor\u00eda solicitada).</p>"},{"location":"content/p5/#objetivos-de-la-actividad","title":"Objetivos de la Actividad","text":"<ol> <li>Aprender a realizar un fork de un repositorio en GitHub y trabajar con \u00e9l localmente.</li> <li>Practicar el uso de Git para clonar, crear ramas, hacer commits y enviar cambios.</li> <li>Desarrollar habilidades de programaci\u00f3n en Python creando ejercicios sobre:</li> <li>Estructuras condicionales (<code>if</code>, <code>elif</code>, <code>else</code>).</li> <li>Ciclos <code>for</code>.</li> <li>Ciclos <code>while</code>.</li> <li>Colecciones: listas, tuplas, diccionarios y conjuntos.</li> <li>Fomentar la colaboraci\u00f3n y organizaci\u00f3n en un entorno de desarrollo colaborativo.</li> </ol>"},{"location":"content/p5/#requisitos-previos","title":"Requisitos Previos","text":"<ul> <li>Tener una cuenta en GitHub.</li> <li>Tener Git instalado en tu computadora (descarga aqu\u00ed).</li> <li>Tener un entorno de desarrollo para Python (por ejemplo, VS Code, PyCharm o IDLE).</li> <li>Conocimientos b\u00e1sicos de Python: condicionales, ciclos y colecciones.</li> </ul>"},{"location":"content/p5/#instrucciones-generales","title":"Instrucciones Generales","text":"<ol> <li>Cada estudiante realizar\u00e1 un fork del repositorio proporcionado por el instructor.</li> <li>Crear\u00e1 una carpeta con su nombre (en formato <code>nombre-apellido</code> o similar) dentro del repositorio.</li> <li>Dentro de su carpeta, crear\u00e1 un archivo Python (<code>.py</code>) con 20 ejercicios distribuidos de la siguiente manera:</li> <li>5 ejercicios de condicionales.</li> <li>5 ejercicios de ciclos <code>for</code>.</li> <li>5 ejercicios de ciclos <code>while</code>.</li> <li>5 ejercicios de colecciones (al menos uno por tipo: lista, tupla, diccionario, conjunto).</li> <li>Subir\u00e1 los cambios al fork y crear\u00e1 un pull request al repositorio original.</li> </ol>"},{"location":"content/p5/#paso-a-paso","title":"Paso a Paso","text":""},{"location":"content/p5/#1-crear-un-fork-del-repositorio","title":"1. Crear un Fork del Repositorio","text":"<ol> <li>Accede al repositorio proporcionado: <pre><code>   git clone https://github.com/jfinfocesde/act_ntp_s5.git\n</code></pre></li> <li>Haz un fork:</li> <li>En la p\u00e1gina del repositorio, haz clic en el bot\u00f3n Fork (esquina superior derecha).</li> <li>Selecciona tu cuenta como destino del fork.</li> <li>Clona tu fork:</li> <li>Copia la URL de tu fork (por ejemplo, <code>git@github.com:tu-usuario/act_ntp_s5.git</code>).</li> <li>En la terminal, ejecuta:      <pre><code>git clone &lt;URL-de-tu-fork&gt;\ncd repositorio-ejercicios\n</code></pre></li> </ol>"},{"location":"content/p5/#2-crear-tu-carpeta-y-archivo","title":"2. Crear tu Carpeta y Archivo","text":"<ol> <li>Crea una carpeta con tu nombre:</li> <li>Dentro del directorio del repositorio, crea una carpeta con el formato <code>nombre-apellido</code> (por ejemplo, <code>juan-perez</code>).</li> <li>Ejemplo:      <pre><code>mkdir juan-perez\n</code></pre></li> </ol>"},{"location":"content/p5/#4-escribir-los-ejercicios","title":"4. Escribir los Ejercicios","text":"<p>A continuaci\u00f3n, se proporcionan ejemplos de ejercicios para cada categor\u00eda. Cada estudiante\u8bca</p> <p>System: estudiante debe crear 20 ejercicios en total, distribuidos en: - 5 ejercicios de condicionales (<code>if</code>, <code>elif</code>, <code>else</code>). - 5 ejercicios de ciclos for. - 5 ejercicios de ciclos while. - 5 ejercicios de colecciones (listas, tuplas, diccionarios, conjuntos).</p> <p>Los ejercicios deben ser \u00fanicos, implementados en Python, y guardados en un archivo <code>.py</code> dentro de la carpeta del estudiante. A continuaci\u00f3n, se incluyen ejemplos de cada tipo de ejercicio que los estudiantes pueden usar como inspiraci\u00f3n, pero deben crear sus propios ejercicios originales.</p>"},{"location":"content/p5/#ejemplos-de-ejercicios","title":"Ejemplos de Ejercicios","text":""},{"location":"content/p5/#condicionales","title":"Condicionales","text":"<ol> <li>Ejercicio 1: Escribe un programa que determine si un n\u00famero ingresado por el usuario es positivo, negativo o cero.</li> <li>Ejercicio 2: Crea un programa que verifique si un a\u00f1o es bisiesto.</li> <li>Ejercicio 3: Dise\u00f1a un programa que clasifique una nota (0-100) en A (90-100), B (80-89), C (70-79), D (60-69) o F (&lt;60).</li> <li>Ejercicio 4: Escribe un programa que determine si un tri\u00e1ngulo es equil\u00e1tero, is\u00f3sceles o escaleno seg\u00fan las longitudes de sus lados.</li> <li>Ejercicio 5</li> </ol>"},{"location":"content/p5/#plantilla-de-codigo-para-los-estudiantes","title":"Plantilla de C\u00f3digo para los Estudiantes","text":"<p>Cada estudiante debe crear un archivo <code>.py</code> con sus ejercicios. A continuaci\u00f3n, se proporciona una plantilla sugerida para estructurar el archivo:</p> <p>```python</p>"},{"location":"content/p5/#ejercicios-nombre-apellidopy","title":"ejercicios-nombre-apellido.py","text":""},{"location":"content/p5/#nombre-nombre-del-estudiante","title":"Nombre: [Nombre del estudiante]","text":""},{"location":"content/p5/#descripcion-ejercicios-de-condicionales-ciclos-y-colecciones-en-python","title":"Descripci\u00f3n: Ejercicios de condicionales, ciclos y colecciones en Python","text":""},{"location":"content/p5/#-condicionales-","title":"--- Condicionales ---","text":"<p>print(\"=== Ejercicios de Condicionales ===\")</p>"},{"location":"content/p5/#ejercicio-1","title":"Ejercicio 1","text":""},{"location":"content/p5/#codigo-del-estudiante","title":"[C\u00f3digo del estudiante]","text":""},{"location":"content/p5/#ejercicio-2","title":"Ejercicio 2","text":""},{"location":"content/p5/#codigo-del-estudiante_1","title":"[C\u00f3digo del estudiante]","text":""},{"location":"content/p5/#ejercicio-3","title":"Ejercicio 3","text":""},{"location":"content/p5/#codigo-del-estudiante_2","title":"[C\u00f3digo del estudiante]","text":""},{"location":"content/p5/#ejercicio-4","title":"Ejercicio 4","text":""},{"location":"content/p5/#codigo-del-estudiante_3","title":"[C\u00f3digo del estudiante]","text":""},{"location":"content/p5/#ejercicio-5","title":"Ejercicio 5","text":""},{"location":"content/p5/#codigo-del-estudiante_4","title":"[C\u00f3digo del estudiante]","text":""},{"location":"content/p5/#-ciclos-for-","title":"--- Ciclos For ---","text":"<p>print(\"\\n=== Ejercicios de Ciclos For ===\")</p>"},{"location":"content/p5/#ejercicio-1_1","title":"Ejercicio 1","text":""},{"location":"content/p5/#codigo-del-estudiante_5","title":"[C\u00f3digo del estudiante]","text":""},{"location":"content/p5/#ejercicio-2_1","title":"Ejercicio 2","text":""},{"location":"content/p5/#codigo-del-estudiante_6","title":"[C\u00f3digo del estudiante]","text":""},{"location":"content/p5/#ejercicio-3_1","title":"Ejercicio 3","text":""},{"location":"content/p5/#codigo-del-estudiante_7","title":"[C\u00f3digo del estudiante]","text":""},{"location":"content/p5/#ejercicio-4_1","title":"Ejercicio 4","text":""},{"location":"content/p5/#codigo-del-estudiante_8","title":"[C\u00f3digo del estudiante]","text":""},{"location":"content/p5/#ejercicio-5_1","title":"Ejercicio 5","text":""},{"location":"content/p5/#codigo-del-estudiante_9","title":"[C\u00f3digo del estudiante]","text":""},{"location":"content/p5/#-ciclos-while-","title":"--- Ciclos While ---","text":"<p>print(\"\\n=== Ejercicios de Ciclos While ===\")</p>"},{"location":"content/p5/#ejercicio-1_2","title":"Ejercicio 1","text":""},{"location":"content/p5/#codigo-del-estudiante_10","title":"[C\u00f3digo del estudiante]","text":""},{"location":"content/p5/#ejercicio-2_2","title":"Ejercicio 2","text":""},{"location":"content/p5/#codigo-del-estudiante_11","title":"[C\u00f3digo del estudiante]","text":""},{"location":"content/p5/#ejercicio-3_2","title":"Ejercicio 3","text":""},{"location":"content/p5/#codigo-del-estudiante_12","title":"[C\u00f3digo del estudiante]","text":""},{"location":"content/p5/#ejercicio-4_2","title":"Ejercicio 4","text":""},{"location":"content/p5/#codigo-del-estudiante_13","title":"[C\u00f3digo del estudiante]","text":""},{"location":"content/p5/#ejercicio-5_2","title":"Ejercicio 5","text":""},{"location":"content/p5/#codigo-del-estudiante_14","title":"[C\u00f3digo del estudiante]","text":""},{"location":"content/p6/","title":"Semana 6 - Evaluaci\u00f3n Primer Momento","text":""},{"location":"content/p6/#evaluacion-de-conocimiento","title":"Evaluaci\u00f3n de Conocimiento","text":"<p>La evaluaci\u00f3n de conocimiento se realizar\u00e1 a trav\u00e9s de la plataforma: <pre><code>http://seia.space\n</code></pre></p>"},{"location":"content/p7/","title":"Semana 7 Entornos Virtuales en Python:","text":"<p>Los entornos virtuales en Python son una herramienta esencial para gestionar las dependencias de tus proyectos. Permiten crear un espacio aislado para cada proyecto, evitando conflictos entre las librer\u00edas que utiliza cada uno.</p> <p>\u00bfPara qu\u00e9 sirven?</p> <ul> <li>Aislamiento de dependencias: Cada proyecto puede tener sus propias versiones de librer\u00edas, sin afectar a otros proyectos.</li> <li>Control de versiones: Puedes crear un entorno virtual para cada versi\u00f3n de un proyecto, asegurando compatibilidad.</li> <li>Simplificaci\u00f3n de la gesti\u00f3n de dependencias: Facilita la instalaci\u00f3n y actualizaci\u00f3n de librer\u00edas.</li> </ul> <p>Creaci\u00f3n de un entorno virtual:</p> <pre><code>python -m venv .venv\n</code></pre> <p>Activaci\u00f3n del entorno virtual:</p> <ul> <li>Windows: <pre><code>myenv\\Scripts\\activate\n</code></pre></li> <li>Linux/macOS: <pre><code>source myenv/bin/activate\n</code></pre></li> </ul> <p>Comandos dentro del entorno virtual:</p> <ul> <li> <p>Instalaci\u00f3n de paquetes: <pre><code>pip install &lt;nombre_del_paquete&gt;\n</code></pre> Ejemplo: <pre><code>pip install requests\n</code></pre></p> </li> <li> <p>Desinstalaci\u00f3n de paquetes: <pre><code>pip uninstall &lt;nombre_del_paquete&gt;\n</code></pre></p> </li> <li> <p>Actualizaci\u00f3n de paquetes: <pre><code>pip install --upgrade &lt;nombre_del_paquete&gt;\n</code></pre></p> </li> <li> <p>Lista de paquetes instalados: <pre><code>pip freeze\n</code></pre></p> </li> <li> <p>Guardar las dependencias en un archivo: <pre><code>pip freeze &gt; requirements.txt\n</code></pre> Este comando crea un archivo <code>requirements.txt</code> que lista todas las dependencias del proyecto.</p> </li> <li> <p>Instalaci\u00f3n de paquetes desde un archivo: <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Desactivaci\u00f3n del entorno virtual: <pre><code>deactivate\n</code></pre></p> </li> </ul>"},{"location":"content/p7/#ejemplo-con-excel-agregar-datos-al-archivo","title":"Ejemplo con Excel: Agregar datos al archivo","text":"<p>Proyecto de registro de asistencia:</p> <ol> <li>Creaci\u00f3n del entorno virtual:</li> </ol> <pre><code>python -m venv attendance_tracker\n</code></pre> <ol> <li> <p>Activaci\u00f3n del entorno:</p> </li> <li> <p>Windows: <pre><code>attendance_tracker\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Linux/macOS: <pre><code>source attendance_tracker/bin/activate\n</code></pre></p> </li> <li> <p>Instalaci\u00f3n de librer\u00edas:</p> </li> </ol> <pre><code>pip install openpyxl\n</code></pre> <ul> <li> <p>openpyxl: Librer\u00eda para leer y escribir archivos de Excel, permite la interacci\u00f3n con hojas de c\u00e1lculo.</p> </li> <li> <p>Guardar las dependencias:</p> </li> </ul> <pre><code>pip freeze &gt; requirements.txt\n</code></pre> <ol> <li> <p>Desarrollo del proyecto:</p> </li> <li> <p>Cargar el archivo de Excel: Utilizar <code>openpyxl</code> para abrir el archivo \"asistencia.xlsx\".</p> </li> <li>Obtener la hoja de c\u00e1lculo: Acceder a la hoja \"Asistencia\" del archivo.</li> <li>Obtener la \u00faltima fila: Encontrar la \u00faltima fila con datos en la hoja.</li> <li>Agregar una nueva fila: Insertar una nueva fila despu\u00e9s de la \u00faltima fila con datos.</li> <li>Solicitar datos al usuario: Pedir al usuario que ingrese el nombre, la fecha y la hora de entrada.</li> <li>Escribir los datos en la nueva fila: Escribir los datos del usuario en las celdas correspondientes de la nueva fila.</li> <li> <p>Guardar los cambios en el archivo: Guardar los cambios realizados en el archivo \"asistencia.xlsx\".</p> </li> <li> <p>Desactivaci\u00f3n del entorno:</p> </li> </ol> <pre><code>deactivate\n</code></pre> <p>Beneficios de usar un entorno virtual en este proyecto:</p> <ul> <li>Aislamiento de dependencias: Evita conflictos con otras librer\u00edas que puedas estar usando en otros proyectos.</li> <li>Facilidad de colaboraci\u00f3n: Permite compartir el proyecto con otros desarrolladores, asegur\u00e1ndote de que las dependencias se instalen correctamente.</li> <li>Simplifica la gesti\u00f3n de versiones: Puedes crear entornos virtuales para diferentes versiones del proyecto, manteniendo la compatibilidad con la librer\u00eda openpyxl.</li> </ul> <p>Ejemplo de c\u00f3digo (registro de asistencia):</p> <pre><code>import openpyxl\n\n# Cargar el archivo de Excel\nworkbook = openpyxl.load_workbook(\"asistencia.xlsx\")\nsheet = workbook[\"Asistencia\"]\n\n# Obtener la \u00faltima fila con datos\nlast_row = sheet.max_row\n\n# Agregar una nueva fila\nsheet.insert_rows(last_row + 1)\n\n# Solicitar datos al usuario\nnombre = input(\"Ingrese su nombre: \")\nfecha = input(\"Ingrese la fecha (AAAA-MM-DD): \")\nhora = input(\"Ingrese la hora de entrada (HH:MM): \")\n\n# Escribir los datos en la nueva fila\nsheet.cell(row=last_row + 1, column=1).value = nombre\nsheet.cell(row=last_row + 1, column=2).value = fecha\nsheet.cell(row=last_row + 1, column=3).value = hora\n\n# Guardar los cambios en el archivo\nworkbook.save(\"asistencia.xlsx\")\n</code></pre>"},{"location":"content/p7/#actividad-practica-sistema-de-gestion-de-asistencia-avanzado","title":"Actividad Pr\u00e1ctica: Sistema de Gesti\u00f3n de Asistencia Avanzado","text":"<p>En esta actividad, aplicar\u00e1s los conocimientos adquiridos sobre entornos virtuales y manipulaci\u00f3n de archivos Excel para crear un sistema de gesti\u00f3n de asistencia m\u00e1s completo.</p>"},{"location":"content/p7/#objetivos","title":"Objetivos:","text":"<ol> <li>Crear y configurar un entorno virtual para el proyecto</li> <li>Desarrollar un sistema de gesti\u00f3n de asistencia con funcionalidades avanzadas</li> <li>Implementar validaci\u00f3n de datos y generaci\u00f3n de reportes</li> </ol>"},{"location":"content/p7/#instrucciones","title":"Instrucciones:","text":""},{"location":"content/p7/#parte-1-configuracion-del-entorno-virtual","title":"Parte 1: Configuraci\u00f3n del Entorno Virtual","text":"<ol> <li>Crea un nuevo directorio para tu proyecto llamado <code>sistema_asistencia</code></li> <li>Dentro del directorio, crea un entorno virtual:    <pre><code>python -m venv .venv\n</code></pre></li> <li>Activa el entorno virtual seg\u00fan tu sistema operativo</li> <li>Instala las siguientes librer\u00edas:    <pre><code>pip install openpyxl pandas matplotlib\n</code></pre></li> <li>Guarda las dependencias en un archivo <code>requirements.txt</code></li> </ol>"},{"location":"content/p7/#parte-2-desarrollo-del-sistema-de-gestion","title":"Parte 2: Desarrollo del Sistema de Gesti\u00f3n","text":"<p>Crea un archivo <code>asistencia_manager.py</code> con el siguiente c\u00f3digo base y compl\u00e9talo seg\u00fan las instrucciones:</p> <pre><code>import openpyxl\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nimport os\n\nclass SistemaAsistencia:\n    def __init__(self, archivo=\"asistencia.xlsx\"):\n        # Verificar si el archivo existe, si no, crearlo con la estructura inicial\n        if not os.path.exists(archivo):\n            self.crear_archivo_inicial(archivo)\n        self.archivo = archivo\n        self.workbook = openpyxl.load_workbook(archivo)\n        self.sheet = self.workbook[\"Asistencia\"]\n\n    def crear_archivo_inicial(self, archivo):\n        # Crear un nuevo libro de trabajo y hoja\n        wb = openpyxl.Workbook()\n        sheet = wb.active\n        sheet.title = \"Asistencia\"\n\n        # Definir encabezados\n        headers = [\"Nombre\", \"Fecha\", \"Hora Entrada\", \"Hora Salida\", \"Duraci\u00f3n (horas)\"]\n        sheet.append(headers)\n\n        # Guardar el archivo\n        wb.save(archivo)\n\n    def registrar_entrada(self):\n        # Solicitar informaci\u00f3n al usuario\n        nombre = input(\"Ingrese el nombre: \").strip()\n        fecha = datetime.now().strftime(\"%Y-%m-%d\")\n        hora_entrada = datetime.now().strftime(\"%H:%M:%S\")\n\n        # Agregar registro al Excel\n        self.sheet.append([nombre, fecha, hora_entrada, \"\", \"\"])\n        self.workbook.save(self.archivo)\n        print(f\"Entrada registrada para {nombre} a las {hora_entrada}\")\n\n    def registrar_salida(self):\n        nombre = input(\"Ingrese el nombre: \").strip()\n        fecha_actual = datetime.now().strftime(\"%Y-%m-%d\")\n        hora_salida = datetime.now().strftime(\"%H:%M:%S\")\n\n        # Buscar el \u00faltimo registro del usuario en la fecha actual\n        for row in range(2, self.sheet.max_row + 1):\n            if (self.sheet.cell(row=row, column=1).value == nombre and \n                self.sheet.cell(row=row, column=2).value == fecha_actual and \n                self.sheet.cell(row=row, column=4).value == \"\"):\n\n                # Registrar hora de salida\n                self.sheet.cell(row=row, column=4).value = hora_salida\n\n                # Calcular duraci\u00f3n\n                hora_entrada = datetime.strptime(self.sheet.cell(row=row, column=3).value, \"%H:%M:%S\")\n                hora_salida_dt = datetime.strptime(hora_salida, \"%H:%M:%S\")\n                duracion = (hora_salida_dt - hora_entrada).total_seconds() / 3600  # En horas\n                self.sheet.cell(row=row, column=5).value = round(duracion, 2)\n\n                self.workbook.save(self.archivo)\n                print(f\"Salida registrada para {nombre}. Duraci\u00f3n: {duracion:.2f} horas\")\n                return\n\n        print(\"No se encontr\u00f3 un registro de entrada para hoy.\")\n\n    def generar_reporte_individual(self, nombre):\n        # Leer datos con pandas\n        df = pd.read_excel(self.archivo)\n\n        # Filtrar por nombre\n        reporte = df[df[\"Nombre\"] == nombre]\n\n        if reporte.empty:\n            print(f\"No hay registros para {nombre}\")\n        else:\n            print(f\"\\nReporte de asistencia para {nombre}:\")\n            print(reporte.to_string(index=False))\n            print(f\"Horas totales: {reporte['Duraci\u00f3n (horas)'].sum():.2f}\")\n\n    def visualizar_estadisticas(self):\n        # Leer datos con pandas\n        df = pd.read_excel(self.archivo)\n\n        # Agrupar por nombre y sumar horas\n        estadisticas = df.groupby(\"Nombre\")[\"Duraci\u00f3n (horas)\"].sum().dropna()\n\n        if estadisticas.empty:\n            print(\"No hay datos para mostrar estad\u00edsticas.\")\n            return\n\n        # Crear gr\u00e1fico de barras\n        plt.figure(figsize=(10, 6))\n        estadisticas.plot(kind=\"bar\")\n        plt.title(\"Horas Totales por Persona\")\n        plt.xlabel(\"Nombre\")\n        plt.ylabel(\"Horas\")\n        plt.xticks(rotation=45)\n        plt.tight_layout()\n        plt.show()\n\ndef menu_principal():\n    sistema = SistemaAsistencia()\n    while True:\n        print(\"\\n===== SISTEMA DE GESTI\u00d3N DE ASISTENCIA =====\")\n        print(\"1. Registrar entrada\")\n        print(\"2. Registrar salida\")\n        print(\"3. Generar reporte individual\")\n        print(\"4. Visualizar estad\u00edsticas\")\n        print(\"5. Salir\")\n\n        opcion = input(\"\\nSeleccione una opci\u00f3n: \")\n\n        if opcion == \"1\":\n            sistema.registrar_entrada()\n        elif opcion == \"2\":\n            sistema.registrar_salida()\n        elif opcion == \"3\":\n            nombre = input(\"Ingrese el nombre para el reporte: \").strip()\n            sistema.generar_reporte_individual(nombre)\n        elif opcion == \"4\":\n            sistema.visualizar_estadisticas()\n        elif opcion == \"5\":\n            print(\"\u00a1Hasta luego!\")\n            break\n        else:\n            print(\"Opci\u00f3n no v\u00e1lida. Intente de nuevo.\")\n\nif __name__ == \"__main__\":\n    menu_principal()\n</code></pre>"},{"location":"content/p7/#actividad-grupal-desarrollo-de-proyecto-con-entornos-virtuales","title":"Actividad Grupal: Desarrollo de Proyecto con Entornos Virtuales","text":"<p>En esta actividad, trabajar\u00e1n en grupos para desarrollar un proyecto de tema libre aplicando los conocimientos sobre entornos virtuales y gesti\u00f3n de dependencias en Python.</p>"},{"location":"content/p7/#objetivos_1","title":"Objetivos:","text":"<ul> <li>Aplicar los conceptos de entornos virtuales en un proyecto colaborativo</li> <li>Practicar la gesti\u00f3n de dependencias en un entorno de equipo</li> <li>Desarrollar habilidades de trabajo en equipo y control de versiones</li> <li>Crear una aplicaci\u00f3n funcional que utilice librer\u00edas externas</li> </ul>"},{"location":"content/p7/#instrucciones_1","title":"Instrucciones:","text":""},{"location":"content/p7/#parte-1-formacion-de-equipos-y-planificacion","title":"Parte 1: Formaci\u00f3n de Equipos y Planificaci\u00f3n","text":"<ul> <li>Formen equipos de 3-4 personas</li> <li>Elijan un tema para su proyecto</li> <li>Definan los requisitos y funcionalidades de su proyecto</li> </ul>"},{"location":"content/p7/#parte-2-configuracion-del-entorno-de-desarrollo","title":"Parte 2: Configuraci\u00f3n del Entorno de Desarrollo","text":"<ul> <li>Creen un repositorio en GitHub para el proyecto</li> <li>Cada miembro debe clonar el repositorio</li> <li>Configuren un entorno virtual en sus m\u00e1quinas locales:    <pre><code>python -m venv .venv\n</code></pre></li> <li>Activen el entorno virtual seg\u00fan su sistema operativo</li> <li>Definan las dependencias iniciales que necesitar\u00e1n y cr\u00e9enlas en un archivo <code>requirements.txt</code></li> <li>Instalen las dependencias:    <pre><code>pip install -r requirements.txt\n</code></pre></li> </ul>"},{"location":"content/p7/#parte-3-desarrollo-colaborativo","title":"Parte 3: Desarrollo Colaborativo","text":"<ul> <li>Utilicen ramas de Git para trabajar en diferentes funcionalidades</li> <li>Cuando agreguen nuevas dependencias, actualicen el archivo <code>requirements.txt</code>:    <pre><code>pip freeze &gt; requirements.txt\n</code></pre></li> <li>Comuniquen a los dem\u00e1s miembros cuando actualicen las dependencias</li> <li>Los dem\u00e1s miembros deben actualizar sus entornos virtuales:    <pre><code>pip install -r requirements.txt\n</code></pre></li> <li>Implementen las funcionalidades planificadas</li> <li>Realicen pruebas para verificar que todo funciona correctamente</li> </ul>"},{"location":"content/p7/#parte-4-documentacion-y-presentacion","title":"Parte 4: Documentaci\u00f3n y Presentaci\u00f3n","text":"<ul> <li>Creen un archivo <code>README.md</code> con:</li> <li>Descripci\u00f3n del proyecto</li> <li>Instrucciones de instalaci\u00f3n y configuraci\u00f3n</li> <li>Gu\u00eda de uso</li> <li>Descripci\u00f3n de las dependencias utilizadas</li> <li>Contribuciones de cada miembro</li> </ul>"},{"location":"content/p7/#entregables-repositorio-github","title":"Entregables (Repositorio GitHub):","text":"<ul> <li>C\u00f3digo fuente completo</li> <li>Archivo <code>requirements.txt</code> con las dependencias del proyecto</li> </ul>"},{"location":"content/p8/","title":"Semana 8 - Pandas","text":"<p>https://pandas.pydata.org/docs/index.html</p> <p>Pandas es una biblioteca de software libre para el an\u00e1lisis de datos y la manipulaci\u00f3n de estructuras de datos en  Python. Es una herramienta muy popular entre cient\u00edficos de datos, analistas de datos y otros profesionales que trabajan con datos.</p>"},{"location":"content/p8/#que-ofrece-pandas","title":"\u00bfQu\u00e9 ofrece Pandas?","text":"<ul> <li>Estructuras de datos potentes:\u00a0Pandas ofrece dos estructuras de datos principales: Series y DataFrames. Las Series son vectores unidimensionales, mientras que los DataFrames son matrices bidimensionales con etiquetas de fila y columna. Estas estructuras de datos permiten almacenar y manipular datos de forma eficiente.</li> <li>Amplia gama de funciones:\u00a0Pandas ofrece una amplia gama de funciones para la limpieza de datos, el an\u00e1lisis estad\u00edstico, la visualizaci\u00f3n de datos y mucho m\u00e1s. Estas funciones permiten realizar an\u00e1lisis de datos complejos de forma r\u00e1pida y sencilla.</li> <li>F\u00e1cil de usar:\u00a0Pandas tiene una sintaxis intuitiva y f\u00e1cil de aprender, lo que la convierte en una herramienta accesible para usuarios de todos los niveles.</li> </ul>"},{"location":"content/p8/#como-instalar-pandas","title":"\u00bfC\u00f3mo instalar Pandas?","text":""},{"location":"content/p8/#usando-pip","title":"Usando pip","text":"<ul> <li>Abra una terminal o s\u00edmbolo del sistema.</li> <li>Ejecute el siguiente comando:</li> </ul> <pre><code>pip install pandas\n</code></pre>"},{"location":"content/p8/#series-en-pandas","title":"Series en Pandas","text":"<p>Una Series en Pandas es una estructura de datos unidimensional similar a un array de Python. Se caracteriza por:</p> <ul> <li>Almacenar datos:\u00a0Puede contener diferentes tipos de datos, como n\u00fameros, cadenas de texto, fechas y valores booleanos.</li> <li>Tener un \u00edndice:\u00a0Cada elemento de la serie tiene un \u00edndice \u00fanico que lo identifica.</li> <li>Ser ordenable:\u00a0Se puede ordenar por el \u00edndice o por los valores que contiene.</li> <li>Permitir operaciones:\u00a0Se pueden realizar operaciones matem\u00e1ticas y estad\u00edsticas con otras Series o con valores escalares.</li> </ul>"},{"location":"content/p8/#ejemplo-de-series","title":"Ejemplo de Series:","text":"<pre><code>import pandas as pd\n\ntemperaturas = pd.Series([20, 25, 30, 22, 28])\n\n# Acceder al valor del \u00edndice 2\nprint(temperaturas[2])\n\n# Calcular la media\nprint(temperaturas.mean())\n\n# Ordenar por valores\nprint(temperaturas.sort_values())\n</code></pre>"},{"location":"content/p8/#dataframes-en-pandas","title":"DataFrames en Pandas","text":"<p>Un DataFrame en Pandas es una estructura de datos bidimensional similar a una hoja de c\u00e1lculo. Se caracteriza por:</p> <ul> <li>Almacenar datos:\u00a0Puede contener diferentes tipos de datos en diferentes columnas.</li> <li>Tener un \u00edndice:\u00a0Cada fila del DataFrame tiene un \u00edndice \u00fanico que la identifica.</li> <li>Tener nombres de columna:\u00a0Cada columna del DataFrame tiene un nombre que identifica el tipo de dato que contiene.</li> <li>Permitir operaciones:\u00a0Se pueden realizar operaciones matem\u00e1ticas y estad\u00edsticas con otros DataFrames o con valores escalares. Ejemplo de DataFrame:</li> </ul> <pre><code>import pandas as pd\n\ndatos = {\n    \"Nombre\": [\"Pedro\", \"Mar\u00eda\", \"Juan\"],\n    \"Edad\": [20, 25, 30],\n    \"Ciudad\": [\"Medell\u00edn\", \"Bogot\u00e1\", \"Cali\"]\n}\n\ndf = pd.DataFrame(datos)\n\n# Ordenar por la columna \"Nombre\"\nprint(df)\n</code></pre>"},{"location":"content/p8/#relacion-entre-series-y-dataframes","title":"Relaci\u00f3n entre Series y DataFrames:","text":"<ul> <li>Una Series puede ser vista como un DataFrame con una sola columna.</li> <li>Un DataFrame puede ser creado a partir de una o m\u00e1s Series.</li> </ul>"},{"location":"content/p8/#ventajas-de-usar-dataframes-y-series","title":"Ventajas de usar DataFrames y Series:","text":"<ul> <li>Permiten almacenar y organizar datos de forma eficiente.</li> <li>Facilitan la limpieza y el an\u00e1lisis de datos.</li> <li>Ofrecen una amplia gama de funciones para la manipulaci\u00f3n de datos.</li> <li>Permiten crear visualizaciones de datos atractivas e informativas.</li> </ul>"},{"location":"content/p8/#diferencias-clave-entre-series-y-dataframes-en-pandas","title":"Diferencias clave entre Series y DataFrames en Pandas:","text":"Info Caracter\u00edstica Series DataFrame Dimensi\u00f3n Una dimensi\u00f3n (como una columna) Dos dimensiones (como una hoja de c\u00e1lculo) \u00cdndice Un solo \u00edndice (etiqueta cada elemento) \u00cdndices de filas y columnas Tipos de datos Un solo tipo de dato por Serie Diferentes tipos de datos por columna Estructura Como una columna Como una tabla o hoja de c\u00e1lculo Analog\u00eda Columna de una hoja de c\u00e1lculo Hoja de c\u00e1lculo completa Uso com\u00fan Datos de series de tiempo, datos con un solo atributo Datos tabulares, conjuntos de datos con m\u00faltiples atributos Ejemplo <code>pd.Series([10, 20, 30])</code> <code>pd.DataFrame({'Nombre': ['Alicia', 'Bob'], 'Edad': [25, 30]})</code>"},{"location":"content/p8/#creando-dataframe","title":"Creando DataFrame","text":""},{"location":"content/p8/#crear-un-dataframe-a-partir-de-series-en-pandas","title":"Crear un DataFrame a partir de Series en Pandas:","text":"<p>Ejemplo:</p> <pre><code>import pandas as pd\n\n# Crear las Series\nnombres = pd.Series(['Alicia', 'Bob', 'Carlos'])\nedades = pd.Series([25, 30, 28])\nciudades = pd.Series(['Nueva York', 'Londres', 'Par\u00eds'])\n\n# Crear el DataFrame a partir de las Series\nmi_dataframe = pd.DataFrame({'Nombre': nombres, 'Edad': edades, 'Ciudad': ciudades})\n\n# Imprimir el DataFrame\nprint(mi_dataframe)\n</code></pre> <p>Salida:</p> <pre><code>      Nombre   Edad      Ciudad\n0      Alicia   25        Nueva York\n1      Bob      30        Londres\n2      Carlos   28        Par\u00eds\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>Crear las Series: Se crean tres Series, una para cada columna del DataFrame: <code>nombres</code>, <code>edades</code> y <code>ciudades</code>.</li> <li>Crear el DataFrame: Se crea el DataFrame <code>mi_dataframe</code> usando un diccionario. Las claves del diccionario son los nombres de las columnas, y los valores son las Series que contienen los datos para cada columna.</li> <li>Imprimir el DataFrame: Se imprime el DataFrame para ver el resultado.</li> </ul> <p>Puntos Clave:</p> <ul> <li>Cada Serie representa una columna del DataFrame.</li> <li>El diccionario que se usa para crear el DataFrame asocia los nombres de las columnas con las Series correspondientes.</li> </ul>"},{"location":"content/p8/#dataframe-desde-un-diccionario","title":"DataFrame desde un diccionario:","text":"<pre><code>import pandas as pd\n\n# Crear un diccionario\ndatos = {\"Nombre\": [\"Ana\", \"Juan\", \"Pedro\"],\n         \"Edad\": [25, 30, 35],\n         \"Ciudad\": [\"Madrid\", \"Barcelona\", \"Sevilla\"]}\n\n# Convertir el diccionario a un DataFrame\ndf = pd.DataFrame(datos)\n\nprint(df)\n\n# Salida:\n#   Nombre  Edad   Ciudad\n# 0    Ana     25  Madrid\n# 1    Juan     30  Barcelona\n# 2   Pedro     35  Sevilla\n</code></pre>"},{"location":"content/p8/#explicacion","title":"Explicaci\u00f3n:","text":"<ul> <li>Se crea un diccionario con las claves como nombres de las columnas y los valores como listas que representan las filas.</li> <li>La funci\u00f3n\u00a0<code>pd.DataFrame</code>\u00a0convierte el diccionario en un DataFrame.</li> </ul>"},{"location":"content/p8/#dataframe-desde-una-lista-de-diccionarios","title":"DataFrame desde una lista de diccionarios:","text":"<pre><code>import pandas as pd\n\ndatos = [{\"Nombre\": \"Ana\", \"Edad\": 25, \"Ciudad\": \"Madrid\"},\n         {\"Nombre\": \"Juan\", \"Edad\": 30, \"Ciudad\": \"Barcelona\"},\n         {\"Nombre\": \"Pedro\", \"Edad\": 35, \"Ciudad\": \"Sevilla\"}]\n\ndf = pd.DataFrame(datos)\n\nprint(df)\n\n# Salida:\n#   Nombre  Edad   Ciudad\n# 0    Ana     25  Madrid\n# 1    Juan     30  Barcelona\n# 2   Pedro     35  Sevilla\n</code></pre>"},{"location":"content/p8/#explicacion_1","title":"Explicaci\u00f3n:","text":"<ul> <li>Se crea una lista de diccionarios, donde cada diccionario representa una fila del DataFrame.</li> <li>La funci\u00f3n\u00a0<code>pd.DataFrame</code>\u00a0convierte la lista de diccionarios en un DataFrame.</li> </ul>"},{"location":"content/p8/#dataframe-desde-una-lista-de-listas","title":"DataFrame desde una lista de listas:","text":"<pre><code>import pandas as pd\n\ndatos = [[\"Ana\", 25, \"Madrid\"],\n         [\"Juan\", 30, \"Barcelona\"],\n         [\"Pedro\", 35, \"Sevilla\"]]\n\ndf = pd.DataFrame(datos, columns=[\"Nombre\", \"Edad\", \"Ciudad\"])\n\nprint(df)\n\n# Salida:\n#   Nombre  Edad   Ciudad\n# 0    Ana     25  Madrid\n# 1    Juan     30  Barcelona\n# 2   Pedro     35  Sevilla\n</code></pre>"},{"location":"content/p8/#explicacion_2","title":"Explicaci\u00f3n:","text":"<ul> <li>Se crea una lista de listas, donde cada lista representa una fila del DataFrame.</li> <li>La funci\u00f3n\u00a0<code>pd.DataFrame</code>\u00a0convierte la lista de listas en un DataFrame, y se especifican los nombres de las columnas.</li> </ul>"},{"location":"content/p8/#dataframe-desde-un-archivo-csv","title":"DataFrame desde un archivo CSV:","text":"<pre><code>import pandas as pd\n\ndf = pd.read_csv(\"data.csv\")\n\nprint(df)\n\n# Salida:\n#   Nombre  Edad   Ciudad\n# 0    Ana     25  Madrid\n# 1    Juan     30  Barcelona\n# 2   Pedro     35  Sevilla\n</code></pre>"},{"location":"content/p8/#explicacion_3","title":"Explicaci\u00f3n:","text":"<ul> <li>Se usa la funci\u00f3n\u00a0<code>pd.read_csv</code>\u00a0para leer un archivo CSV y convertirlo en un DataFrame.</li> </ul> Info <p>C\u00f3mo crear archivos CSV con encabezados desde Python, utilizando la biblioteca <code>csv</code>:</p> <pre><code>import csv\n\n# Define los nombres de las columnas\ncolumn_names = [\"Nombre\", \"Edad\", \"Ciudad\"]\n\n# Crea una lista de datos para cada fila\ndata = [\n    [\"Ana\", 25, \"Madrid\"],\n    [\"Juan\", 30, \"Barcelona\"],\n    [\"Pedro\", 35, \"Sevilla\"]\n]\n\n# Abre el archivo CSV en modo escritura\nwith open(\"data.csv\", \"w\", newline=\"\") as file:\n    writer = csv.writer(file)\n\n    # Escribe la fila de encabezados\n    writer.writerow(column_names)\n\n    # Escribe cada fila de datos\n    for row in data:\n        writer.writerow(row)\n\nprint(\"Archivo CSV creado correctamente.\")\n</code></pre>"},{"location":"content/p8/#dataframe-desde-una-url","title":"DataFrame desde una URL:","text":"<pre><code>import pandas as pd\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/datasets/data/master/people.csv\")\n\nprint(df)\n\n# Salida:\n#   Name  Age  City\n# 0    Ana     25  Madrid\n# 1    Juan     30  Barcelona\n# 2   Pedro     35  Sevilla\n</code></pre>"},{"location":"content/p8/#explicacion_4","title":"Explicaci\u00f3n:","text":"<ul> <li>Se usa la funci\u00f3n\u00a0<code>pd.read_csv</code>\u00a0para leer un archivo CSV desde una URL y convertirlo en un DataFrame.</li> </ul>"},{"location":"content/p8/#dataframe-desde-una-consulta-sql","title":"DataFrame desde una consulta SQL:","text":"<pre><code>import pandas as pd\n\nfrom sqlalchemy import create_engine\n\n# Crear un motor de base de datos\nengine = create_engine(\"sqlite:///database.sqlite\")\n\n# Leer la tabla \"personas\" en un DataFrame\ndf = pd.read_sql_table(\"personas\", engine)\n\nprint(df)\n\n# Salida:\n#   Nombre  Edad   Ciudad\n# 0    Ana     25  Madrid\n# 1    Juan     30  Barcelona\n# 2   Pedro     35  Sevilla\n</code></pre>"},{"location":"content/p8/#explicacion_5","title":"Explicaci\u00f3n:","text":"<ul> <li>Se crea un motor de base de datos usando\u00a0<code>sqlalchemy</code>.</li> <li>La funci\u00f3n\u00a0<code>pd.read_sql_table</code>\u00a0se usa para leer una tabla de la base de datos y convertirla en un DataFrame.</li> </ul>"},{"location":"content/p8/#dataframe-desde-una-hoja-de-calculo-de-excel","title":"DataFrame desde una hoja de c\u00e1lculo de Excel:","text":"<pre><code>import pandas as pd\n\ndf = pd.read_excel(\"data.xlsx\")\n\nprint(df)\n\n# Salida:\n#   Nombre  Edad   Ciudad\n# 0    Ana     25  Madrid\n# 1    Juan     30  Barcelona\n# 2   Pedro     35  Sevilla\n</code></pre>"},{"location":"content/p8/#explicacion_6","title":"Explicaci\u00f3n:","text":"<ul> <li>Se usa la funci\u00f3n\u00a0<code>pd.read_excel</code>\u00a0para leer una hoja de c\u00e1lculo de Excel y convertirla en un DataFrame.</li> </ul>"},{"location":"content/p8/#dataframe-desde-un-archivo-json","title":"DataFrame desde un archivo JSON:","text":"<pre><code>[\n  {\n    \"Nombre\": \"Ana\",\n    \"Edad\": 25,\n    \"Ciudad\": \"Madrid\"\n  },\n  {\n    \"Nombre\": \"Juan\",\n    \"Edad\": 30,\n    \"Ciudad\": \"Barcelona\"\n  },\n  {\n    \"Nombre\": \"Pedro\",\n    \"Edad\": 35,\n    \"Ciudad\": \"Sevilla\"\n  }\n]\n</code></pre> <pre><code>import pandas as pd\n\ndf = pd.read_json(\"data.json\")\n\nprint(df)\n\n# Salida:\n#   Nombre  Edad   Ciudad\n# 0    Ana     25  Madrid\n# 1    Juan     30  Barcelona\n# 2   Pedro     35  Sevilla\n</code></pre>"},{"location":"content/p8/#explicacion_7","title":"Explicaci\u00f3n:","text":"<ul> <li>Se usa la funci\u00f3n\u00a0<code>pd.read_json</code>\u00a0para leer un archivo JSON y convertirlo en un DataFrame.</li> </ul>"},{"location":"content/p8/#dataframe-desde-un-objeto-numpy","title":"DataFrame desde un objeto NumPy:","text":"<pre><code>import pandas as pd\n\nimport numpy as np\n\ndatos = np.array([[\"Ana\", 25, \"Madrid\"],\n                   [\"Juan\", 30, \"Barcelona\"],\n                   [\"Pedro\", 35, \"Sevilla\"]])\n\ndf = pd.DataFrame(datos, columns=[\"Nombre\", \"Edad\", \"Ciudad\"])\n\nprint(df)\n\n# Salida:\n#   Nombre  Edad   Ciudad\n# 0    Ana     25  Madrid\n# 1    Juan     30  Barcelona\n# 2   Pedro     35  Sevilla\n</code></pre>"},{"location":"content/p8/#explicacion_8","title":"Explicaci\u00f3n:","text":"<ul> <li>Se crea un array de NumPy con las filas y columnas del DataFrame.</li> <li>La funci\u00f3n\u00a0<code>pd.DataFrame</code>\u00a0convierte el array de NumPy en un DataFrame, y se especifican los nombres de las columnas.</li> </ul>"},{"location":"content/p8/#dataframe-desde-firebase","title":"DataFrame desde Firebase:","text":"<pre><code>pip install --upgrade firebase-admin\n</code></pre> <pre><code>import pandas as pd\n\nimport firebase_admin\nfrom firebase_admin import credentials\nfrom firebase_admin import firestore\n\n# Use a service account.\ncred = credentials.Certificate('key.json')\napp = firebase_admin.initialize_app(cred)\ndb = firestore.client()\n\n# Get data from a Firestore collection\nusers = db.collection('user').stream()\n# Convert data to a list of dictionaries\nusers_data = [doc.to_dict() for doc in users]\n# Create DataFrame\ndf = pd.DataFrame(users_data)\n\nprint(df)\n</code></pre>"},{"location":"content/p8/#explicacion_9","title":"Explicaci\u00f3n:","text":"<p>1. Importaciones:</p> <ul> <li><code>pandas as pd</code>: Importa la biblioteca Pandas para manipulaci\u00f3n de datos y creaci\u00f3n de DataFrames.</li> <li> <p>Bibliotecas de Firebase Admin:</p> <ul> <li><code>firebase_admin</code>: Biblioteca base para interactuar con los servicios de Firebase Admin.</li> <li><code>credentials</code>: Proporciona funciones para la autenticaci\u00f3n con Firebase.</li> <li><code>firestore</code>: Proporciona acceso a la base de datos Firestore. 2. Autenticaci\u00f3n:</li> </ul> </li> <li> <p><code>cred = credentials.Certificate('key.json')</code>: Carga las credenciales del proyecto Firebase desde un archivo llamado \"key.json\". Este archivo contiene informaci\u00f3n privada y es esencial para un acceso seguro a su proyecto.</p> </li> <li><code>app = firebase_admin.initialize_app(cred)</code>: Inicializa la aplicaci\u00f3n Firebase Admin utilizando las credenciales cargadas.</li> </ul> <p>3. Acceso a Firestore:</p> <ul> <li><code>db = firestore.client()</code>: Crea un objeto cliente para interactuar con la base de datos Firestore.</li> </ul> <p>4. Recuperaci\u00f3n de datos:</p> <ul> <li><code>users = db.collection('user').stream()</code>: Recupera datos de la colecci\u00f3n Firestore llamada \"user\". El m\u00e9todo\u00a0<code>stream()</code>\u00a0recupera datos en tiempo real, lo que significa que puede capturar cualquier cambio que ocurra en la colecci\u00f3n.</li> </ul> <p>5. Conversi\u00f3n de datos:</p> <ul> <li><code>users_data = [doc.to_dict() para doc en users]</code>: Esta l\u00ednea itera a trav\u00e9s de los datos recuperados (representados por objetos\u00a0<code>doc</code>) y convierte cada documento en un diccionario utilizando el m\u00e9todo\u00a0<code>to_dict()</code>. Esto crea una lista de diccionarios, donde cada diccionario representa un solo documento en la colecci\u00f3n.</li> </ul> <p>6. Creaci\u00f3n de DataFrame:</p> <ul> <li><code>df = pd.DataFrame(users_data)</code>: Crea un DataFrame de Pandas a partir de la lista de diccionarios (<code>users_data</code>). El DataFrame tendr\u00e1 columnas que corresponden a las claves de los diccionarios y filas que representan cada documento.</li> </ul> <p>7. Impresi\u00f3n del DataFrame:</p> <ul> <li><code>print(df)</code>: Imprime el DataFrame reci\u00e9n creado en la consola. Esto mostrar\u00e1 los datos recuperados de la colecci\u00f3n Firestore en un formato tabular.</li> </ul>"},{"location":"content/p8/#dataframe-desde-mongodb","title":"DataFrame desde MongoDB:","text":"<pre><code>python3 -m pip install pymongo\n</code></pre> <pre><code>import pymongo\nimport pandas as pd\nfrom pymongo import MongoClient\n\nclient = MongoClient()\n\nclient = MongoClient('mongodb+srv://') #conexi\u00f3n mongodb\ndb = client[\"dbTest\"]\ncollection = db[\"user\"]\n\ncursor = collection.find()\nfor document in cursor:\n    print(document)\n\ndf = pd.DataFrame(list(collection.find()))\nprint(df)\n</code></pre>"},{"location":"content/p8/#explicacion_10","title":"Explicaci\u00f3n:","text":"<p>Importaciones:</p> <ul> <li><code>import pymongo</code>: Importa la biblioteca\u00a0<code>pymongo</code>\u00a0para interactuar con la base de datos MongoDB.</li> <li><code>import pandas as pd</code>: Importa la biblioteca\u00a0<code>pandas</code>\u00a0para crear y manipular DataFrames.</li> <li><code>from pymongo import MongoClient</code>: Importa la clase\u00a0<code>MongoClient</code>\u00a0de la biblioteca\u00a0<code>pymongo</code>\u00a0para establecer la conexi\u00f3n con el servidor MongoDB.</li> </ul> <p>Conexi\u00f3n a MongoDB:</p> <ul> <li><code>client = MongoClient()</code>: Crea una instancia del cliente\u00a0<code>MongoClient</code>\u00a0para conectarse al servidor MongoDB. La versi\u00f3n original dejaba la conexi\u00f3n incompleta, so here we establish a connection to a MongoDB server using the\u00a0<code>MongoClient</code>\u00a0constructor. You'll need to replace\u00a0<code>'mongodb+srv://'</code>\u00a0with the actual connection string for your MongoDB database, including authentication details if required.</li> </ul> <p>Acceso a la base de datos y colecci\u00f3n:</p> <ul> <li><code>db = client[\"dbTest\"]</code>: Obtiene una referencia a la base de datos denominada \"dbTest\". Reemplace \"dbTest\" con el nombre real de su base de datos.</li> <li><code>collection = db[\"user\"]</code>: Obtiene una referencia a la colecci\u00f3n llamada \"user\" dentro de la base de datos \"dbTest\". Reemplace \"user\" con el nombre de su colecci\u00f3n si es diferente.</li> </ul> <p>Lectura de datos:</p> <ul> <li><code>cursor = collection.find()</code>: Realiza una consulta para recuperar todos los documentos de la colecci\u00f3n \"user\". La variable\u00a0<code>cursor</code>\u00a0almacena un iterador que apunta a cada documento encontrado.</li> </ul> <p>Recorrido de documentos:</p> <ul> <li><code>for document in cursor:</code>: Inicia un bucle\u00a0<code>for</code>\u00a0que itera a trav\u00e9s de cada documento en el cursor.</li> <li><code>print(document)</code>: Dentro del bucle, imprime el contenido de cada documento completo en la consola. Esto puede ser \u00fatil para inspeccionar los datos individualmente.</li> </ul> <p>Creaci\u00f3n de DataFrame:</p> <ul> <li><code>df = pd.DataFrame(list(collection.find()))</code>: Convierte los documentos de la colecci\u00f3n \"user\" en un DataFrame de Pandas.<ul> <li><code>collection.find()</code>: Ejecuta la consulta nuevamente para recuperar todos los documentos.</li> <li><code>list()</code>: Convierte el resultado de la consulta en una lista de diccionarios, donde cada diccionario representa un documento.</li> <li><code>pd.DataFrame()</code>: Crea un DataFrame de Pandas a partir de la lista de diccionarios.</li> </ul> </li> </ul> <p>Impresi\u00f3n del DataFrame:</p> <ul> <li><code>print(df)</code>: Imprime el DataFrame completo en la consola. Esto muestra los datos en una estructura tabular con columnas y filas, permitiendo una visualizaci\u00f3n m\u00e1s organizada.</li> </ul>"},{"location":"content/p8/#dataframe-desde-una-api-rest","title":"DataFrame desde una API REST:","text":"<pre><code>import pandas as pd\nimport requests\n\n# Realizar petici\u00f3n GET a la API\nresponse = requests.get('https://playground.mockoon.com/users')\n\n# Verificar que la petici\u00f3n fue exitosa\nif response.status_code == 200:\n    # Convertir la respuesta JSON a DataFrame\n    data = response.json()\n    df = pd.DataFrame(data)\n\n    print(df)\nelse:\n    print(f\"Error en la petici\u00f3n: {response.status_code}\") \n</code></pre>"},{"location":"content/p8/#explicacion_11","title":"Explicaci\u00f3n:","text":"<p>Importaciones:</p> <ul> <li><code>import pandas as pd</code>: Importa la biblioteca Pandas para crear y manipular DataFrames.</li> <li><code>import requests</code>: Importa la biblioteca <code>requests</code> para realizar peticiones HTTP a APIs.</li> </ul> <p>Petici\u00f3n a la API:</p> <ul> <li><code>response = requests.get('https://playground.mockoon.com/users')</code>: Realiza una petici\u00f3n GET a la API especificada. La variable <code>response</code> contiene la respuesta del servidor.</li> </ul> <p>Verificaci\u00f3n de la respuesta:</p> <ul> <li><code>if response.status_code == 200:</code>: Verifica que la petici\u00f3n fue exitosa (c\u00f3digo de estado 200 significa \"OK\").</li> </ul> <p>Conversi\u00f3n a DataFrame:</p> <ul> <li><code>data = response.json()</code>: Convierte la respuesta JSON de la API en un objeto Python (lista de diccionarios).</li> <li><code>df = pd.DataFrame(data)</code>: Crea un DataFrame de Pandas a partir de los datos JSON.</li> </ul> <p>Manejo de errores:</p> <ul> <li><code>else: print(f\"Error en la petici\u00f3n: {response.status_code}\")</code>: Si la petici\u00f3n no fue exitosa, imprime el c\u00f3digo de error.</li> </ul> <p>Ventajas de este m\u00e9todo:</p> <ul> <li>Permite acceder a datos en tiempo real desde APIs p\u00fablicas o privadas.</li> <li>Facilita la integraci\u00f3n de datos externos en an\u00e1lisis de datos.</li> <li>Los datos se actualizan autom\u00e1ticamente cada vez que se ejecuta el c\u00f3digo.</li> </ul> <p>Nota: Es necesario instalar la biblioteca <code>requests</code> si no est\u00e1 disponible:</p> <pre><code>pip install requests\n</code></pre>"},{"location":"content/p9/","title":"Semana 9 - Filtros, Condiciones y Limpieza de Datos con Pandas","text":""},{"location":"content/p9/#objetivos-de-aprendizaje","title":"Objetivos de Aprendizaje","text":"<p>Al finalizar esta semana, el estudiante ser\u00e1 capaz de:</p> <ul> <li>Aplicar filtros y condiciones para seleccionar datos espec\u00edficos</li> <li>Implementar t\u00e9cnicas de limpieza de datos</li> <li>Preparar datasets para an\u00e1lisis posteriores</li> <li>Manejar valores faltantes y duplicados</li> </ul>"},{"location":"content/p9/#1-filtrado-de-datos-y-operadores-condicionales","title":"1. Filtrado de Datos y Operadores Condicionales","text":""},{"location":"content/p9/#11-introduccion-a-los-filtros-en-pandas","title":"1.1 Introducci\u00f3n a los Filtros en Pandas","text":"<p>El filtrado de datos es una de las operaciones m\u00e1s fundamentales en el an\u00e1lisis de datos. Pandas proporciona m\u00faltiples formas de filtrar DataFrames utilizando operadores condicionales, m\u00e9todos especializados y expresiones l\u00f3gicas.</p> <pre><code>import pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\n\n# Crear un DataFrame m\u00e1s completo para ejemplos\ndata = {\n    'nombre': ['Ana Garc\u00eda', 'Carlos L\u00f3pez', 'Mar\u00eda Rodr\u00edguez', 'Juan P\u00e9rez', 'Sof\u00eda Mart\u00edn', \n               'Pedro S\u00e1nchez', 'Laura Gonz\u00e1lez', 'Miguel Torres', 'Carmen Ruiz', 'David Moreno'],\n    'edad': [25, 30, 22, 35, 28, 45, 33, 29, 41, 26],\n    'salario': [50000, 75000, 45000, 80000, 60000, 95000, 70000, 55000, 85000, 48000],\n    'departamento': ['IT', 'Ventas', 'IT', 'Marketing', 'Ventas', 'IT', 'RRHH', 'Marketing', 'RRHH', 'Ventas'],\n    'fecha_ingreso': ['2020-01-15', '2019-03-20', '2021-06-10', '2018-11-05', '2020-09-12',\n                      '2017-02-28', '2019-08-14', '2021-01-30', '2018-05-22', '2020-12-03'],\n    'activo': [True, True, True, False, True, True, True, True, False, True],\n    'horas_semanales': [40, 45, 38, 40, 42, 48, 40, 35, 40, 44]\n}\n\ndf = pd.DataFrame(data)\ndf['fecha_ingreso'] = pd.to_datetime(df['fecha_ingreso'])\n\nprint(\"DataFrame completo:\")\nprint(df)\nprint(\"\\nInformaci\u00f3n del DataFrame:\")\nprint(df.info())\n</code></pre>"},{"location":"content/p9/#12-operadores-de-comparacion","title":"1.2 Operadores de Comparaci\u00f3n","text":""},{"location":"content/p9/#121-operadores-basicos-de-comparacion","title":"1.2.1 Operadores B\u00e1sicos de Comparaci\u00f3n","text":"<pre><code># Operador de igualdad (==)\nprint(\"=== OPERADOR DE IGUALDAD (==) ===\")\nempleados_it = df[df['departamento'] == 'IT']\nprint(\"Empleados del departamento IT:\")\nprint(empleados_it[['nombre', 'departamento']])\n\n# Operador de desigualdad (!=)\nprint(\"\\n=== OPERADOR DE DESIGUALDAD (!=) ===\")\nno_it = df[df['departamento'] != 'IT']\nprint(\"Empleados que NO son del departamento IT:\")\nprint(no_it[['nombre', 'departamento']])\n\n# Operador mayor que (&gt;)\nprint(\"\\n=== OPERADOR MAYOR QUE (&gt;) ===\")\nsalario_alto = df[df['salario'] &gt; 70000]\nprint(\"Empleados con salario mayor a 70,000:\")\nprint(salario_alto[['nombre', 'salario']])\n\n# Operador menor que (&lt;)\nprint(\"\\n=== OPERADOR MENOR QUE (&lt;) ===\")\nempleados_jovenes = df[df['edad'] &lt; 30]\nprint(\"Empleados menores de 30 a\u00f1os:\")\nprint(empleados_jovenes[['nombre', 'edad']])\n\n# Operador mayor o igual que (&gt;=)\nprint(\"\\n=== OPERADOR MAYOR O IGUAL QUE (&gt;=) ===\")\nexperiencia_media = df[df['edad'] &gt;= 30]\nprint(\"Empleados de 30 a\u00f1os o m\u00e1s:\")\nprint(experiencia_media[['nombre', 'edad']])\n\n# Operador menor o igual que (&lt;=)\nprint(\"\\n=== OPERADOR MENOR O IGUAL QUE (&lt;=) ===\")\nsalario_medio = df[df['salario'] &lt;= 60000]\nprint(\"Empleados con salario de 60,000 o menos:\")\nprint(salario_medio[['nombre', 'salario']])\n</code></pre>"},{"location":"content/p9/#122-comparaciones-con-fechas","title":"1.2.2 Comparaciones con Fechas","text":"<pre><code>print(\"\\n=== FILTROS CON FECHAS ===\")\n\n# Empleados que ingresaron despu\u00e9s de 2020\nfecha_corte = pd.to_datetime('2020-01-01')\ningresos_recientes = df[df['fecha_ingreso'] &gt; fecha_corte]\nprint(\"Empleados que ingresaron despu\u00e9s del 1 de enero de 2020:\")\nprint(ingresos_recientes[['nombre', 'fecha_ingreso']])\n\n# Empleados con m\u00e1s de 3 a\u00f1os en la empresa\nfecha_limite = datetime.now() - timedelta(days=3*365)\nveteranos = df[df['fecha_ingreso'] &lt; fecha_limite]\nprint(\"\\nEmpleados con m\u00e1s de 3 a\u00f1os en la empresa:\")\nprint(veteranos[['nombre', 'fecha_ingreso']])\n</code></pre>"},{"location":"content/p9/#13-operadores-logicos","title":"1.3 Operadores L\u00f3gicos","text":""},{"location":"content/p9/#131-operador-and","title":"1.3.1 Operador AND (&amp;)","text":"<pre><code>print(\"\\n=== OPERADOR AND (&amp;) ===\")\n\n# Empleados j\u00f3venes del departamento IT\njovenes_it = df[(df['edad'] &lt; 30) &amp; (df['departamento'] == 'IT')]\nprint(\"Empleados menores de 30 a\u00f1os Y del departamento IT:\")\nprint(jovenes_it[['nombre', 'edad', 'departamento']])\n\n# Empleados con salario alto y activos\nsalario_alto_activos = df[(df['salario'] &gt; 70000) &amp; (df['activo'] == True)]\nprint(\"\\nEmpleados con salario &gt; 70,000 Y que est\u00e1n activos:\")\nprint(salario_alto_activos[['nombre', 'salario', 'activo']])\n\n# M\u00faltiples condiciones AND\ncondiciones_multiples = df[\n    (df['edad'] &gt;= 25) &amp; \n    (df['edad'] &lt;= 35) &amp; \n    (df['salario'] &gt; 50000) &amp; \n    (df['activo'] == True)\n]\nprint(\"\\nEmpleados entre 25-35 a\u00f1os, salario &gt; 50,000 y activos:\")\nprint(condiciones_multiples[['nombre', 'edad', 'salario', 'activo']])\n</code></pre>"},{"location":"content/p9/#132-operador-or","title":"1.3.2 Operador OR (|)","text":"<pre><code>print(\"\\n=== OPERADOR OR (|) ===\")\n\n# Empleados muy j\u00f3venes o muy experimentados\nedades_extremas = df[(df['edad'] &lt; 25) | (df['edad'] &gt; 40)]\nprint(\"Empleados menores de 25 a\u00f1os O mayores de 40:\")\nprint(edades_extremas[['nombre', 'edad']])\n\n# Empleados de IT o Marketing\nit_marketing = df[(df['departamento'] == 'IT') | (df['departamento'] == 'Marketing')]\nprint(\"\\nEmpleados de IT O Marketing:\")\nprint(it_marketing[['nombre', 'departamento']])\n\n# Salarios muy altos o muy bajos\nsalarios_extremos = df[(df['salario'] &lt; 50000) | (df['salario'] &gt; 80000)]\nprint(\"\\nEmpleados con salario &lt; 50,000 O &gt; 80,000:\")\nprint(salarios_extremos[['nombre', 'salario']])\n</code></pre>"},{"location":"content/p9/#133-operador-not","title":"1.3.3 Operador NOT (~)","text":"<pre><code>print(\"\\n=== OPERADOR NOT (~) ===\")\n\n# Empleados que NO son del departamento IT\nno_it = df[~(df['departamento'] == 'IT')]\nprint(\"Empleados que NO son del departamento IT:\")\nprint(no_it[['nombre', 'departamento']])\n\n# Empleados que NO est\u00e1n activos\ninactivos = df[~df['activo']]\nprint(\"\\nEmpleados que NO est\u00e1n activos:\")\nprint(inactivos[['nombre', 'activo']])\n\n# Negaci\u00f3n de condiciones complejas\nno_jovenes_it = df[~((df['edad'] &lt; 30) &amp; (df['departamento'] == 'IT'))]\nprint(\"\\nEmpleados que NO son (j\u00f3venes Y de IT):\")\nprint(no_jovenes_it[['nombre', 'edad', 'departamento']])\n</code></pre>"},{"location":"content/p9/#14-metodos-de-filtrado-avanzados","title":"1.4 M\u00e9todos de Filtrado Avanzados","text":""},{"location":"content/p9/#141-metodo-isin","title":"1.4.1 M\u00e9todo isin()","text":"<pre><code>print(\"\\n=== M\u00c9TODO isin() ===\")\n\n# Filtrar por m\u00faltiples departamentos\ndepartamentos_tecnicos = ['IT', 'Marketing']\nempleados_tecnicos = df[df['departamento'].isin(departamentos_tecnicos)]\nprint(\"Empleados de departamentos t\u00e9cnicos (IT, Marketing):\")\nprint(empleados_tecnicos[['nombre', 'departamento']])\n\n# Filtrar por m\u00faltiples edades espec\u00edficas\nedades_especificas = [25, 30, 35]\nempleados_edades_esp = df[df['edad'].isin(edades_especificas)]\nprint(\"\\nEmpleados con edades espec\u00edficas (25, 30, 35):\")\nprint(empleados_edades_esp[['nombre', 'edad']])\n\n# Negaci\u00f3n con isin()\nno_tecnicos = df[~df['departamento'].isin(departamentos_tecnicos)]\nprint(\"\\nEmpleados que NO son de departamentos t\u00e9cnicos:\")\nprint(no_tecnicos[['nombre', 'departamento']])\n</code></pre>"},{"location":"content/p9/#142-metodo-between","title":"1.4.2 M\u00e9todo between()","text":"<pre><code>print(\"\\n=== M\u00c9TODO between() ===\")\n\n# Empleados en rango de edad\nedad_media = df[df['edad'].between(25, 35)]\nprint(\"Empleados entre 25 y 35 a\u00f1os (inclusive):\")\nprint(edad_media[['nombre', 'edad']])\n\n# Salarios en rango espec\u00edfico\nsalario_medio = df[df['salario'].between(50000, 75000)]\nprint(\"\\nEmpleados con salario entre 50,000 y 75,000:\")\nprint(salario_medio[['nombre', 'salario']])\n\n# between() con fechas\nfecha_inicio = pd.to_datetime('2019-01-01')\nfecha_fin = pd.to_datetime('2020-12-31')\ningresos_periodo = df[df['fecha_ingreso'].between(fecha_inicio, fecha_fin)]\nprint(\"\\nEmpleados que ingresaron entre 2019 y 2020:\")\nprint(ingresos_periodo[['nombre', 'fecha_ingreso']])\n</code></pre>"},{"location":"content/p9/#143-filtros-con-strings","title":"1.4.3 Filtros con Strings","text":"<pre><code>print(\"\\n=== FILTROS CON STRINGS ===\")\n\n# Nombres que contienen una subcadena\nnombres_con_a = df[df['nombre'].str.contains('a', case=False)]\nprint(\"Empleados cuyo nombre contiene 'a' (sin distinci\u00f3n de may\u00fasculas):\")\nprint(nombres_con_a[['nombre']])\n\n# Nombres que empiezan con una letra espec\u00edfica\nnombres_m = df[df['nombre'].str.startswith('M')]\nprint(\"\\nEmpleados cuyo nombre empieza con 'M':\")\nprint(nombres_m[['nombre']])\n\n# Nombres que terminan con una subcadena\nnombres_ez = df[df['nombre'].str.endswith('ez')]\nprint(\"\\nEmpleados cuyo apellido termina en 'ez':\")\nprint(nombres_ez[['nombre']])\n\n# Filtros con expresiones regulares\nimport re\nnombres_patron = df[df['nombre'].str.contains(r'^[A-M]', regex=True)]\nprint(\"\\nEmpleados cuyo nombre empieza con letras A-M:\")\nprint(nombres_patron[['nombre']])\n</code></pre>"},{"location":"content/p9/#15-metodo-query","title":"1.5 M\u00e9todo query()","text":""},{"location":"content/p9/#151-sintaxis-basica-de-query","title":"1.5.1 Sintaxis B\u00e1sica de query()","text":"<pre><code>print(\"\\n=== M\u00c9TODO query() - SINTAXIS B\u00c1SICA ===\")\n\n# Consulta simple\nresultado1 = df.query('edad &gt; 30')\nprint(\"Empleados mayores de 30 a\u00f1os (usando query):\")\nprint(resultado1[['nombre', 'edad']])\n\n# M\u00faltiples condiciones con and\nresultado2 = df.query('edad &gt; 25 and salario &gt; 60000')\nprint(\"\\nEmpleados &gt; 25 a\u00f1os y salario &gt; 60,000:\")\nprint(resultado2[['nombre', 'edad', 'salario']])\n\n# M\u00faltiples condiciones con or\nresultado3 = df.query('departamento == \"IT\" or departamento == \"Marketing\"')\nprint(\"\\nEmpleados de IT o Marketing:\")\nprint(resultado3[['nombre', 'departamento']])\n</code></pre>"},{"location":"content/p9/#152-query-avanzado","title":"1.5.2 query() Avanzado","text":"<pre><code>print(\"\\n=== M\u00c9TODO query() - AVANZADO ===\")\n\n# Usando variables externas\nedad_minima = 30\nsalario_minimo = 70000\nresultado4 = df.query('edad &gt;= @edad_minima and salario &gt;= @salario_minimo')\nprint(f\"Empleados &gt;= {edad_minima} a\u00f1os y salario &gt;= {salario_minimo}:\")\nprint(resultado4[['nombre', 'edad', 'salario']])\n\n# Consultas con listas\ndepartamentos = ['IT', 'RRHH']\nresultado5 = df.query('departamento in @departamentos')\nprint(f\"\\nEmpleados en departamentos {departamentos}:\")\nprint(resultado5[['nombre', 'departamento']])\n\n# Consultas complejas\nresultado6 = df.query('(edad &lt; 30 and salario &gt; 50000) or (edad &gt; 40 and departamento == \"IT\")')\nprint(\"\\nEmpleados j\u00f3venes con buen salario O veteranos de IT:\")\nprint(resultado6[['nombre', 'edad', 'salario', 'departamento']])\n</code></pre>"},{"location":"content/p9/#16-filtros-con-condiciones-multiples-y-complejas","title":"1.6 Filtros con Condiciones M\u00faltiples y Complejas","text":""},{"location":"content/p9/#161-combinando-multiples-operadores","title":"1.6.1 Combinando M\u00faltiples Operadores","text":"<pre><code>print(\"\\n=== CONDICIONES M\u00daLTIPLES Y COMPLEJAS ===\")\n\n# Condici\u00f3n muy espec\u00edfica\ncondicion_compleja = df[\n    ((df['edad'] &gt;= 25) &amp; (df['edad'] &lt;= 35)) &amp;  # Edad entre 25-35\n    (df['salario'] &gt; df['salario'].median()) &amp;   # Salario sobre la mediana\n    (df['activo'] == True) &amp;                     # Empleado activo\n    (df['horas_semanales'] &gt;= 40)                # Tiempo completo\n]\nprint(\"Empleados que cumplen condiciones complejas:\")\nprint(condicion_compleja[['nombre', 'edad', 'salario', 'activo', 'horas_semanales']])\n\n# Usando funciones lambda para condiciones personalizadas\ndef es_senior(row):\n    return row['edad'] &gt; 35 and row['salario'] &gt; 75000\n\nseniors = df[df.apply(es_senior, axis=1)]\nprint(\"\\nEmpleados senior (&gt;35 a\u00f1os y salario &gt;75,000):\")\nprint(seniors[['nombre', 'edad', 'salario']])\n</code></pre>"},{"location":"content/p9/#162-filtros-dinamicos","title":"1.6.2 Filtros Din\u00e1micos","text":"<pre><code>print(\"\\n=== FILTROS DIN\u00c1MICOS ===\")\n\n# Funci\u00f3n para crear filtros din\u00e1micos\ndef filtrar_empleados(df, edad_min=None, edad_max=None, salario_min=None, \n                     departamentos=None, solo_activos=False):\n    \"\"\"\n    Funci\u00f3n para filtrar empleados con m\u00faltiples criterios opcionales\n    \"\"\"\n    resultado = df.copy()\n\n    if edad_min is not None:\n        resultado = resultado[resultado['edad'] &gt;= edad_min]\n\n    if edad_max is not None:\n        resultado = resultado[resultado['edad'] &lt;= edad_max]\n\n    if salario_min is not None:\n        resultado = resultado[resultado['salario'] &gt;= salario_min]\n\n    if departamentos is not None:\n        resultado = resultado[resultado['departamento'].isin(departamentos)]\n\n    if solo_activos:\n        resultado = resultado[resultado['activo'] == True]\n\n    return resultado\n\n# Ejemplos de uso de filtros din\u00e1micos\nprint(\"Filtro 1 - Solo empleados activos de IT con salario &gt; 60,000:\")\nfiltro1 = filtrar_empleados(df, salario_min=60000, departamentos=['IT'], solo_activos=True)\nprint(filtro1[['nombre', 'departamento', 'salario', 'activo']])\n\nprint(\"\\nFiltro 2 - Empleados entre 25-40 a\u00f1os:\")\nfiltro2 = filtrar_empleados(df, edad_min=25, edad_max=40)\nprint(filtro2[['nombre', 'edad']])\n</code></pre>"},{"location":"content/p9/#2-manejo-de-valores-faltantes","title":"2. Manejo de Valores Faltantes","text":""},{"location":"content/p9/#21-identificacion-de-valores-nulos","title":"2.1 Identificaci\u00f3n de Valores Nulos","text":"<pre><code># Crear DataFrame con valores faltantes\ndata_con_nulos = {\n    'A': [1, 2, np.nan, 4, 5],\n    'B': [np.nan, 2, 3, 4, np.nan],\n    'C': [1, 2, 3, 4, 5]\n}\ndf_nulos = pd.DataFrame(data_con_nulos)\n\n# Verificar valores nulos\nprint(df_nulos.isnull())\nprint(df_nulos.isnull().sum())\nprint(df_nulos.info())\n</code></pre>"},{"location":"content/p9/#22-tratamiento-de-valores-faltantes","title":"2.2 Tratamiento de Valores Faltantes","text":"<pre><code># Eliminar filas con valores nulos\ndf_sin_nulos = df_nulos.dropna()\n\n# Eliminar columnas con valores nulos\ndf_sin_columnas_nulas = df_nulos.dropna(axis=1)\n\n# Rellenar valores nulos\ndf_rellenado = df_nulos.fillna(0)  # Con cero\ndf_rellenado_media = df_nulos.fillna(df_nulos.mean())  # Con la media\ndf_rellenado_anterior = df_nulos.fillna(method='ffill')  # Valor anterior\n</code></pre>"},{"location":"content/p9/#3-limpieza-de-datos","title":"3. Limpieza de Datos","text":""},{"location":"content/p9/#31-eliminacion-de-duplicados","title":"3.1 Eliminaci\u00f3n de Duplicados","text":"<pre><code># Crear DataFrame con duplicados\ndata_duplicados = {\n    'nombre': ['Ana', 'Carlos', 'Ana', 'Mar\u00eda', 'Carlos'],\n    'edad': [25, 30, 25, 22, 30]\n}\ndf_dup = pd.DataFrame(data_duplicados)\n\n# Identificar duplicados\nprint(df_dup.duplicated())\n\n# Eliminar duplicados\ndf_sin_duplicados = df_dup.drop_duplicates()\n\n# Eliminar duplicados basado en columnas espec\u00edficas\ndf_sin_dup_nombre = df_dup.drop_duplicates(subset=['nombre'])\n</code></pre>"},{"location":"content/p9/#32-transformacion-de-datos","title":"3.2 Transformaci\u00f3n de Datos","text":"<pre><code># Convertir tipos de datos\ndf['edad'] = df['edad'].astype('int32')\ndf['salario'] = df['salario'].astype('float64')\n\n# Limpiar texto\ndf['nombre'] = df['nombre'].str.strip()  # Eliminar espacios\ndf['nombre'] = df['nombre'].str.upper()  # Convertir a may\u00fasculas\n\n# Reemplazar valores\ndf['departamento'] = df['departamento'].replace('IT', 'Tecnolog\u00eda')\n</code></pre>"},{"location":"content/p9/#4-validacion-y-preparacion-de-datos","title":"4. Validaci\u00f3n y Preparaci\u00f3n de Datos","text":""},{"location":"content/p9/#41-validacion-de-rangos","title":"4.1 Validaci\u00f3n de Rangos","text":"<pre><code># Validar rangos de edad\nedades_validas = df[(df['edad'] &gt;= 18) &amp; (df['edad'] &lt;= 65)]\n\n# Identificar outliers usando IQR\nQ1 = df['salario'].quantile(0.25)\nQ3 = df['salario'].quantile(0.75)\nIQR = Q3 - Q1\nlimite_inferior = Q1 - 1.5 * IQR\nlimite_superior = Q3 + 1.5 * IQR\n\nsin_outliers = df[(df['salario'] &gt;= limite_inferior) &amp; (df['salario'] &lt;= limite_superior)]\n</code></pre>"},{"location":"content/p9/#42-normalizacion-y-estandarizacion","title":"4.2 Normalizaci\u00f3n y Estandarizaci\u00f3n","text":"<pre><code>from sklearn.preprocessing import StandardScaler, MinMaxScaler\n\n# Normalizaci\u00f3n (0-1)\nscaler_minmax = MinMaxScaler()\ndf['salario_normalizado'] = scaler_minmax.fit_transform(df[['salario']])\n\n# Estandarizaci\u00f3n (media=0, std=1)\nscaler_standard = StandardScaler()\ndf['salario_estandarizado'] = scaler_standard.fit_transform(df[['salario']])\n</code></pre>"},{"location":"content/p9/#5-ejercicios-practicos","title":"5. Ejercicios Pr\u00e1cticos","text":""},{"location":"content/p9/#ejercicio-1-limpieza-completa","title":"Ejercicio 1: Limpieza Completa","text":"<pre><code># Dataset de ejemplo con problemas comunes\ndata_problematica = {\n    'nombre': ['  Ana  ', 'CARLOS', 'mar\u00eda', '  Juan', 'Sof\u00eda', 'Ana'],\n    'edad': [25, 30, np.nan, 35, 28, 25],\n    'email': ['ana@email.com', 'CARLOS@EMAIL.COM', 'maria@email', 'juan@email.com', None, 'ana@email.com'],\n    'salario': [50000, 75000, 45000, 999999, 60000, 50000]  # 999999 es outlier\n}\n\ndf_problematico = pd.DataFrame(data_problematica)\n\n# Proceso de limpieza paso a paso\n# 1. Limpiar nombres\ndf_limpio = df_problematico.copy()\ndf_limpio['nombre'] = df_limpio['nombre'].str.strip().str.title()\n\n# 2. Manejar valores faltantes\ndf_limpio['edad'].fillna(df_limpio['edad'].median(), inplace=True)\ndf_limpio.dropna(subset=['email'], inplace=True)\n\n# 3. Validar emails\ndf_limpio = df_limpio[df_limpio['email'].str.contains('@.*\\.', regex=True)]\n\n# 4. Eliminar duplicados\ndf_limpio.drop_duplicates(inplace=True)\n\n# 5. Tratar outliers\nQ1 = df_limpio['salario'].quantile(0.25)\nQ3 = df_limpio['salario'].quantile(0.75)\nIQR = Q3 - Q1\ndf_limpio = df_limpio[\n    (df_limpio['salario'] &gt;= Q1 - 1.5 * IQR) &amp; \n    (df_limpio['salario'] &lt;= Q3 + 1.5 * IQR)\n]\n\nprint(\"Dataset original:\")\nprint(df_problematico)\nprint(\"\\nDataset limpio:\")\nprint(df_limpio)\n</code></pre>"},{"location":"content/p9/#6-mejores-practicas","title":"6. Mejores Pr\u00e1cticas","text":""},{"location":"content/p9/#61-pipeline-de-limpieza","title":"6.1 Pipeline de Limpieza","text":"<pre><code>def limpiar_dataset(df):\n    \"\"\"\n    Pipeline de limpieza de datos\n    \"\"\"\n    df_limpio = df.copy()\n\n    # 1. Eliminar duplicados\n    df_limpio.drop_duplicates(inplace=True)\n\n    # 2. Manejar valores faltantes\n    for columna in df_limpio.select_dtypes(include=[np.number]).columns:\n        df_limpio[columna].fillna(df_limpio[columna].median(), inplace=True)\n\n    for columna in df_limpio.select_dtypes(include=['object']).columns:\n        df_limpio[columna].fillna('Desconocido', inplace=True)\n\n    # 3. Limpiar texto\n    for columna in df_limpio.select_dtypes(include=['object']).columns:\n        df_limpio[columna] = df_limpio[columna].str.strip()\n\n    return df_limpio\n\n# Usar el pipeline\ndf_resultado = limpiar_dataset(df_problematico)\n</code></pre>"},{"location":"content/password/","title":"Generar contrase\u00f1a SHA256 para bloquear contenido","text":"<pre><code>powershell -Command \"[System.BitConverter]::ToString([System.Security.Cryptography.SHA256]::Create().ComputeHash([System.Text.Encoding]::UTF8.GetBytes('158789'))).Replace('-','').ToLower()\"\n</code></pre>"},{"location":"content/password/#platilla-para-bloquear-contenido","title":"Platilla para bloquear contenido","text":"<pre><code>&lt;div class=\"password-protected\" data-password-hash=\"f31db6afee933ea691fe16079e00334db73dd8ccadce944d\"&gt;\n  &lt;div class=\"password-form\"&gt;\n    &lt;p&gt;Este contenido est\u00e1 protegido. Por favor, ingresa la contrase\u00f1a para acceder:&lt;/p&gt;\n    &lt;input type=\"password\" class=\"password-input\" placeholder=\"Contrase\u00f1a\"&gt;\n    &lt;button class=\"password-submit md-button md-button--primary\"&gt;Acceder&lt;/button&gt;\n    &lt;p class=\"password-hint\" style=\"display: none;\"&gt;&lt;/p&gt;\n  &lt;/div&gt;        \n  &lt;div class=\"protected-content\"&gt;\n    &lt;!-- Aqu\u00ed va el contenido que deseas proteger --&gt;\n    &lt;p&gt;Este es el contenido protegido.&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"pi/p1/","title":"Proyecto Integrador","text":""},{"location":"pi/p1/#paso-1-realizar-fork-solo-lider","title":"Paso 1: Realizar Fork (Solo L\u00edder)","text":"<pre><code>https://github.com/jfinfocesde/pi_ntp.git\n</code></pre> <ol> <li>Navega al repositorio base del proyecto en GitHub</li> <li>Haz clic en el bot\u00f3n \"Fork\" en la esquina superior derecha</li> <li>Selecciona tu cuenta personal como destino del fork</li> <li>Espera a que se complete el proceso de fork</li> </ol>"},{"location":"pi/p1/#paso-2-fork-del-repositorio-del-lider-demas-integrantes","title":"Paso 2: Fork del Repositorio del L\u00edder (Dem\u00e1s Integrantes)","text":"<p>Para los dem\u00e1s integrantes del equipo:</p> <ol> <li>El l\u00edder debe compartir la URL de su fork: <code>https://github.com/USUARIO_LIDER/pi_ntp.git</code></li> <li>Cada integrante debe hacer fork del repositorio del l\u00edder (NO del repositorio base original)</li> <li>Navega al repositorio del l\u00edder en GitHub</li> <li>Haz clic en el bot\u00f3n \"Fork\" en la esquina superior derecha</li> <li>Selecciona tu cuenta personal como destino del fork</li> </ol>"},{"location":"pi/p1/#paso-3-clonar-tu-fork","title":"Paso 3: Clonar tu Fork","text":"<pre><code>git clone https://github.com/TU_USUARIO/pi_ntp.git\ncd pi_ntp\ncode .\n</code></pre>"},{"location":"pi/p2/","title":"Fuentes de datos abiertos","text":""},{"location":"pi/p2/#datasets-abiertos-en-general","title":"Datasets Abiertos en General","text":""},{"location":"pi/p2/#1-kaggle","title":"1. Kaggle","text":"<ul> <li>URL: https://www.kaggle.com/datasets</li> <li>Descripci\u00f3n: Kaggle es una plataforma muy popular para cient\u00edficos de datos que ofrece una amplia variedad de datasets en formatos compatibles como CSV, JSON y SQLite. Los datasets est\u00e1n organizados por categor\u00edas y vienen con documentaci\u00f3n detallada .</li> <li>Ejemplo de uso: Puedes descargar datasets sobre econom\u00eda, salud, deportes, etc., y cargarlos directamente en Pandas usando <code>pandas.read_csv()</code>.</li> </ul>"},{"location":"pi/p2/#2-datagov","title":"2. Data.gov","text":"<ul> <li>URL: https://www.data.gov/</li> <li>Descripci\u00f3n: Data.gov es un repositorio de datos abiertos del gobierno de los Estados Unidos. Ofrece miles de conjuntos de datos en formato CSV, adecuados para an\u00e1lisis de datos con Pandas. Los temas incluyen educaci\u00f3n, clima, transporte y m\u00e1s.</li> <li>Ejemplo de uso: Descarga un archivo CSV de clima hist\u00f3rico y utiliza Pandas para analizar patrones clim\u00e1ticos .</li> </ul>"},{"location":"pi/p2/#3-uci-machine-learning-repository","title":"3. UCI Machine Learning Repository","text":"<ul> <li>URL: https://archive.ics.uci.edu/ml/index.php</li> <li>Descripci\u00f3n: Este repositorio es ampliamente utilizado en la comunidad de aprendizaje autom\u00e1tico. Contiene datasets en formato CSV que son ideales para proyectos de ciencia de datos y machine learning.</li> <li>Ejemplo de uso: El dataset \"Adult Income\" es un archivo CSV que puede ser cargado en Pandas para predecir ingresos basados en caracter\u00edsticas demogr\u00e1ficas .</li> </ul>"},{"location":"pi/p2/#4-world-bank-open-data","title":"4. World Bank Open Data","text":"<ul> <li>URL: https://data.worldbank.org/</li> <li>Descripci\u00f3n: El Banco Mundial proporciona datos globales sobre desarrollo econ\u00f3mico, salud, educaci\u00f3n y medio ambiente. Muchos de estos datos est\u00e1n disponibles en formato CSV.</li> <li>Ejemplo de uso: Carga datos sobre el PIB per c\u00e1pita de diferentes pa\u00edses y realiza an\u00e1lisis comparativos utilizando Pandas .</li> </ul>"},{"location":"pi/p2/#5-google-dataset-search","title":"5. Google Dataset Search","text":"<ul> <li>URL: https://datasetsearch.research.google.com/</li> <li>Descripci\u00f3n: Una herramienta de b\u00fasqueda de datasets desarrollada por Google. Permite encontrar datasets en formato CSV y otros formatos desde diversas fuentes acad\u00e9micas y gubernamentales.</li> <li>Ejemplo de uso: Busca datasets relacionados con energ\u00eda renovable y carga los archivos CSV en Pandas para an\u00e1lisis .</li> </ul>"},{"location":"pi/p2/#6-awesome-public-datasets-github","title":"6. Awesome Public Datasets (GitHub)","text":"<ul> <li>URL: https://github.com/awesomedata/awesome-public-datasets</li> <li>Descripci\u00f3n: Una lista curada de datasets p\u00fablicos organizados por categor\u00edas como salud, finanzas, educaci\u00f3n y m\u00e1s. Muchos de estos datasets est\u00e1n disponibles en formato CSV.</li> <li>Ejemplo de uso: Encuentra un dataset sobre desastres naturales y utiliza Pandas para explorar tendencias hist\u00f3ricas .</li> </ul>"},{"location":"pi/p2/#7-fivethirtyeight","title":"7. FiveThirtyEight","text":"<ul> <li>URL: https://data.fivethirtyeight.com/</li> <li>Descripci\u00f3n: FiveThirtyEight ofrece datasets utilizados en sus art\u00edculos sobre pol\u00edtica, deportes y cultura. Los datos est\u00e1n disponibles en formato CSV y son ideales para an\u00e1lisis estad\u00edsticos.</li> <li>Ejemplo de uso: Carga un dataset sobre resultados electorales y realiza an\u00e1lisis predictivos con Pandas .</li> </ul>"},{"location":"pi/p2/#8-openstreetmap-osm","title":"8. OpenStreetMap (OSM)","text":"<ul> <li>URL: https://www.openstreetmap.org/</li> <li>Descripci\u00f3n: OpenStreetMap proporciona datos geoespaciales abiertos que pueden exportarse en formato CSV. Estos datos son \u00fatiles para proyectos de geolocalizaci\u00f3n y an\u00e1lisis espacial.</li> <li>Ejemplo de uso: Exporta datos de ubicaciones urbanas y utiliza Pandas para analizar la densidad poblacional .</li> </ul>"},{"location":"pi/p2/#9-global-health-observatory-gho","title":"9. Global Health Observatory (GHO)","text":"<ul> <li>URL: https://www.who.int/data/gho</li> <li>Descripci\u00f3n: La Organizaci\u00f3n Mundial de la Salud (OMS) proporciona datos sobre salud global, incluidos indicadores como mortalidad, enfermedades y acceso a servicios de salud. Los datos est\u00e1n disponibles en formato CSV.</li> <li>Ejemplo de uso: Analiza la tasa de mortalidad infantil en diferentes pa\u00edses utilizando Pandas.</li> </ul>"},{"location":"pi/p2/#10-eurostat","title":"10. Eurostat","text":"<ul> <li>URL: https://ec.europa.eu/eurostat</li> <li>Descripci\u00f3n: Eurostat ofrece datos estad\u00edsticos de la Uni\u00f3n Europea sobre econom\u00eda, poblaci\u00f3n, empleo y m\u00e1s. Muchos de estos datos pueden descargarse en formato CSV.</li> <li>Ejemplo de uso: Carga datos sobre empleo juvenil y realiza an\u00e1lisis regionales con Pandas.</li> </ul>"},{"location":"pi/p2/#datasets-abiertos-en-colombia","title":"Datasets Abiertos en Colombia","text":""},{"location":"pi/p2/#1-datos-abiertos-colombia","title":"1. Datos Abiertos Colombia","text":"<ul> <li>Descripci\u00f3n: Es el portal oficial de datos abiertos del gobierno colombiano. Ofrece una amplia variedad de conjuntos de datos de diferentes sectores, como salud, educaci\u00f3n, econom\u00eda y medio ambiente. Muchos de estos datasets est\u00e1n disponibles en formato CSV.</li> <li>URL: https://www.datos.gov.co/ </li> </ul>"},{"location":"pi/p2/#2-datos-abiertos-bogota","title":"2. Datos Abiertos Bogot\u00e1","text":"<ul> <li>Descripci\u00f3n: Este portal proporciona acceso libre y gratuito a los datos generados por las entidades distritales de Bogot\u00e1. Incluye informaci\u00f3n sobre movilidad, econom\u00eda, salud, educaci\u00f3n y m\u00e1s.</li> <li>URL: https://datosabiertos.bogota.gov.co/ </li> </ul>"},{"location":"pi/p2/#3-infraestructura-colombiana-de-datos-espaciales-icde","title":"3. Infraestructura Colombiana de Datos Espaciales (ICDE)","text":"<ul> <li>Descripci\u00f3n: La ICDE ofrece conjuntos de datos geoespaciales producidos por entidades nacionales. Estos datos son \u00fatiles para proyectos relacionados con mapas, territorios y planificaci\u00f3n urbana.</li> <li>URL: https://www.icde.gov.co/ </li> </ul>"},{"location":"pi/p2/#4-ministerio-de-salud-y-proteccion-social","title":"4. Ministerio de Salud y Protecci\u00f3n Social","text":"<ul> <li>Descripci\u00f3n: El Ministerio de Salud pone a disposici\u00f3n de la ciudadan\u00eda diversos conjuntos de datos relacionados con la salud p\u00fablica, como estad\u00edsticas de enfermedades, vacunaci\u00f3n y servicios de salud. Estos datos est\u00e1n disponibles en el portal de Datos Abiertos Colombia.</li> <li>URL: https://www.datos.gov.co/ </li> </ul>"},{"location":"pi/p2/#5-listado-de-datasets-en-github","title":"5. Listado de Datasets en GitHub","text":"<ul> <li>Descripci\u00f3n: Un repositorio en GitHub que recopila datasets interesantes de Colombia disponibles en el portal de Datos Abiertos Colombia. Incluye datos sobre econom\u00eda, educaci\u00f3n, crimen y m\u00e1s.</li> <li>URL: https://github.com/xergioalex/datos-abiertos-colombia </li> </ul>"},{"location":"pi/p2/#6-bases-de-datos-de-gastos-gubernamentales","title":"6. Bases de Datos de Gastos Gubernamentales","text":"<ul> <li>Descripci\u00f3n: Conjuntos de datos que detallan los gastos realizados por entidades gubernamentales en Colombia. Son \u00fatiles para proyectos de transparencia y an\u00e1lisis fiscal.</li> <li>URL: https://www.datos.gov.co/ </li> </ul>"},{"location":"pi/p2/#7-base-de-datos-de-delitos-en-colombia","title":"7. Base de Datos de Delitos en Colombia","text":"<ul> <li>Descripci\u00f3n: Proporcionada por el Ministerio de Defensa, esta base de datos incluye informaci\u00f3n sobre delitos cometidos en Colombia. Es \u00fatil para estudios sobre seguridad y justicia.</li> <li>URL: https://www.datos.gov.co/ </li> </ul>"},{"location":"pi/p2/#8-base-de-datos-de-instituciones-educativas","title":"8. Base de Datos de Instituciones Educativas","text":"<ul> <li>Descripci\u00f3n: Informaci\u00f3n sobre instituciones educativas en Colombia, incluyendo su ubicaci\u00f3n, nivel educativo y recursos disponibles.</li> <li>URL: https://www.datos.gov.co/ </li> </ul>"},{"location":"pi/p2/#9-lista-de-especies-amenazadas-en-colombia","title":"9. Lista de Especies Amenazadas en Colombia","text":"<ul> <li>Descripci\u00f3n: Datos sobre especies continentales y marino-costeras amenazadas en Colombia, proporcionados por el Sistema de Informaci\u00f3n sobre Biodiversidad de Colombia (SiB).</li> <li>URL: https://www.biodiversidad.co/ </li> </ul>"},{"location":"pi/p2/#10-colombia-tic-ministerio-de-tecnologias-de-la-informacion-y-las-comunicaciones-mintic","title":"10. Colombia TIC - Ministerio de Tecnolog\u00edas de la Informaci\u00f3n y las Comunicaciones (MinTIC)","text":"<ul> <li>Descripci\u00f3n: Iniciativa para promover el uso de datos abiertos en Colombia, con \u00e9nfasis en tecnolog\u00eda y desarrollo digital.</li> <li>URL: https://www.mintic.gov.co/ </li> </ul>"},{"location":"pi/p2/#datasets-abiertos-en-medellin","title":"Datasets Abiertos en Medell\u00edn","text":""},{"location":"pi/p2/#1-portal-de-datos-abiertos-de-medellin","title":"1. Portal de Datos Abiertos de Medell\u00edn","text":"<ul> <li>Descripci\u00f3n: El portal oficial de datos abiertos del municipio de Medell\u00edn ofrece conjuntos de datos sobre movilidad, salud, educaci\u00f3n, seguridad, medio ambiente y m\u00e1s. Es una excelente fuente para acceder a informaci\u00f3n detallada sobre la ciudad.</li> <li>URL: https://www.medellin.gov.co/ </li> <li>Ejemplo de uso: Descarga datos sobre ciclorrutas, \u00edndices de accidentalidad o hurto para an\u00e1lisis urbanos.</li> </ul>"},{"location":"pi/p2/#2-geomedellin-portal-de-datos-geograficos","title":"2. GeoMedell\u00edn (Portal de Datos Geogr\u00e1ficos)","text":"<ul> <li>Descripci\u00f3n: GeoMedell\u00edn es el portal de datos geogr\u00e1ficos del municipio de Medell\u00edn. Ofrece informaci\u00f3n espacial sobre movilidad, medio ambiente, ordenamiento territorial, desarrollo econ\u00f3mico y salud.</li> <li>URL: GeoMedell\u00edn </li> <li>Ejemplo de uso: Accede a mapas y datos geoespaciales para proyectos de planificaci\u00f3n urbana o an\u00e1lisis ambiental.</li> </ul>"},{"location":"pi/p2/#3-informacion-predial-de-medellin","title":"3. Informaci\u00f3n Predial de Medell\u00edn","text":"<ul> <li>Descripci\u00f3n: Este dataset incluye informaci\u00f3n catastral de predios en Medell\u00edn, como matr\u00edculas, comunas, barrios, manzanas, lotes, CBML y estratos. Es \u00fatil para estudios de urbanismo y propiedad.</li> <li>URL: Informaci\u00f3n Predios | Datos Abiertos Colombia </li> <li>Ejemplo de uso: Analiza la distribuci\u00f3n de estratos o \u00e1reas urbanas en Medell\u00edn.</li> </ul>"},{"location":"pi/p2/#4-datos-abiertos-de-salud-en-medellin","title":"4. Datos Abiertos de Salud en Medell\u00edn","text":"<ul> <li>Descripci\u00f3n: Datos relacionados con servicios de salud especializados en Medell\u00edn, como cardiolog\u00eda, neumolog\u00eda y alergolog\u00eda. Estos datos pueden ser \u00fatiles para investigaciones m\u00e9dicas o an\u00e1lisis de infraestructura sanitaria.</li> <li>URL: Datos Abiertos Colombia - Medell\u00edn </li> <li>Ejemplo de uso: Estudia la disponibilidad de servicios m\u00e9dicos especializados en diferentes zonas de la ciudad.</li> </ul>"},{"location":"pi/p2/#5-medata-plataforma-de-datos-abiertos-de-medellin","title":"5. Medata (Plataforma de Datos Abiertos de Medell\u00edn)","text":"<ul> <li>Descripci\u00f3n: Medata es una plataforma que centraliza datos abiertos de Medell\u00edn para la ciudadan\u00eda. Incluye informaci\u00f3n sobre ciclorrutas, accidentalidad, hurto y otros indicadores urbanos.</li> <li>URL: Medata </li> <li>Ejemplo de uso: Explora datos sobre movilidad sostenible o seguridad ciudadana.</li> </ul>"},{"location":"pi/p2/#6-camara-de-comercio-de-medellin","title":"6. C\u00e1mara de Comercio de Medell\u00edn","text":"<ul> <li>Descripci\u00f3n: La C\u00e1mara de Comercio de Medell\u00edn ofrece datos abiertos, estudios e investigaciones sobre el desarrollo econ\u00f3mico de la ciudad. Estos datos son \u00fatiles para an\u00e1lisis empresariales y econ\u00f3micos.</li> <li>URL: C\u00e1mara de Comercio de Medell\u00edn - Datos Abiertos </li> <li>Ejemplo de uso: Analiza datos sobre emprendimiento, comercio y econom\u00eda local.</li> </ul>"},{"location":"pi/p2/#7-biblioteca-publica-piloto-de-medellin","title":"7. Biblioteca P\u00fablica Piloto de Medell\u00edn","text":"<ul> <li>Descripci\u00f3n: La Biblioteca P\u00fablica Piloto de Medell\u00edn contribuye al proyecto de datos abiertos del gobierno colombiano, promoviendo la transparencia y el acceso a la informaci\u00f3n p\u00fablica.</li> <li>URL: Biblioteca P\u00fablica Piloto de Medell\u00edn - Datos Abiertos </li> <li>Ejemplo de uso: Consulta datos culturales o educativos disponibles en la biblioteca.</li> </ul>"},{"location":"pi/p2/#8-gastos-publicos-y-contratacion-en-medellin","title":"8. Gastos P\u00fablicos y Contrataci\u00f3n en Medell\u00edn","text":"<ul> <li>Descripci\u00f3n: Datos sobre gastos p\u00fablicos y contrataci\u00f3n en Medell\u00edn, disponibles en el portal de Datos Abiertos Colombia. Estos datasets son \u00fatiles para proyectos de transparencia fiscal.</li> <li>URL: Datos Abiertos Colombia - Medell\u00edn </li> <li>Ejemplo de uso: Realiza un an\u00e1lisis de los gastos gubernamentales en proyectos de infraestructura.</li> </ul>"},{"location":"pi/p2/#tutorial-cargar-archivos-csv-en-pandas","title":"Tutorial: Cargar Archivos CSV en Pandas","text":"<p>Pandas es una biblioteca de Python ampliamente utilizada para el an\u00e1lisis de datos. Una de sus funciones m\u00e1s comunes es cargar archivos CSV (Comma-Separated Values) en un DataFrame. A continuaci\u00f3n, se explican todas las formas de cargar archivos CSV, los problemas comunes que pueden surgir y c\u00f3mo resolverlos.</p>"},{"location":"pi/p2/#1-forma-basica-de-cargar-un-archivo-csv","title":"1. Forma B\u00e1sica de Cargar un Archivo CSV","text":"<p>La funci\u00f3n <code>pandas.read_csv()</code> es la herramienta principal para cargar archivos CSV en Pandas.</p> <pre><code>import pandas as pd\n\n# Cargar un archivo CSV b\u00e1sico\ndf = pd.read_csv(\"archivo.csv\")\n</code></pre> <ul> <li>Descripci\u00f3n: Lee el archivo CSV y lo convierte en un DataFrame de Pandas.</li> <li>Nota: El archivo debe estar en el mismo directorio que el script o notebook.</li> </ul>"},{"location":"pi/p2/#2-especificar-la-ruta-del-archivo","title":"2. Especificar la Ruta del Archivo","text":"<p>Si el archivo no est\u00e1 en el mismo directorio, debes proporcionar la ruta completa o relativa.</p> <pre><code># Ruta absoluta\ndf = pd.read_csv(\"/ruta/completa/al/archivo.csv\")\n\n# Ruta relativa\ndf = pd.read_csv(\"../datos/archivo.csv\")\n</code></pre>"},{"location":"pi/p2/#3-cambiar-el-delimitador-con-sep","title":"3. Cambiar el Delimitador con <code>sep</code>","text":"<p>Por defecto, Pandas asume que el delimitador es una coma (<code>,</code>). Sin embargo, algunos archivos CSV usan otros delimitadores, como punto y coma (<code>;</code>), tabulaci\u00f3n (<code>\\t</code>) u otros caracteres.</p>"},{"location":"pi/p2/#ejemplo-con-punto-y-coma","title":"Ejemplo con Punto y Coma","text":"<pre><code>df = pd.read_csv(\"archivo.csv\", sep=\";\")\n</code></pre>"},{"location":"pi/p2/#ejemplo-con-tabulacion","title":"Ejemplo con Tabulaci\u00f3n","text":"<pre><code>df = pd.read_csv(\"archivo.tsv\", sep=\"\\t\")  # Tambi\u00e9n puedes usar delimiter=\"\\t\"\n</code></pre>"},{"location":"pi/p2/#ejemplo-con-pipe","title":"Ejemplo con Pipe (<code>|</code>)","text":"<pre><code>df = pd.read_csv(\"archivo.csv\", sep=\"|\")\n</code></pre>"},{"location":"pi/p2/#4-manejo-de-codificaciones","title":"4. Manejo de Codificaciones","text":"<p>Algunos archivos CSV no est\u00e1n codificados en UTF-8, lo que puede causar errores al leerlos.</p>"},{"location":"pi/p2/#problema-comun","title":"Problema Com\u00fan","text":"<pre><code>UnicodeDecodeError: 'utf-8' codec can't decode byte...\n</code></pre>"},{"location":"pi/p2/#solucion","title":"Soluci\u00f3n","text":"<p>Especifica la codificaci\u00f3n correcta usando el par\u00e1metro <code>encoding</code>.</p> <pre><code># Usando codificaci\u00f3n ISO-8859-1 (com\u00fan en archivos de Windows)\ndf = pd.read_csv(\"archivo.csv\", encoding=\"ISO-8859-1\")\n\n# Usando codificaci\u00f3n UTF-8\ndf = pd.read_csv(\"archivo.csv\", encoding=\"utf-8\")\n</code></pre>"},{"location":"pi/p2/#5-saltar-filas-innecesarias","title":"5. Saltar Filas Innecesarias","text":"<p>Si el archivo tiene filas innecesarias al inicio o si las columnas no tienen nombres claros, puedes ajustar esto.</p>"},{"location":"pi/p2/#saltar-filas","title":"Saltar Filas","text":"<pre><code># Saltar las primeras 2 filas\ndf = pd.read_csv(\"archivo.csv\", skiprows=2)\n</code></pre>"},{"location":"pi/p2/#usar-una-fila-especifica-como-cabecera","title":"Usar una Fila Espec\u00edfica como Cabecera","text":"<pre><code># Usar la fila 3 como cabecera (\u00edndice 2)\ndf = pd.read_csv(\"archivo.csv\", header=2)\n</code></pre>"},{"location":"pi/p2/#6-manejo-de-valores-faltantes","title":"6. Manejo de Valores Faltantes","text":"<p>Pandas reemplaza autom\u00e1ticamente valores faltantes por <code>NaN</code>. Si el archivo usa otro valor para representar datos faltantes, puedes especificarlo.</p> <pre><code># Reemplazar \"NA\" y \"?\" con NaN\ndf = pd.read_csv(\"archivo.csv\", na_values=[\"NA\", \"?\"])\n</code></pre>"},{"location":"pi/p2/#7-leer-solo-ciertas-columnas","title":"7. Leer S\u00f3lo Ciertas Columnas","text":"<p>Si solo necesitas ciertas columnas, puedes especificarlas para ahorrar memoria.</p> <pre><code># Leer solo las columnas \"nombre\" y \"edad\"\ndf = pd.read_csv(\"archivo.csv\", usecols=[\"nombre\", \"edad\"])\n</code></pre>"},{"location":"pi/p2/#8-leer-solo-cierto-numero-de-filas","title":"8. Leer S\u00f3lo Cierto N\u00famero de Filas","text":"<p>Para archivos grandes, puedes limitar el n\u00famero de filas a leer.</p> <pre><code># Leer las primeras 100 filas\ndf = pd.read_csv(\"archivo.csv\", nrows=100)\n</code></pre>"},{"location":"pi/p2/#9-parsear-fechas","title":"9. Parsear Fechas","text":"<p>Si tu archivo contiene columnas con fechas, puedes parsearlas autom\u00e1ticamente.</p> <pre><code># Parsear la columna \"fecha\" como fecha\ndf = pd.read_csv(\"archivo.csv\", parse_dates=[\"fecha\"])\n</code></pre>"},{"location":"pi/p2/#10-leer-archivos-grandes-en-fragmentos-chunks","title":"10. Leer Archivos Grandes en Fragmentos (Chunks)","text":"<p>Para archivos muy grandes que no caben en memoria, puedes leerlos en fragmentos (chunks).</p> <pre><code># Leer el archivo en chunks de 1000 filas\nchunk_size = 1000\nchunks = []\n\nfor chunk in pd.read_csv(\"archivo_grande.csv\", chunksize=chunk_size):\n    chunks.append(chunk)\n\n# Concatenar todos los chunks en un solo DataFrame\ndf = pd.concat(chunks)\n</code></pre>"},{"location":"pi/p2/#11-problemas-comunes-y-soluciones","title":"11. Problemas Comunes y Soluciones","text":""},{"location":"pi/p2/#1-error-de-delimitador-incorrecto","title":"1. Error de Delimitador Incorrecto","text":"<p>Problema: Los datos aparecen mal estructurados porque el delimitador no coincide.</p> <p>Soluci\u00f3n: Usa el par\u00e1metro <code>sep</code>.</p> <pre><code># Cambiar el delimitador\ndf = pd.read_csv(\"archivo.csv\", sep=\";\")\n</code></pre>"},{"location":"pi/p2/#2-error-de-codificacion","title":"2. Error de Codificaci\u00f3n","text":"<p>Problema: El archivo no est\u00e1 codificado en UTF-8.</p> <p>Soluci\u00f3n: Usa el par\u00e1metro <code>encoding</code>.</p> <pre><code># Cambiar la codificaci\u00f3n\ndf = pd.read_csv(\"archivo.csv\", encoding=\"ISO-8859-1\")\n</code></pre>"},{"location":"pi/p2/#3-filas-innecesarias-al-inicio","title":"3. Filas Innecesarias al Inicio","text":"<p>Problema: Las primeras filas contienen metadatos o comentarios.</p> <p>Soluci\u00f3n: Usa el par\u00e1metro <code>skiprows</code>.</p> <pre><code># Saltar las primeras 3 filas\ndf = pd.read_csv(\"archivo.csv\", skiprows=3)\n</code></pre>"},{"location":"pi/p2/#4-datos-faltantes-representados-por-otros-valores","title":"4. Datos Faltantes Representados por Otros Valores","text":"<p>Problema: Los valores faltantes est\u00e1n representados por \"NA\", \"-\", etc.</p> <p>Soluci\u00f3n: Usa el par\u00e1metro <code>na_values</code>.</p> <pre><code># Reemplazar \"NA\" y \"-\" con NaN\ndf = pd.read_csv(\"archivo.csv\", na_values=[\"NA\", \"-\"])\n</code></pre>"},{"location":"pi/p2/#5-archivo-muy-grande","title":"5. Archivo Muy Grande","text":"<p>Problema: El archivo es demasiado grande para cargarlo completamente en memoria.</p> <p>Soluci\u00f3n: Usa el par\u00e1metro <code>chunksize</code>.</p> <pre><code># Leer en chunks\nfor chunk in pd.read_csv(\"archivo_grande.csv\", chunksize=1000):\n    print(chunk.head())\n</code></pre>"},{"location":"pi/p2/#12-ejemplo-completo","title":"12. Ejemplo Completo","text":"<p>Aqu\u00ed tienes un ejemplo que combina varias opciones:</p> <pre><code>import pandas as pd\n\n# Cargar un archivo CSV con:\n# - Delimitador personalizado\n# - Codificaci\u00f3n espec\u00edfica\n# - Saltar filas innecesarias\n# - Leer solo ciertas columnas\n# - Parsear fechas\ndf = pd.read_csv(\n    \"archivo.csv\",\n    sep=\";\",\n    encoding=\"ISO-8859-1\",\n    skiprows=2,\n    usecols=[\"nombre\", \"edad\", \"fecha\"],\n    parse_dates=[\"fecha\"]\n)\n\nprint(df.head())\n</code></pre>"},{"location":"pi/p3/","title":"Tutorial: Crear una Aplicaci\u00f3n B\u00e1sica en Streamlit con Gemini API","text":"<p>Este tutorial te guiar\u00e1 paso a paso para crear una aplicaci\u00f3n web interactiva usando Streamlit y la Gemini API de Google Generative AI. La aplicaci\u00f3n permite a los usuarios ingresar un tema o pregunta y recibir una respuesta generada por la API. El c\u00f3digo base es el proporcionado anteriormente, integrado en una interfaz de Streamlit sin modificaciones al bloque original de la API.</p>"},{"location":"pi/p3/#prerrequisitos","title":"Prerrequisitos","text":"<p>Antes de comenzar, aseg\u00farate de tener lo siguiente:</p> <ol> <li>Python instalado (versi\u00f3n 3.8 o superior).</li> <li>Clave de API de Google Generative AI:</li> <li>Reg\u00edstrate en Google AI Studio y genera una clave de API.</li> </ol>"},{"location":"pi/p3/#paso-1-configurar-el-entorno","title":"Paso 1: Configurar el Entorno","text":"<ol> <li> <p>Crea un directorio para el proyecto:    <pre><code>mkdir gemini-streamlit-app\ncd gemini-streamlit-app\n</code></pre></p> </li> <li> <p>Crea un entorno virtual (opcional, pero recomendado):    <pre><code>python -m venv venv\nsource venv/bin/activate  # En Windows: venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Instala las dependencias necesarias:    Ejecuta el siguiente comando para instalar Streamlit y la biblioteca de Google Generative AI:    <pre><code>pip install -q -U google-genai\n</code></pre></p> </li> </ol>"},{"location":"pi/p3/#paso-2-crear-el-codigo-de-la-aplicacion","title":"Paso 2: Crear el C\u00f3digo de la Aplicaci\u00f3n","text":"<p>Crea un archivo llamado <code>app_gemini_basica.py</code> y copia el siguiente c\u00f3digo. Este c\u00f3digo integra el bloque original de la Gemini API en una aplicaci\u00f3n Streamlit.</p> <pre><code>import streamlit as st\nfrom google import genai\n\n# Configuraci\u00f3n de la p\u00e1gina\nst.set_page_config(page_title=\"Chat B\u00e1sico con Gemini\", layout=\"centered\")\nst.title(\"\ud83d\udcac Chat con Gemini\")\nst.markdown(\"Ingresa un tema o pregunta para obtener una respuesta generada por Gemini.\")\n\n# Interfaz de usuario\nprompt = st.text_input(\"Escribe tu pregunta o tema:\", placeholder=\"Ej. Explica c\u00f3mo funciona la IA en pocas palabras\")\nenviar = st.button(\"Generar Respuesta\")\n\n# Funci\u00f3n que usa el c\u00f3digo original\ndef generar_respuesta(prompt):\n    if not prompt:\n        return \"Por favor, ingresa un tema o pregunta.\"\n    try:\n        client = genai.Client(api_key=\"YOUR_API_KEY\")  # C\u00f3digo original\n        response = client.models.generate_content(\n            model=\"gemini-2.0-flash\", contents=prompt  # C\u00f3digo original con prompt din\u00e1mico\n        )\n        return response.text  # C\u00f3digo original\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n# L\u00f3gica principal\nif enviar and prompt:\n    with st.spinner(\"Generando respuesta...\"):\n        respuesta = generar_respuesta(prompt)\n        st.subheader(\"Respuesta:\")\n        st.markdown(respuesta)\nelse:\n    st.info(\"Escribe un tema o pregunta y haz clic en Generar Respuesta.\")\n</code></pre>"},{"location":"pi/p3/#explicacion-del-codigo","title":"Explicaci\u00f3n del C\u00f3digo","text":"<ul> <li>Importaciones:</li> <li><code>streamlit</code>: Biblioteca para crear la interfaz web.</li> <li><code>google.genai</code>: Biblioteca para interactuar con la Gemini API.</li> <li>Configuraci\u00f3n de Streamlit:</li> <li><code>st.set_page_config</code>: Define el t\u00edtulo de la p\u00e1gina y el dise\u00f1o.</li> <li><code>st.title</code> y <code>st.markdown</code>: Agregan un t\u00edtulo y una descripci\u00f3n.</li> <li>Interfaz de usuario:</li> <li><code>st.text_input</code>: Crea un campo de texto para que el usuario ingrese un prompt.</li> <li><code>st.button</code>: Agrega un bot\u00f3n para enviar el prompt.</li> <li>Funci\u00f3n <code>generar_respuesta</code>:</li> <li>Usa el c\u00f3digo original sin modificaciones, solo reemplazando el prompt fijo por el ingresado por el usuario.</li> <li>Incluye manejo de errores y verificaci\u00f3n de prompt vac\u00edo.</li> <li>L\u00f3gica principal:</li> <li>Si el usuario hace clic en \"Generar Respuesta\" y hay un prompt, se llama a <code>generar_respuesta</code> y se muestra la respuesta en la interfaz.</li> </ul>"},{"location":"pi/p3/#paso-3-configurar-la-clave-de-api","title":"Paso 3: Configurar la Clave de API","text":"<ol> <li>Obt\u00e9n tu clave de API:</li> <li>Ve a Google AI Studio.</li> <li>Crea un proyecto y genera una clave de API.</li> <li>Inserta la clave en el c\u00f3digo:</li> <li>Abre <code>app_gemini_basica.py</code>.</li> <li>Reemplaza <code>\"YOUR_API_KEY\"</code> en la l\u00ednea <code>client = genai.Client(api_key=\"YOUR_API_KEY\")</code> con tu clave real, por ejemplo:      <pre><code>client = genai.Client(api_key=\"tu_clave_de_api_aqu\u00ed\")\n</code></pre></li> <li>Advertencia: No compartas el c\u00f3digo con la clave de API en repositorios p\u00fablicos, ya que es informaci\u00f3n sensible.</li> </ol>"},{"location":"pi/p3/#paso-4-ejecutar-la-aplicacion","title":"Paso 4: Ejecutar la Aplicaci\u00f3n","text":"<ol> <li>Guarda el archivo <code>app_gemini_basica.py</code> en tu directorio de trabajo.</li> <li>Ejecuta la aplicaci\u00f3n:    En la terminal, con el entorno virtual activado, ejecuta:    <pre><code>streamlit run app_gemini_basica.py\n</code></pre></li> <li>Accede a la aplicaci\u00f3n:</li> <li>Streamlit abrir\u00e1 autom\u00e1ticamente una ventana en tu navegador con la URL <code>http://localhost:8501</code>.</li> <li>Si no se abre, ingresa manualmente esa URL en tu navegador.</li> </ol>"},{"location":"pi/p3/#paso-5-usar-la-aplicacion","title":"Paso 5: Usar la Aplicaci\u00f3n","text":"<ol> <li>Ingresa un prompt:</li> <li>En el campo de texto, escribe una pregunta o tema, por ejemplo: \"Explica c\u00f3mo funciona la IA en pocas palabras\".</li> <li>Genera la respuesta:</li> <li>Haz clic en el bot\u00f3n \"Generar Respuesta\".</li> <li>La aplicaci\u00f3n mostrar\u00e1 un mensaje de \"Generando respuesta...\" mientras procesa.</li> <li>La respuesta de la Gemini API aparecer\u00e1 en la secci\u00f3n \"Respuesta\" en formato markdown.</li> <li>Prueba diferentes prompts:</li> <li>Intenta con preguntas como \"Describe la fotos\u00edntesis\" o \"Escribe un poema corto\".</li> </ol>"},{"location":"pi/p4/","title":"Tutorial: Consumir una API de Mockoon y Convertirla en un DataFrame con Python","text":"<p>En este tutorial, aprender\u00e1s c\u00f3mo usar Python para consumir datos de una API mock creada con Mockoon, una herramienta para simular APIs, y convertir esos datos en un DataFrame utilizando la biblioteca <code>pandas</code>. Este proceso es \u00fatil para probar aplicaciones, analizar datos de APIs o aprender a trabajar con servicios web.</p>"},{"location":"pi/p4/#requisitos-previos","title":"Requisitos previos","text":"<ol> <li>Python instalado (versi\u00f3n 3.6 o superior).</li> <li>Mockoon instalado (desc\u00e1rgalo desde mockoon.com).</li> <li>Bibliotecas de Python:</li> <li><code>requests</code>: Para hacer solicitudes HTTP a la API.</li> <li><code>pandas</code>: Para manipular y convertir los datos en un DataFrame.    Inst\u00e1lalas con:    <pre><code>pip install requests pandas\n</code></pre></li> </ol>"},{"location":"pi/p4/#paso-1-configurar-la-api-mock-con-mockoon","title":"Paso 1: Configurar la API mock con Mockoon","text":"<p>Mockoon te permite crear APIs simuladas r\u00e1pidamente. Sigue estos pasos para configurar una API mock:</p> <ol> <li>Abre Mockoon y crea un nuevo proyecto.</li> <li>Crea un endpoint:</li> <li>Haz clic en \"Add Route\" y configura un endpoint <code>GET</code> con la ruta <code>/users</code>.</li> <li>En la secci\u00f3n de respuesta, selecciona el formato JSON y define una respuesta como esta:      <pre><code>[\n  {\"id\": 1, \"name\": \"John Doe\", \"email\": \"john@example.com\"},\n  {\"id\": 2, \"name\": \"Jane Smith\", \"email\": \"jane@example.com\"}\n]\n</code></pre></li> <li>Inicia el servidor:</li> <li>Aseg\u00farate de que el servidor est\u00e9 corriendo (por defecto, en <code>http://localhost:3000</code>).</li> <li>Verifica que el endpoint funcione abriendo <code>http://localhost:3000/users</code> en un navegador o usando <code>curl</code>:      <pre><code>curl http://localhost:3000/users\n</code></pre></li> </ol>"},{"location":"pi/p4/#paso-2-escribir-el-codigo-en-python","title":"Paso 2: Escribir el c\u00f3digo en Python","text":"<p>Vamos a crear un script en Python que: - Realice una solicitud GET a la API mock. - Convierta la respuesta JSON en un DataFrame. - Guarde los datos en un archivo CSV.</p> <p>Crea un archivo llamado <code>mockoon_api_to_dataframe.py</code> con el siguiente c\u00f3digo:</p> <pre><code>import requests\nimport pandas as pd\n\n# URL de la API mock de Mockoon\nurl = \"http://localhost:3000/users\"\n\ntry:\n    # Hacer la solicitud GET a la API\n    response = requests.get(url)\n\n    # Verificar si la solicitud fue exitosa\n    response.raise_for_status()\n\n    # Convertir la respuesta JSON en una lista de diccionarios\n    data = response.json()\n\n    # Crear un DataFrame con los datos\n    df = pd.DataFrame(data)\n\n    # Mostrar las primeras filas del DataFrame\n    print(\"Primeras 5 filas del DataFrame:\")\n    print(df.head())\n\n    # Guardar el DataFrame como CSV\n    df.to_csv(\"mockoon_users.csv\", index=False)\n    print(\"Datos guardados en 'mockoon_users.csv'\")\n\nexcept requests.exceptions.HTTPError as http_err:\n    print(f\"Error HTTP: {http_err}\")\nexcept requests.exceptions.ConnectionError as conn_err:\n    print(f\"Error de conexi\u00f3n: {conn_err}\")\nexcept requests.exceptions.Timeout as timeout_err:\n    print(f\"Error de timeout: {timeout_err}\")\nexcept requests.exceptions.RequestException as req_err:\n    print(f\"Error en la solicitud: {req_err}\")\nexcept ValueError as json_err:\n    print(f\"Error al procesar JSON: {json_err}\")\n</code></pre>"},{"location":"pi/p4/#paso-3-ejecutar-el-codigo","title":"Paso 3: Ejecutar el c\u00f3digo","text":"<ol> <li>Aseg\u00farate de que Mockoon est\u00e9 corriendo y que el endpoint <code>/users</code> est\u00e9 activo.</li> <li>Ejecuta el script:    <pre><code>python mockoon_api_to_dataframe.py\n</code></pre></li> <li>Revisa la salida:</li> <li>El script mostrar\u00e1 las primeras 5 filas del DataFrame en la consola, por ejemplo:      <pre><code>Primeras 5 filas del DataFrame:\n   id        name              email\n0   1    John Doe   john@example.com\n1   2  Jane Smith   jane@example.com\nDatos guardados en 'mockoon_users.csv'\n</code></pre></li> <li>Tambi\u00e9n generar\u00e1 un archivo <code>mockoon_users.csv</code> con los datos.</li> </ol>"},{"location":"pi/p4/#paso-4-entender-el-codigo","title":"Paso 4: Entender el c\u00f3digo","text":"<ul> <li><code>requests.get(url)</code>: Realiza una solicitud HTTP GET a la URL de la API.</li> <li><code>response.raise_for_status()</code>: Verifica si la solicitud fue exitosa (c\u00f3digos 200 OK). Si hay un error (ej., 404 o 500), lanza una excepci\u00f3n.</li> <li><code>response.json()</code>: Convierte la respuesta JSON en una lista de diccionarios Python.</li> <li><code>pd.DataFrame(data)</code>: Crea un DataFrame a partir de los datos JSON.</li> <li><code>df.to_csv()</code>: Guarda el DataFrame en un archivo CSV.</li> <li>Manejo de errores: El c\u00f3digo captura excepciones comunes como problemas de conexi\u00f3n, errores HTTP o JSON malformado.</li> </ul>"},{"location":"pi/p4/#paso-5-personalizar-el-tutorial","title":"Paso 5: Personalizar el tutorial","text":"<p>Puedes adaptar este c\u00f3digo para diferentes escenarios:</p> <ul> <li>Cambiar el endpoint: Si tu API mock usa otra ruta (ej., <code>/api/v1/users</code>), actualiza la variable <code>url</code>.</li> <li>Datos anidados: Si la respuesta JSON tiene estructuras anidadas (ej., un campo <code>address</code> con subcampos como <code>city</code>), usa <code>pd.json_normalize</code>:   <pre><code>df = pd.json_normalize(data)\n</code></pre></li> <li>Autenticaci\u00f3n: Si la API mock requiere un token, agrega headers:   <pre><code>headers = {\"Authorization\": \"Bearer mock_token\"}\nresponse = requests.get(url, headers=headers)\n</code></pre></li> <li>Usar Mockoon Cloud: Si usas el entorno cloud de Mockoon, reemplaza <code>http://localhost:3000/users</code> con la URL proporcionada por Mockoon.</li> </ul>"},{"location":"pi/p5/","title":"Tutorial: Crear una Aplicaci\u00f3n B\u00e1sica en Streamlit con Gemini API","text":"<p>Este tutorial te guiar\u00e1 paso a paso para crear una aplicaci\u00f3n web interactiva usando Streamlit y la Gemini API de Google Generative AI. La aplicaci\u00f3n permite a los usuarios ingresar un tema o pregunta y recibir una respuesta generada por la API. El c\u00f3digo base es el proporcionado anteriormente, integrado en una interfaz de Streamlit sin modificaciones al bloque original de la API.</p>"},{"location":"pi/p5/#prerrequisitos","title":"Prerrequisitos","text":"<p>Antes de comenzar, aseg\u00farate de tener lo siguiente:</p> <ol> <li>Python instalado (versi\u00f3n 3.8 o superior).</li> <li>Clave de API de Google Generative AI:</li> <li>Reg\u00edstrate en Google AI Studio y genera una clave de API.</li> </ol>"},{"location":"pi/p5/#paso-1-configurar-el-entorno","title":"Paso 1: Configurar el Entorno","text":"<ol> <li> <p>Crea un directorio para el proyecto:    <pre><code>mkdir gemini-streamlit-app\ncd gemini-streamlit-app\n</code></pre></p> </li> <li> <p>Crea un entorno virtual (opcional, pero recomendado):    <pre><code>python -m venv venv\nsource venv/bin/activate  # En Windows: venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Instala las dependencias necesarias:    Ejecuta el siguiente comando para instalar Streamlit y la biblioteca de Google Generative AI:    <pre><code>pip install -q -U google-genai\n</code></pre></p> </li> </ol>"},{"location":"pi/p5/#paso-2-crear-el-codigo-de-la-aplicacion","title":"Paso 2: Crear el C\u00f3digo de la Aplicaci\u00f3n","text":"<p>Crea un archivo llamado <code>app_gemini_basica.py</code> y copia el siguiente c\u00f3digo. Este c\u00f3digo integra el bloque original de la Gemini API en una aplicaci\u00f3n Streamlit.</p> <pre><code>import streamlit as st\nfrom google import genai\n\n# Configuraci\u00f3n de la p\u00e1gina\nst.set_page_config(page_title=\"Chat B\u00e1sico con Gemini\", layout=\"centered\")\nst.title(\"\ud83d\udcac Chat con Gemini\")\nst.markdown(\"Ingresa un tema o pregunta para obtener una respuesta generada por Gemini.\")\n\n# Interfaz de usuario\nprompt = st.text_input(\"Escribe tu pregunta o tema:\", placeholder=\"Ej. Explica c\u00f3mo funciona la IA en pocas palabras\")\nenviar = st.button(\"Generar Respuesta\")\n\n# Funci\u00f3n que usa el c\u00f3digo original\ndef generar_respuesta(prompt):\n    if not prompt:\n        return \"Por favor, ingresa un tema o pregunta.\"\n    try:\n        client = genai.Client(api_key=\"YOUR_API_KEY\")  # C\u00f3digo original\n        response = client.models.generate_content(\n            model=\"gemini-2.0-flash\", contents=prompt  # C\u00f3digo original con prompt din\u00e1mico\n        )\n        return response.text  # C\u00f3digo original\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n# L\u00f3gica principal\nif enviar and prompt:\n    with st.spinner(\"Generando respuesta...\"):\n        respuesta = generar_respuesta(prompt)\n        st.subheader(\"Respuesta:\")\n        st.markdown(respuesta)\nelse:\n    st.info(\"Escribe un tema o pregunta y haz clic en Generar Respuesta.\")\n</code></pre>"},{"location":"pi/p5/#explicacion-del-codigo","title":"Explicaci\u00f3n del C\u00f3digo","text":"<ul> <li>Importaciones:</li> <li><code>streamlit</code>: Biblioteca para crear la interfaz web.</li> <li><code>google.genai</code>: Biblioteca para interactuar con la Gemini API.</li> <li>Configuraci\u00f3n de Streamlit:</li> <li><code>st.set_page_config</code>: Define el t\u00edtulo de la p\u00e1gina y el dise\u00f1o.</li> <li><code>st.title</code> y <code>st.markdown</code>: Agregan un t\u00edtulo y una descripci\u00f3n.</li> <li>Interfaz de usuario:</li> <li><code>st.text_input</code>: Crea un campo de texto para que el usuario ingrese un prompt.</li> <li><code>st.button</code>: Agrega un bot\u00f3n para enviar el prompt.</li> <li>Funci\u00f3n <code>generar_respuesta</code>:</li> <li>Usa el c\u00f3digo original sin modificaciones, solo reemplazando el prompt fijo por el ingresado por el usuario.</li> <li>Incluye manejo de errores y verificaci\u00f3n de prompt vac\u00edo.</li> <li>L\u00f3gica principal:</li> <li>Si el usuario hace clic en \"Generar Respuesta\" y hay un prompt, se llama a <code>generar_respuesta</code> y se muestra la respuesta en la interfaz.</li> </ul>"},{"location":"pi/p5/#paso-3-configurar-la-clave-de-api","title":"Paso 3: Configurar la Clave de API","text":"<ol> <li>Obt\u00e9n tu clave de API:</li> <li>Ve a Google AI Studio.</li> <li>Crea un proyecto y genera una clave de API.</li> <li>Inserta la clave en el c\u00f3digo:</li> <li>Abre <code>app_gemini_basica.py</code>.</li> <li>Reemplaza <code>\"YOUR_API_KEY\"</code> en la l\u00ednea <code>client = genai.Client(api_key=\"YOUR_API_KEY\")</code> con tu clave real, por ejemplo:      <pre><code>client = genai.Client(api_key=\"tu_clave_de_api_aqu\u00ed\")\n</code></pre></li> <li>Advertencia: No compartas el c\u00f3digo con la clave de API en repositorios p\u00fablicos, ya que es informaci\u00f3n sensible.</li> </ol>"},{"location":"pi/p5/#paso-4-ejecutar-la-aplicacion","title":"Paso 4: Ejecutar la Aplicaci\u00f3n","text":"<ol> <li>Guarda el archivo <code>app_gemini_basica.py</code> en tu directorio de trabajo.</li> <li>Ejecuta la aplicaci\u00f3n:    En la terminal, con el entorno virtual activado, ejecuta:    <pre><code>streamlit run app_gemini_basica.py\n</code></pre></li> <li>Accede a la aplicaci\u00f3n:</li> <li>Streamlit abrir\u00e1 autom\u00e1ticamente una ventana en tu navegador con la URL <code>http://localhost:8501</code>.</li> <li>Si no se abre, ingresa manualmente esa URL en tu navegador.</li> </ol>"},{"location":"pi/p5/#paso-5-usar-la-aplicacion","title":"Paso 5: Usar la Aplicaci\u00f3n","text":"<ol> <li>Ingresa un prompt:</li> <li>En el campo de texto, escribe una pregunta o tema, por ejemplo: \"Explica c\u00f3mo funciona la IA en pocas palabras\".</li> <li>Genera la respuesta:</li> <li>Haz clic en el bot\u00f3n \"Generar Respuesta\".</li> <li>La aplicaci\u00f3n mostrar\u00e1 un mensaje de \"Generando respuesta...\" mientras procesa.</li> <li>La respuesta de la Gemini API aparecer\u00e1 en la secci\u00f3n \"Respuesta\" en formato markdown.</li> <li>Prueba diferentes prompts:</li> <li>Intenta con preguntas como \"Describe la fotos\u00edntesis\" o \"Escribe un poema corto\".</li> </ol>"},{"location":"pi/p6/","title":"Cursos Platzi","text":"<pre><code>https://docs.google.com/spreadsheets/d/1YW6nHCu6GHgHu4KFFn-Kjcjts8MlrAwX/edit?usp=sharing&amp;ouid=113334087340890423506&amp;rtpof=true&amp;sd=true\n</code></pre>"}]}