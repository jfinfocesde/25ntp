{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Inicio","text":""},{"location":"#bienvenidos-al-submodulo-nuevas-tecnologias-de-programacion","title":"\ud83d\ude80 Bienvenidos al Subm\u00f3dulo Nuevas Tecnolog\u00edas de Programaci\u00f3n","text":"<p>\u00a1Bienvenidos a este emocionante viaje hacia el mundo de la programaci\u00f3n, el control de versiones y el an\u00e1lisis de datos! Este curso est\u00e1 dise\u00f1ado para introducirte en herramientas esenciales como Python, Git, Pandas, y m\u00e1s, que son ampliamente utilizadas en la industria moderna. Ya seas un principiante o alguien con experiencia previa en tecnolog\u00eda, este curso te brindar\u00e1 las habilidades pr\u00e1cticas necesarias para destacar en el mundo digital.</p>"},{"location":"#que-aprenderas-en-este-curso","title":"\u00bfQu\u00e9 aprender\u00e1s en este curso?","text":"<p>Este curso abarca una amplia gama de temas fundamentales y avanzados, organizados en m\u00f3dulos espec\u00edficos:</p>"},{"location":"#1-fundamentacion-en-python","title":"1. Fundamentaci\u00f3n en Python","text":"<ul> <li>Configuraci\u00f3n y herramientas: Aprender\u00e1s sobre par\u00e1metros de configuraci\u00f3n de Python, como variables de entorno y configuraci\u00f3n de IDEs, para optimizar tu entorno de desarrollo.</li> <li>Resoluci\u00f3n de problemas comunes: Dominar\u00e1s conceptos b\u00e1sicos como la declaraci\u00f3n de variables, uso de condicionales, ciclos y funciones.</li> <li>Estructuras de datos: Explorar\u00e1s listas, tuplas y diccionarios, elementos clave para manipular datos de manera eficiente.</li> </ul>"},{"location":"#2-sistemas-de-control-de-versiones-git","title":"2. Sistemas de Control de Versiones (Git)","text":"<ul> <li>Introducci\u00f3n a Git: Entender\u00e1s conceptos b\u00e1sicos, terminolog\u00eda y los beneficios de usar Git para el control de versiones.</li> <li>Configuraci\u00f3n inicial: Aprender\u00e1s a configurar tu usuario, iniciar repositorios y manejar el flujo de trabajo b\u00e1sico de Git.</li> <li>Manejo de repositorios: Crear\u00e1s y clonar\u00e1s repositorios, gestionar\u00e1s archivos (a\u00f1adir, modificar, eliminar y confirmar cambios), y trabajar\u00e1s con ramas para colaborar en proyectos.</li> <li>Resoluci\u00f3n de conflictos: Aprender\u00e1s a fusionar ramas y resolver conflictos que puedan surgir durante el desarrollo colaborativo.</li> </ul>"},{"location":"#3-configuracion-de-ambientes-virtuales","title":"3. Configuraci\u00f3n de Ambientes Virtuales","text":"<ul> <li>Creaci\u00f3n y gesti\u00f3n de ambientes virtuales: Aprender\u00e1s a crear y gestionar ambientes virtuales en Python utilizando herramientas como <code>venv</code> y <code>conda</code>, para aislar las dependencias de tus proyectos.</li> <li>Configuraci\u00f3n espec\u00edfica del proyecto: Dispondr\u00e1s archivos y configuraciones espec\u00edficas dentro del ambiente virtual para garantizar un desarrollo limpio y organizado.</li> </ul>"},{"location":"#4-fundamentos-del-analisis-de-datos-con-pandas","title":"4. Fundamentos del An\u00e1lisis de Datos con Pandas","text":"<ul> <li>Introducci\u00f3n a Pandas: Conocer\u00e1s estructuras de datos como <code>DataFrame</code> y <code>Series</code>, esenciales para el an\u00e1lisis de datos.</li> <li>Manipulaci\u00f3n de datos: Aprender\u00e1s operaciones b\u00e1sicas como filtrado, agrupaci\u00f3n, fusi\u00f3n y transformaci\u00f3n de datos, para extraer insights valiosos.</li> </ul>"},{"location":"#5-visualizacion-de-datos-con-matplotlib-y-seaborn","title":"5. Visualizaci\u00f3n de Datos con Matplotlib y Seaborn","text":"<ul> <li>Creaci\u00f3n de gr\u00e1ficos: Aprender\u00e1s a crear gr\u00e1ficos b\u00e1sicos y avanzados con Matplotlib, as\u00ed como visualizaciones estad\u00edsticas complejas con Seaborn.</li> <li>Integraci\u00f3n con Pandas: Combinar\u00e1s Pandas con Matplotlib y Seaborn para visualizar directamente tus DataFrames y generar informes visuales impactantes.</li> </ul>"},{"location":"#6-creacion-de-reportes-en-html-con-resultados-analiticos","title":"6. Creaci\u00f3n de Reportes en HTML con Resultados Anal\u00edticos","text":"<ul> <li>Conversi\u00f3n de DataFrames a HTML: Aprender\u00e1s a convertir tus DataFrames de Pandas a formatos HTML para integrarlos en p\u00e1ginas web.</li> <li>Personalizaci\u00f3n de tablas: Mejorar\u00e1s la presentaci\u00f3n de tus datos utilizando CSS y librer\u00edas de JavaScript como DataTables, para hacer tus reportes interactivos y atractivos.</li> </ul>"},{"location":"#metodologia-del-curso","title":"Metodolog\u00eda del curso","text":"<p>El curso combina teor\u00eda y pr\u00e1ctica para garantizar que aprendas de manera efectiva:</p> <ul> <li>Clases te\u00f3ricas: Explicaciones claras y concisas sobre los conceptos fundamentales.</li> <li>Laboratorios pr\u00e1cticos: Ejercicios guiados para aplicar lo aprendido en entornos controlados.</li> <li>Proyectos integradores: Desarrollo de soluciones completas que integran Python, Git, Pandas y herramientas de visualizaci\u00f3n.</li> </ul>"},{"location":"#compromiso-del-cesde","title":"Compromiso del CESDE","text":"<p>En el CESDE, estamos comprometidos con tu \u00e9xito. Este curso no solo busca ense\u00f1arte herramientas tecnol\u00f3gicas, sino tambi\u00e9n inspirarte a ser un agente de cambio en el mundo digital. Nuestro objetivo es que al finalizar este programa, tengas la confianza y las habilidades necesarias para enfrentar cualquier desaf\u00edo tecnol\u00f3gico.</p>"},{"location":"#comencemos-este-viaje-juntos","title":"\u00a1Comencemos este viaje juntos!","text":"<p>Estamos emocionados de acompa\u00f1arte en este proceso de aprendizaje. Con dedicaci\u00f3n y esfuerzo, pronto estar\u00e1s creando soluciones innovadoras, analizando datos de manera eficiente y colaborando en proyectos tecnol\u00f3gicos de alto impacto.</p> <p>\u00a1Bienvenido al futuro de la tecnolog\u00eda!</p>"},{"location":"about/","title":"Acerca de","text":"<p>El El Subm\u00f3dulo Nuevas Tecnolog\u00edas de Programaci\u00f3n es una iniciativa educativa del CESDE, dise\u00f1ada para introducir a los estudiantes en herramientas clave como Python, Git y Pandas. Este curso combina teor\u00eda y pr\u00e1ctica para brindar una base s\u00f3lida en programaci\u00f3n, an\u00e1lisis de datos y colaboraci\u00f3n en proyectos tecnol\u00f3gicos.</p>"},{"location":"about/#docente-del-curso","title":"Docente del Curso","text":"<p>\u00a1Hola a todos!</p> <p>Soy Jhon Fredy Valencia G\u00f3mez, su docente para este programa de Desarrollo de Software. Me emociona mucho darles la bienvenida y comenzar este viaje de aprendizaje juntos.</p> <p>En este programa, mi objetivo es proporcionarles una formaci\u00f3n pr\u00e1ctica y completa en desarrollo de software. Mi enfoque se basa en el aprendizaje activo, utilizando ejercicios, proyectos y casos de estudio que les permitir\u00e1n aplicar inmediatamente lo aprendido.</p> <p>Mi experiencia en el CESDE y el SENA me ha ense\u00f1ado la importancia de una ense\u00f1anza clara, accesible y motivadora. Estoy comprometido con su \u00e9xito y har\u00e9 todo lo posible para apoyarlos en cada etapa del proceso de aprendizaje, respondiendo a sus dudas y brind\u00e1ndoles la retroalimentaci\u00f3n que necesitan.</p>"},{"location":"about/#proposito-del-curso","title":"Prop\u00f3sito del Curso","text":"<p>Este curso busca capacitar a los estudiantes en el uso de herramientas modernas para resolver problemas reales, desde la automatizaci\u00f3n de tareas hasta el an\u00e1lisis de grandes vol\u00famenes de datos. Al finalizar, los participantes estar\u00e1n preparados para aplicar sus conocimientos en entornos profesionales y colaborar en proyectos tecnol\u00f3gicos de alto impacto.</p> <p>\u00a1\u00danete a nosotros y comienza tu camino hacia el futuro de la tecnolog\u00eda!</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"content/p1/","title":"Semana 1 - Pacto pedag\u00f3gico","text":"<p>El pacto pedag\u00f3gico es un acuerdo que se establece entre el docente y los estudiantes al inicio de un curso, con el fin de establecer las normas, expectativas, responsabilidades y compromisos de todas las partes involucradas en el proceso de ense\u00f1anza-aprendizaje.</p> Grupo Viernes 18:15 - 21:30Grupo S\u00e1bado 7:30 - 10:30 <p> <p>Tu navegador no admite la visualizaci\u00f3n de PDFs. Puedes descargarlo aqu\u00ed:      Descargar PDF.</p> </p> <p> <p>Tu navegador no admite la visualizaci\u00f3n de PDFs. Puedes descargarlo aqu\u00ed:      Descargar PDF.</p> </p>"},{"location":"content/p10/","title":"Semana 10 Filtros <code>.loc</code> y <code>.iloc</code>","text":""},{"location":"content/p10/#version-google-colab","title":"Version Google Colab","text":"<p>Este tutorial se puede ejecutar en Google Colab. Para abrir el notebook en Colab, haz clic en el siguiente enlace:</p> <p>Abrir en Colab</p> <p>Pandas es una biblioteca de Python ampliamente utilizada para el an\u00e1lisis de datos. Los m\u00e9todos <code>.loc</code> y <code>.iloc</code> permiten acceder a filas y columnas de un DataFrame de manera precisa. La principal diferencia entre ellos radica en c\u00f3mo seleccionan los datos:</p> <ul> <li><code>.loc</code>: Selecciona datos utilizando etiquetas (nombres de filas o columnas).</li> <li><code>.iloc</code>: Selecciona datos utilizando \u00edndices num\u00e9ricos (posiciones enteras).</li> </ul> <p>Ambos m\u00e9todos son muy flexibles y admiten selecciones de filas, columnas o subconjuntos de datos, ya sea individuales, rangos o listas espec\u00edficas.</p>"},{"location":"content/p10/#1-preparacion-del-entorno","title":"1. Preparaci\u00f3n del entorno","text":"<p>Antes de comenzar, aseg\u00farate de tener instalada la biblioteca Pandas. Si no la tienes, inst\u00e1lala con:</p> <pre><code>pip install pandas\n</code></pre> <p>Carguemos un DataFrame de ejemplo para trabajar con \u00e9l:</p> <pre><code>import pandas as pd\n\n# Crear un DataFrame de ejemplo\ndata = {\n    'Nombre': ['Ana', 'Bob', 'Clara', 'David', 'Emma'],\n    'Edad': [25, 30, 22, 35, 28],\n    'Ciudad': ['Madrid', 'Barcelona', 'Sevilla', 'Valencia', 'Bilbao'],\n    'Puntuaci\u00f3n': [85, 90, 88, 92, 87]\n}\n\ndf = pd.DataFrame(data, index=['a', 'b', 'c', 'd', 'e'])\nprint(df)\n</code></pre> <p>Salida:</p> <pre><code>   Nombre  Edad     Ciudad  Puntuaci\u00f3n\na    Ana    25    Madrid          85\nb    Bob    30 Barcelona          90\nc  Clara    22   Sevilla          88\nd  David    35  Valencia          92\ne   Emma    28    Bilbao          87\n</code></pre> <p>Este DataFrame tiene: - \u00cdndices de filas: <code>'a', 'b', 'c', 'd', 'e'</code>. - Columnas: <code>'Nombre', 'Edad', 'Ciudad', 'Puntuaci\u00f3n'</code>.</p> <p>Ahora, usaremos este DataFrame para explorar <code>.loc</code> y <code>.iloc</code>.</p>"},{"location":"content/p10/#2-uso-de-loc","title":"2. Uso de <code>.loc</code>","text":"<p>El m\u00e9todo <code>.loc</code> se basa en etiquetas (nombres de filas y columnas). Su sintaxis general es:</p> <pre><code>df.loc[filas, columnas]\n</code></pre> <p>Donde: - <code>filas</code>: Puede ser una etiqueta de \u00edndice, una lista de etiquetas, un rango de etiquetas (usando <code>:</code>) o una condici\u00f3n booleana. - <code>columnas</code>: Puede ser una etiqueta de columna, una lista de etiquetas o un rango de etiquetas.</p>"},{"location":"content/p10/#21-seleccionar-una-sola-fila-por-etiqueta","title":"2.1. Seleccionar una sola fila por etiqueta","text":"<pre><code># Seleccionar la fila con \u00edndice 'b'\nprint(df.loc['b'])\n</code></pre> <p>Salida:</p> <pre><code>Nombre            Bob\nEdad               30\nCiudad      Barcelona\nPuntuaci\u00f3n         90\nName: b, dtype: object\n</code></pre> <p>Esto devuelve una Serie con los valores de la fila <code>'b'</code>.</p>"},{"location":"content/p10/#22-seleccionar-una-celda-especifica","title":"2.2. Seleccionar una celda espec\u00edfica","text":"<p>Puedes especificar tanto la fila como la columna:</p> <pre><code># Seleccionar la edad de la fila 'c'\nprint(df.loc['c', 'Edad'])\n</code></pre> <p>Salida:</p> <pre><code>22\n</code></pre>"},{"location":"content/p10/#23-seleccionar-multiples-filas","title":"2.3. Seleccionar m\u00faltiples filas","text":"<p>Puedes pasar una lista de etiquetas o un rango:</p> <pre><code># Seleccionar las filas 'a' y 'c'\nprint(df.loc[['a', 'c']])\n</code></pre> <p>Salida:</p> <pre><code>   Nombre  Edad   Ciudad  Puntuaci\u00f3n\na    Ana    25  Madrid          85\nc  Clara    22 Sevilla          88\n</code></pre> <p>Usando un rango:</p> <pre><code># Seleccionar filas desde 'a' hasta 'c' (inclusive)\nprint(df.loc['a':'c'])\n</code></pre> <p>Salida:</p> <pre><code>   Nombre  Edad     Ciudad  Puntuaci\u00f3n\na    Ana    25    Madrid          85\nb    Bob    30 Barcelona          90\nc  Clara    22   Sevilla          88\n</code></pre> <p>Nota: En <code>.loc</code>, los rangos incluyen el valor final (a diferencia de los \u00edndices num\u00e9ricos en Python).</p>"},{"location":"content/p10/#24-seleccionar-columnas-especificas","title":"2.4. Seleccionar columnas espec\u00edficas","text":"<p>Puedes seleccionar columnas espec\u00edficas para una o m\u00e1s filas:</p> <pre><code># Seleccionar 'Nombre' y 'Edad' de la fila 'b'\nprint(df.loc['b', ['Nombre', 'Edad']])\n</code></pre> <p>Salida:</p> <pre><code>Nombre    Bob\nEdad       30\nName: b, dtype: object\n</code></pre>"},{"location":"content/p10/#25-seleccionar-con-condiciones-booleanas","title":"2.5. Seleccionar con condiciones booleanas","text":"<p><code>.loc</code> es muy poderoso para filtrar filas basadas en condiciones:</p> <pre><code># Seleccionar filas donde la edad sea mayor a 25\nprint(df.loc[df['Edad'] &gt; 25])\n</code></pre> <p>Salida:</p> <pre><code>   Nombre  Edad     Ciudad  Puntuaci\u00f3n\nb    Bob    30 Barcelona          90\nd  David    35  Valencia          92\ne   Emma    28    Bilbao          87\n</code></pre> <p>Puedes combinar condiciones:</p> <pre><code># Seleccionar filas donde Edad &gt; 25 y Puntuaci\u00f3n &gt;= 90\nprint(df.loc[(df['Edad'] &gt; 25) &amp; (df['Puntuaci\u00f3n'] &gt;= 90)])\n</code></pre> <p>Salida:</p> <pre><code>   Nombre  Edad     Ciudad  Puntuaci\u00f3n\nb    Bob    30 Barcelona          90\nd  David    35  Valencia          92\n</code></pre>"},{"location":"content/p10/#26-modificar-datos-con-loc","title":"2.6. Modificar datos con <code>.loc</code>","text":"<p><code>.loc</code> tambi\u00e9n permite modificar valores en el DataFrame:</p> <pre><code># Cambiar la puntuaci\u00f3n de la fila 'a'\ndf.loc['a', 'Puntuaci\u00f3n'] = 95\nprint(df.loc['a'])\n</code></pre> <p>Salida:</p> <pre><code>Nombre          Ana\nEdad             25\nCiudad       Madrid\nPuntuaci\u00f3n       95\nName: a, dtype: object\n</code></pre>"},{"location":"content/p10/#3-uso-de-iloc","title":"3. Uso de <code>.iloc</code>","text":"<p>El m\u00e9todo <code>.iloc</code> se basa en \u00edndices num\u00e9ricos (posiciones enteras). Su sintaxis es similar:</p> <pre><code>df.iloc[filas, columnas]\n</code></pre> <p>Donde: - <code>filas</code>: Posiciones de las filas (0, 1, 2, ...). - <code>columnas</code>: Posiciones de las columnas (0, 1, 2, ...).</p>"},{"location":"content/p10/#31-seleccionar-una-sola-fila-por-posicion","title":"3.1. Seleccionar una sola fila por posici\u00f3n","text":"<pre><code># Seleccionar la fila en la posici\u00f3n 1 (segunda fila)\nprint(df.iloc[1])\n</code></pre> <p>Salida:</p> <pre><code>Nombre            Bob\nEdad               30\nCiudad      Barcelona\nPuntuaci\u00f3n         90\nName: b, dtype: object\n</code></pre>"},{"location":"content/p10/#32-seleccionar-una-celda-especifica","title":"3.2. Seleccionar una celda espec\u00edfica","text":"<pre><code># Seleccionar la celda en la fila 2, columna 1 (Edad de Clara)\nprint(df.iloc[2, 1])\n</code></pre> <p>Salida:</p> <pre><code>22\n</code></pre>"},{"location":"content/p10/#33-seleccionar-multiples-filas","title":"3.3. Seleccionar m\u00faltiples filas","text":"<p>Puedes usar listas o rangos de posiciones:</p> <pre><code># Seleccionar las filas en las posiciones 0 y 2\nprint(df.iloc[[0, 2]])\n</code></pre> <p>Salida:</p> <pre><code>   Nombre  Edad   Ciudad  Puntuaci\u00f3n\na    Ana    25  Madrid          95\nc  Clara    22 Sevilla          88\n</code></pre> <p>Usando un rango:</p> <pre><code># Seleccionar filas desde la posici\u00f3n 0 hasta la 2 (excluye la 2)\nprint(df.iloc[0:2])\n</code></pre> <p>Salida:</p> <pre><code>  Nombre  Edad     Ciudad  Puntuaci\u00f3n\na   Ana    25    Madrid          95\nb   Bob    30 Barcelona          90\n</code></pre> <p>Nota: A diferencia de <code>.loc</code>, los rangos en <code>.iloc</code> excluyen el valor final, como es habitual en Python.</p>"},{"location":"content/p10/#34-seleccionar-columnas-especificas","title":"3.4. Seleccionar columnas espec\u00edficas","text":"<pre><code># Seleccionar las columnas en las posiciones 0 y 2 para la fila 1\nprint(df.iloc[1, [0, 2]])\n</code></pre> <p>Salida:</p> <pre><code>Nombre          Bob\nCiudad    Barcelona\nName: b, dtype: object\n</code></pre>"},{"location":"content/p10/#35-seleccionar-un-subconjunto-de-filas-y-columnas","title":"3.5. Seleccionar un subconjunto de filas y columnas","text":"<pre><code># Seleccionar las primeras 3 filas y las primeras 2 columnas\nprint(df.iloc[0:3, 0:2])\n</code></pre> <p>Salida:</p> <pre><code>   Nombre  Edad\na    Ana    25\nb    Bob    30\nc  Clara    22\n</code></pre>"},{"location":"content/p10/#36-modificar-datos-con-iloc","title":"3.6. Modificar datos con <code>.iloc</code>","text":"<p>Al igual que <code>.loc</code>, puedes modificar valores:</p> <pre><code># Cambiar la edad en la fila 0\ndf.iloc[0, 1] = 26\nprint(df.iloc[0])\n</code></pre> <p>Salida:</p> <pre><code>Nombre          Ana\nEdad             26\nCiudad       Madrid\nPuntuaci\u00f3n       95\nName: a, dtype: object\n</code></pre>"},{"location":"content/p10/#4-diferencias-clave-entre-loc-y-iloc","title":"4. Diferencias clave entre <code>.loc</code> y <code>.iloc</code>","text":"Caracter\u00edstica <code>.loc</code> <code>.iloc</code> Selecci\u00f3n basada en Etiquetas (nombres) \u00cdndices num\u00e9ricos (posiciones) Rangos Incluye el valor final Excluye el valor final Uso t\u00edpico Cuando conoces los nombres de filas/columnas Cuando trabajas con posiciones Condiciones booleanas Compatible No compatible"},{"location":"content/p10/#5-errores-comunes-y-como-evitarlos","title":"5. Errores comunes y c\u00f3mo evitarlos","text":"<ol> <li>Error de \u00edndice en <code>.loc</code>:</li> <li>Si usas una etiqueta que no existe, obtendr\u00e1s un KeyError:      <pre><code>df.loc['z']  # Error: 'z' no es un \u00edndice\n</code></pre></li> <li> <p>Soluci\u00f3n: Verifica las etiquetas con <code>df.index</code> o <code>df.columns</code>.</p> </li> <li> <p>Error de \u00edndice en <code>.iloc</code>:</p> </li> <li>Si usas un \u00edndice fuera de rango, obtendr\u00e1s un IndexError:      <pre><code>df.iloc[10]  # Error: \u00edndice 10 no existe\n</code></pre></li> <li> <p>Soluci\u00f3n: Usa <code>df.shape</code> para conocer las dimensiones del DataFrame.</p> </li> <li> <p>Confundir <code>.loc</code> con <code>.iloc</code>:</p> </li> <li>Usar etiquetas con <code>.iloc</code> o \u00edndices num\u00e9ricos con <code>.loc</code> causar\u00e1 errores:      <pre><code>df.loc[0]    # Error si el \u00edndice no es 0\ndf.iloc['a'] # Error: iloc no acepta etiquetas\n</code></pre></li> <li> <p>Soluci\u00f3n: Recuerda que <code>.loc</code> usa etiquetas y <code>.iloc</code> usa posiciones.</p> </li> <li> <p>Modificar vistas en lugar de copias:</p> </li> <li>Al usar <code>.loc</code> o <code>.iloc</code> para seleccionar un subconjunto y modificarlo, puedes encontrarte con un SettingWithCopyWarning si no tienes cuidado:      <pre><code>subset = df.loc[df['Edad'] &gt; 25]\nsubset['Edad'] = 0  # Puede causar advertencia\n</code></pre></li> <li>Soluci\u00f3n: Usa <code>.copy()</code> para crear una copia expl\u00edcita:      <pre><code>subset = df.loc[df['Edad'] &gt; 25].copy()\nsubset['Edad'] = 0\n</code></pre></li> </ol>"},{"location":"content/p10/#actividad-4-creacion-de-una-aplicacion-interactiva-con-streamlit-utilizando-loc-y-iloc","title":"Actividad 4: Creaci\u00f3n de una aplicaci\u00f3n interactiva con Streamlit utilizando .loc y .iloc","text":"<p>Desarrollar una aplicaci\u00f3n web interactiva utilizando Streamlit que permita a los usuarios explorar y manipular un DataFrame de Pandas, haciendo uso intensivo de los m\u00e9todos <code>.loc</code> y <code>.iloc</code> para realizar selecciones, filtros y modificaciones de datos. La tem\u00e1tica y el dise\u00f1o de la aplicaci\u00f3n son libres, permitiendo expresar su creatividad.</p> <p>Instrucciones generales:</p> <ul> <li>Desarrolar la actividad en el archivo \ud83d\udccc_M2_Actividad_4.py del proyecto integrador.</li> </ul>"},{"location":"content/p11/","title":"Semana 11 - Operaciones de Agregar, Agrupar y Fusionar en Pandas","text":""},{"location":"content/p11/#version-google-colab","title":"Version Google Colab","text":"<p>Este tutorial se puede ejecutar en Google Colab. Para abrir el notebook en Colab, haz clic en el siguiente enlace:</p> <p>Abrir en Colab</p>"},{"location":"content/p11/#1-agregar-datos-en-pandas","title":"1. Agregar datos en Pandas","text":"<p>\u00bfQu\u00e9 significa agregar datos en Pandas? Agregar datos en Pandas se refiere a combinar o a\u00f1adir filas o columnas de un DataFrame o Series a otro. Esto es \u00fatil para consolidar informaci\u00f3n de diferentes fuentes, como agregar nuevos registros (filas) o nuevas variables (columnas) a un conjunto de datos existente.</p> <p>M\u00e9todos principales para agregar datos: - <code>pd.concat()</code>: Combina DataFrames o Series a lo largo de un eje (filas o columnas). Es m\u00e1s flexible y recomendado que <code>append()</code>. - <code>append()</code>: M\u00e9todo obsoleto en versiones recientes de Pandas (a partir de Pandas 2.0). Se recomienda usar <code>pd.concat()</code> en su lugar. - Asignaci\u00f3n directa: Para agregar columnas nuevas a un DataFrame.</p> <p>Ejemplo de c\u00f3digo: Agregar filas y columnas</p> <pre><code>import pandas as pd\n\n# Crear dos DataFrames con datos de estudiantes\ndf1 = pd.DataFrame({\n    'Nombre': ['Ana', 'Luis'],\n    'Edad': [20, 22],\n    'Ciudad': ['Madrid', 'Barcelona']\n})\n\ndf2 = pd.DataFrame({\n    'Nombre': ['Marta', 'Pedro'],\n    'Edad': [19, 21],\n    'Ciudad': ['Valencia', 'Sevilla']\n})\n\n# Agregar filas usando pd.concat (eje 0 para filas)\ndf_combinado = pd.concat([df1, df2], ignore_index=True)\n# ignore_index=True reinicia los \u00edndices para evitar duplicados\n\nprint(\"DataFrame combinado (filas agregadas):\")\nprint(df_combinado)\n\n# Agregar una nueva columna\ndf_combinado['Nota'] = [8.5, 7.0, 9.0, 6.5]  # Nueva columna con notas\nprint(\"\\nDataFrame con nueva columna:\")\nprint(df_combinado)\n</code></pre> <p>Salida: <pre><code>DataFrame combinado (filas agregadas):\n   Nombre  Edad     Ciudad\n0    Ana    20    Madrid\n1   Luis    22  Barcelona\n2  Marta    19   Valencia\n3  Pedro    21    Sevilla\n\nDataFrame con nueva columna:\n   Nombre  Edad     Ciudad  Nota\n0    Ana    20    Madrid   8.5\n1   Luis    22  Barcelona   7.0\n2  Marta    19   Valencia   9.0\n3  Pedro    21    Sevilla   6.5\n</code></pre></p> <p>Nota sobre errores comunes: - Aseg\u00farate de que los DataFrames tengan las mismas columnas al usar <code>pd.concat()</code> para filas, o los datos se alinear\u00e1n incorrectamente. - Usa <code>ignore_index=True</code> para evitar \u00edndices duplicados al concatenar.</p>"},{"location":"content/p11/#2-agrupar-datos-en-pandas","title":"2. Agrupar datos en Pandas","text":"<p>\u00bfQu\u00e9 es la agrupaci\u00f3n de datos en Pandas y su prop\u00f3sito? La agrupaci\u00f3n en Pandas consiste en dividir un DataFrame en grupos basados en los valores de una o m\u00e1s columnas, para luego aplicar una operaci\u00f3n (como suma, promedio, conteo, etc.) a cada grupo. Es \u00fatil para resumir datos, como calcular el total de ventas por regi\u00f3n o el promedio de notas por curso.</p> <p>M\u00e9todo principal: <code>groupby()</code> El m\u00e9todo <code>groupby()</code> agrupa los datos seg\u00fan una columna (o varias) y permite realizar operaciones agregadas como <code>sum()</code>, <code>mean()</code>, <code>count()</code>, entre otras.</p> <p>Ejemplo de c\u00f3digo: Agrupar y calcular promedios</p> <pre><code>import pandas as pd\n\n# Crear un DataFrame con datos de ventas\ndf_ventas = pd.DataFrame({\n    'Producto': ['Manzana', 'Naranja', 'Manzana', 'Naranja', 'Manzana'],\n    'Ciudad': ['Madrid', 'Madrid', 'Barcelona', 'Barcelona', 'Madrid'],\n    'Ventas': [100, 150, 200, 120, 80]\n})\n\n# Agrupar por 'Producto' y calcular el promedio de ventas\nventas_por_producto = df_ventas.groupby('Producto')['Ventas'].mean()\n\nprint(\"Promedio de ventas por producto:\")\nprint(ventas_por_producto)\n\n# Agrupar por 'Ciudad' y contar el n\u00famero de registros\nconteo_por_ciudad = df_ventas.groupby('Ciudad').count()\n\nprint(\"\\nConteo de registros por ciudad:\")\nprint(conteo_por_ciudad)\n</code></pre> <p>Salida: <pre><code>Promedio de ventas por producto:\nProducto\nManzana    126.666667\nNaranja    135.000000\nName: Ventas, dtype: float64\n\nConteo de registros por ciudad:\n          Producto  Ventas\nCiudad                    \nBarcelona        2       2\nMadrid           3       3\n</code></pre></p> <p>Operaciones comunes tras <code>groupby()</code>: - <code>sum()</code>: Suma los valores de cada grupo. - <code>mean()</code>: Calcula el promedio. - <code>count()</code>: Cuenta el n\u00famero de registros. - <code>max()</code> / <code>min()</code>: Encuentra el valor m\u00e1ximo o m\u00ednimo.</p> <p>Nota sobre errores comunes: - Aseg\u00farate de seleccionar la columna correcta para la operaci\u00f3n tras <code>groupby()</code>, o recibir\u00e1s un error si intentas operar sobre columnas no num\u00e9ricas. - Si agrupas por m\u00faltiples columnas, usa una lista: <code>df.groupby(['col1', 'col2'])</code>.</p>"},{"location":"content/p11/#3-fusionar-datos-en-pandas","title":"3. Fusionar datos en Pandas","text":"<p>\u00bfQu\u00e9 significa fusionar datos en Pandas? Fusionar datos en Pandas implica combinar dos DataFrames bas\u00e1ndose en una o m\u00e1s columnas comunes (claves). Es similar a las operaciones <code>JOIN</code> en bases de datos SQL. Los m\u00e9todos principales son <code>merge()</code> y <code>join()</code>.</p> <p>Diferencias entre <code>merge()</code> y <code>join()</code>: - <code>merge()</code>: M\u00e1s flexible, permite combinar DataFrames bas\u00e1ndose en columnas espec\u00edficas o \u00edndices, con opciones para diferentes tipos de fusiones (inner, left, right, outer). - <code>join()</code>: Dise\u00f1ado espec\u00edficamente para combinar DataFrames bas\u00e1ndose en sus \u00edndices. Es menos flexible, pero \u00fatil para operaciones r\u00e1pidas con \u00edndices alineados.</p> <p>Tipos de fusiones: - Inner: Solo incluye filas con claves coincidentes en ambos DataFrames. - Left: Incluye todas las filas del DataFrame izquierdo, y las coincidencias del derecho (valores no coincidentes se rellenan con <code>NaN</code>). - Right: Similar a left, pero prioriza el DataFrame derecho. - Outer: Incluye todas las filas de ambos DataFrames, rellenando con <code>NaN</code> donde no hay coincidencias.</p> <p>Ejemplo de c\u00f3digo: Fusionar DataFrames</p> <pre><code>import pandas as pd\n\n# Crear dos DataFrames\ndf_estudiantes = pd.DataFrame({\n    'ID': [1, 2, 3, 4],\n    'Nombre': ['Ana', 'Luis', 'Marta', 'Pedro'],\n    'Curso': ['Matem\u00e1ticas', 'Historia', 'F\u00edsica', 'Qu\u00edmica']\n})\n\ndf_notas = pd.DataFrame({\n    'ID': [1, 2, 5],\n    'Nota': [8.5, 7.0, 9.0]\n})\n\n# Fusi\u00f3n tipo 'inner'\ninner_merge = pd.merge(df_estudiantes, df_notas, on='ID', how='inner')\n# 'on' especifica la columna clave; 'how' define el tipo de fusi\u00f3n\n\nprint(\"Fusi\u00f3n tipo inner:\")\nprint(inner_merge)\n\n# Fusi\u00f3n tipo 'left'\nleft_merge = pd.merge(df_estudiantes, df_notas, on='ID', how='left')\n\nprint(\"\\nFusi\u00f3n tipo left:\")\nprint(left_merge)\n</code></pre> <p>Salida: <pre><code>Fusi\u00f3n tipo inner:\n   ID Nombre        Curso  Nota\n0   1    Ana  Matem\u00e1ticas   8.5\n1   2   Luis     Historia   7.0\n\nFusi\u00f3n tipo left:\n   ID Nombre        Curso  Nota\n0   1    Ana  Matem\u00e1ticas   8.5\n1   2   Luis     Historia   7.0\n2   3  Marta       F\u00edsica   NaN\n3   4  Pedro      Qu\u00edmica   NaN\n</code></pre></p>"},{"location":"content/p12/","title":"Semana 12 - Evaluaci\u00f3n Segundo Momento","text":"Evaluaci\u00f3n de ConocimientoEvaluaci\u00f3n de Desempe\u00f1o <p>La evaluaci\u00f3n de conocimiento se realizar\u00e1 a trav\u00e9s de la plataforma Quizizz que aborda los temas vistos durante las primeras 5 semanas.</p> <ul> <li>Plataforma: Enlace Quizizz</li> <li>Acceso: Se proporcionar\u00e1 el enlace y c\u00f3digo de la prueba al inicio de la evaluaci\u00f3n</li> </ul> <p> <p>Este contenido est\u00e1 protegido. Por favor, ingresa la contrase\u00f1a para acceder:</p> Acceder <p></p>"},{"location":"content/p12/#creacion-de-una-aplicacion-basica-de-analisis-de-ventas-con-streamlit-y-pandas","title":"Creaci\u00f3n de una Aplicaci\u00f3n B\u00e1sica de An\u00e1lisis de Ventas con Streamlit y Pandas","text":"<p>Objetivo: Desarrollar una aplicaci\u00f3n web interactiva utilizando Streamlit y Pandas que permita cargar un conjunto de datos de ventas, aplicar filtros b\u00e1sicos y mostrar estad\u00edsticas simples.</p> <p>Descripci\u00f3n: Los estudiantes crear\u00e1n una aplicaci\u00f3n en Streamlit que: 1. Cargue un archivo CSV con datos de ventas. 2. Muestre el conjunto de datos completo. 3. Permita filtrar los datos por: - Categor\u00eda de producto (selecci\u00f3n \u00fanica). - Rango de precios (m\u00ednimo y m\u00e1ximo). 4. Muestre los datos filtrados. 5. Calcule y muestre dos estad\u00edsticas: el total de ventas y el precio promedio de los productos filtrados.</p> <p>Dataset: Se proporciona un archivo <code>sales_data.csv</code> con las siguientes columnas:</p> <ul> <li>Date: Fecha de la venta (formato: AAAA-MM-DD).</li> <li>Product: Nombre del producto (ej. Laptop, Phone).</li> <li>Category: Categor\u00eda del producto (Electronics, Accessories).</li> <li>Price: Precio unitario del producto (en USD).</li> <li>Quantity: Cantidad vendida.</li> <li>Total_Sales: Ventas totales (Price * Quantity).</li> </ul> <p>Instrucciones para los Estudiantes:</p> <ol> <li> <p>Configuraci\u00f3n:</p> <ul> <li>Instala las librer\u00edas necesarias: <code>pip install streamlit pandas</code>.</li> <li>Descarga el archivo <code>sales_data.csv</code> proporcionado o genera uno con datos similares.</li> <li>Crea un archivo Python (<code>.py</code>) para tu aplicaci\u00f3n.</li> </ul> </li> <li> <p>Tareas a Realizar:</p> <ul> <li>Cargar el dataset: Usa Pandas para leer <code>sales_data.csv</code>.</li> <li>Mostrar el dataset completo: Usa Streamlit para mostrar la tabla de datos.</li> <li>Crear filtros:<ul> <li>Un selector (<code>st.selectbox</code>) para elegir una categor\u00eda (Electronics o Accessories).</li> <li>Un control deslizante (<code>st.slider</code>) para seleccionar un rango de precios.</li> </ul> </li> <li>Filtrar los datos: Aplica los filtros al DataFrame usando Pandas.</li> <li>Mostrar datos filtrados: Muestra la tabla filtrada y el n\u00famero de registros.</li> <li>Calcular estad\u00edsticas:<ul> <li>Total de ventas (<code>Total_Sales</code>) de los datos filtrados.</li> <li>Precio promedio (<code>Price</code>) de los datos filtrados.</li> </ul> </li> <li>Mostrar estad\u00edsticas: Usa <code>st.metric</code> para mostrar los resultados.</li> </ul> </li> <li> <p>Plantilla de C\u00f3digo: <pre><code>import streamlit as st\nimport pandas as pd\n\n# T\u00edtulo de la aplicaci\u00f3n\nst.title(\"An\u00e1lisis B\u00e1sico de Ventas\")\n\n# Cargar el dataset\n# TODO: Carga el archivo 'sales_data.csv'\ndf = ...\n\n# Mostrar dataset completo\nst.subheader(\"Datos Completos\")\n# TODO: Muestra el DataFrame\n...\n\n# Filtros en la barra lateral\nst.sidebar.header(\"Filtros\")\n# TODO: Crea un selectbox para elegir una categor\u00eda\ncategory = ...\n# TODO: Crea un slider para el rango de precios\nmin_price = ...\nmax_price = ...\nprice_range = ...\n\n# Aplicar filtros\n# TODO: Filtra el DataFrame por categor\u00eda y rango de precios\nfiltered_df = ...\n\n# Mostrar datos filtrados\nst.subheader(\"Datos Filtrados\")\n# TODO: Muestra el DataFrame filtrado y el n\u00famero de registros\n...\n\n# Estad\u00edsticas\nst.subheader(\"Estad\u00edsticas\")\nif not filtered_df.empty:\n    # TODO: Calcula el total de ventas y el precio promedio\n    total_sales = ...\n    avg_price = ...\n    # TODO: Muestra las estad\u00edsticas con st.metric\n    ...\nelse:\n    st.write(\"No hay datos para los filtros seleccionados.\")\n</code></pre></p> </li> <li> <p>C\u00f3mo Ejecutar:</p> <ul> <li>Guarda el archivo <code>sales_data.csv</code> en el mismo directorio que tu script.</li> <li>Ejecuta la aplicaci\u00f3n con: <code>streamlit run nombre_del_archivo.py</code>.</li> <li>Abre el enlace que aparece en tu navegador para interactuar con la app.</li> </ul> </li> <li> <p>Entregable:</p> <ul> <li>Un archivo <code>.py</code> con el c\u00f3digo funcional.</li> <li>Una captura de pantalla de la aplicaci\u00f3n mostrando los filtros aplicados y las estad\u00edsticas.</li> </ul> </li> <li> <p>Criterios de Evaluaci\u00f3n:</p> <ul> <li>Funcionalidad (50%): La aplicaci\u00f3n carga el dataset, aplica filtros y muestra estad\u00edsticas correctamente.</li> <li>Interfaz (30%): La aplicaci\u00f3n es clara, con filtros en la barra lateral y resultados bien organizados.</li> <li>C\u00f3digo (20%): El c\u00f3digo es legible, con comentarios que explican cada secci\u00f3n.</li> </ul> </li> </ol> <p>Recursos:</p> <ul> <li>Documentaci\u00f3n de Streamlit: https://docs.streamlit.io/</li> <li>Documentaci\u00f3n de Pandas: https://pandas.pydata.org/docs/</li> <li>Ejemplo de dataset (<code>sales_data.csv</code>): Genera uno con el siguiente c\u00f3digo:</li> </ul> <p><pre><code>import pandas as pd\nimport numpy as np\n\nnp.random.seed(42)\ndates = pd.date_range(start=\"2024-01-01\", end=\"2024-12-31\", freq=\"D\")\nproducts = [\"Laptop\", \"Phone\", \"Tablet\", \"Headphones\"]\ncategories = [\"Electronics\", \"Accessories\"]\ndata = {\n    \"Date\": np.random.choice(dates, 50),\n    \"Product\": np.random.choice(products, 50),\n    \"Category\": np.random.choice(categories, 50),\n    \"Price\": np.random.uniform(50, 500, 50).round(2),\n    \"Quantity\": np.random.randint(1, 5, 50)\n}\ndf = pd.DataFrame(data)\ndf[\"Total_Sales\"] = df[\"Price\"] * df[\"Quantity\"]\ndf.to_csv(\"sales_data.csv\", index=False)\n</code></pre> </p>"},{"location":"content/p13/","title":"Semana 13","text":"<p>Note</p> <p>El contenido se publicar\u00e1 en la fecha correspondiente.</p>"},{"location":"content/p14/","title":"Semana 14","text":"<p>Note</p> <p>El contenido se publicar\u00e1 en la fecha correspondiente.</p>"},{"location":"content/p15/","title":"Semana 15","text":"<p>Note</p> <p>El contenido se publicar\u00e1 en la fecha correspondiente.</p>"},{"location":"content/p16/","title":"Semana 16","text":"<p>Note</p> <p>El contenido se publicar\u00e1 en la fecha correspondiente.</p>"},{"location":"content/p17/","title":"Semana 17","text":"<p>Note</p> <p>El contenido se publicar\u00e1 en la fecha correspondiente.</p>"},{"location":"content/p18/","title":"Semana 18","text":"<p>Note</p> <p>El contenido se publicar\u00e1 en la fecha correspondiente.</p>"},{"location":"content/p2/","title":"Semana 2 - Python","text":"<p>Python es un lenguaje de programaci\u00f3n de alto nivel, de prop\u00f3sito general, que fue creado por Guido van Rossum en el a\u00f1o 1989. Es un lenguaje intuitivo, f\u00e1cil de aprender y con una sintaxis clara y legible, que lo hace accesible tanto para principiantes como para programadores experimentados.</p> <p>Python se utiliza ampliamente en una gran variedad de aplicaciones, desde el desarrollo de aplicaciones web hasta la automatizaci\u00f3n de tareas, el an\u00e1lisis de datos y la inteligencia artificial. Tambi\u00e9n es muy popular en la comunidad cient\u00edfica y en la investigaci\u00f3n, gracias a la gran cantidad de bibliotecas y herramientas disponibles que lo hacen muy \u00fatil para el c\u00e1lculo y la visualizaci\u00f3n de datos.</p> <p>Adem\u00e1s de ser f\u00e1cil de aprender y de utilizar, Python tambi\u00e9n es un lenguaje de c\u00f3digo abierto, lo que significa que est\u00e1 disponible gratuitamente y que hay una gran comunidad de desarrolladores que contribuyen a su desarrollo y mejora.</p>"},{"location":"content/p2/#python-lenguaje-interpretado","title":"Python - Lenguaje interpretado","text":"<p>Python es un lenguaje de programaci\u00f3n interpretado de alto nivel. Esto significa que no se traduce a c\u00f3digo de m\u00e1quina antes de ejecutarse. En su lugar, se ejecuta l\u00ednea por l\u00ednea por un int\u00e9rprete. Este proceso de interpretaci\u00f3n puede ser m\u00e1s lento que la ejecuci\u00f3n de c\u00f3digo compilado, pero tiene algunas ventajas. Por ejemplo, los programas interpretados pueden ser m\u00e1s f\u00e1ciles de depurar y depurar. Tambi\u00e9n pueden ser portables a diferentes plataformas, ya que no necesitan ser compilados para cada plataforma espec\u00edfica.</p>"},{"location":"content/p2/#tabla-comparativa-lenguajes-compilados-vs-lenguajes-interpretados","title":"Tabla comparativa: Lenguajes compilados vs. Lenguajes interpretados","text":"Criterio Lenguajes compilados Lenguajes interpretados Ejemplos C, C++, Rust, Go, Haskell Python, Ruby, JavaScript, PHP Traducci\u00f3n Se realiza una vez, antes de la ejecuci\u00f3n Se realiza cada vez que se ejecuta el programa Velocidad Suelen ser m\u00e1s r\u00e1pidos y eficientes Suelen ser m\u00e1s lentos y consumir m\u00e1s recursos Portabilidad Dependen de la plataforma y el compilador Son independientes de la plataforma y el int\u00e9rprete Depuraci\u00f3n Es m\u00e1s dif\u00edcil encontrar y corregir errores Es m\u00e1s f\u00e1cil encontrar y corregir errores Flexibilidad Suelen ser m\u00e1s r\u00edgidos y estrictos Suelen ser m\u00e1s din\u00e1micos y flexibles Control Permiten un mayor control sobre el hardware Abstraen el hardware y lo gestionan autom\u00e1ticamente Tama\u00f1o Suelen generar archivos ejecutables m\u00e1s grandes Suelen generar archivos de c\u00f3digo fuente m\u00e1s peque\u00f1os <p>M\u00e1s informaci\u00f3n acerca de lenguajes interpretados</p>"},{"location":"content/p2/#instalacion-de-python","title":"Instalaci\u00f3n de Python","text":"<p>La instalaci\u00f3n de Python depende del sistema operativo que est\u00e9 utilizando. Aqu\u00ed se describen los pasos para instalar Python en los sistemas operativos m\u00e1s comunes:</p> <ul> <li>Windows: Descargue el instalador de Python desde el sitio web oficial de Python (https://www.python.org/downloads/).   Ejecute el instalador y siga las instrucciones en pantalla para instalar Python en su computadora.   Verifique que Python est\u00e1 instalado correctamente abriendo el s\u00edmbolo del sistema y escribiendo python y presionando Enter.</li> <li>macOS: Descargue el instalador de Python desde el sitio web oficial de Python (https://www.python.org/downloads/).   Ejecute el instalador y siga las instrucciones en pantalla para instalar Python en su computadora.   Verifique que Python est\u00e1 instalado correctamente abriendo la terminal y escribiendo python y presionando Enter.</li> <li>Linux: La mayor\u00eda de las distribuciones de Linux ya vienen con Python preinstalado. Para verificar si Python est\u00e1 instalado, abra una terminal y escriba python y presione Enter.</li> </ul> <p>Si no est\u00e1 instalado, puede instalar Python desde los repositorios de software de su distribuci\u00f3n de Linux. Por ejemplo, en Ubuntu, puede instalar Python escribiendo sudo apt-get install python en una terminal. Una vez que Python est\u00e9 instalado, puede comenzar a escribir y ejecutar programas en Python utilizando un editor de texto o un entorno de desarrollo integrado (IDE). Hay muchas opciones disponibles, incluyendo IDLE (incluido con la instalaci\u00f3n de Python), PyCharm, Visual Studio Code, entre otros.</p>"},{"location":"content/p2/#descargar-python","title":"Descargar Python","text":""},{"location":"content/p2/#sangrado-en-python","title":"Sangrado en Python","text":"<p>Sangrado (o indentaci\u00f3n) es un espacio en blanco al comienzo de una l\u00ednea de c\u00f3digo que se usa para resaltar la estructura y la organizaci\u00f3n del c\u00f3digo. El sangrado hace que el c\u00f3digo sea m\u00e1s legible visualmente agrupando l\u00edneas relacionadas.</p> <p>Es una forma de organizar visualmente el c\u00f3digo para facilitar su lectura. Se utilizan espacios o tabs para \"sangrar\" <code>(indentar)</code> determinadas l\u00edneas de c\u00f3digo.</p> <p>Python requiere sangrado de forma estricta, de tal manera que el sangrado indica la estructura y bloques de c\u00f3digo. Por ejemplo:</p> <pre><code>if condition:\n    print(\"Verdadero\")\nelse:\n    print(\"Falso\")\n</code></pre> <p>Aqu\u00ed el sangrado indica que la l\u00ednea print(\"Verdadero\") est\u00e1 dentro del bloque if, mientras que la l\u00ednea print(\"Falso\") est\u00e1 dentro del bloque else.</p> <p>Otro ejemplo:</p> <pre><code>for i in  range(5):\n print(i)\n</code></pre> <p>La l\u00ednea print(i) est\u00e1 sangrada debajo del bucle for, indicando que se ejecutar\u00e1 en cada iteraci\u00f3n.</p> <p>Algunos puntos sobre el sangrado en Python:</p> <ul> <li> <p>Es obligatorio. Python usa el sangrado para determinar la estructura del c\u00f3digo.</p> </li> <li> <p>Es estricto. El sangrado debe ser consistente dentro de un bloque, usar espacios no tabs.</p> </li> <li> <p>Se recomiendan 4 espacios, aunque Python tambi\u00e9n acepta tabs.</p> </li> <li> <p>No puede mezclar espacios y tabs dentro de un bloque.</p> </li> </ul> <p>El sangrado hace que el c\u00f3digo Python sea m\u00e1s legible visualmente, ayudando a agrupar l\u00edneas relacionadas y resaltando la estructura anidada. Por eso es una parte importante del estilo de codificaci\u00f3n en Python.</p>"},{"location":"content/p2/#variables-en-python","title":"Variables en python","text":"<p>En Python, las variables son usadas para almacenar informaci\u00f3n y pueden ser referenciadas por un nombre.</p> <p>Para crear una variable en Python, simplemente asignamos un valor a un nombre. Por ejemplo:</p> <pre><code>nombre = \"Juan\"\nedad = 25\nprint(\"Mi nombre es\", nombre)\nprint(\"Tengo\", edad, \"a\u00f1os\")\n</code></pre> <p>:::info Reglas</p> <p>En Python, hay ciertas reglas que deben seguirse al crear identificadores de variables:</p> <ul> <li> <p>Deben comenzar con una letra o un gui\u00f3n bajo.</p> </li> <li> <p>No pueden comenzar con un n\u00famero.</p> </li> <li> <p>No pueden contener espacios en blanco.</p> </li> <li> <p>No pueden ser una palabra reservada en Python (por ejemplo, \"if\", \"else\", \"for\", etc.).</p> </li> <li> <p>Deben ser \u00fanicos y significativos.</p> </li> <li> <p>Deben ser descriptivos y en min\u00fasculas, separando palabras con guiones bajos.</p> </li> </ul> <p>:::</p> <pre><code>#Identificadores v\u00e1lidos\nnombre = \"Juan\"\nedad = 25\n_nombre_completo = \"Juan P\u00e9rez\"\n#Identificadores inv\u00e1lidos\n123nombre = \"Juan\" # Comienza con un n\u00famero\nnombre-completo = \"Juan P\u00e9rez\" # Contiene un gui\u00f3n\nif = \"condicional\" # Es una palabra reservada\n</code></pre>"},{"location":"content/p2/#snake-case","title":"Snake case","text":"<p>El snake case es una convenci\u00f3n de nomenclatura muy utilizada en Python para nombrar variables, funciones y m\u00f3dulos. Aqu\u00ed tienes una explicaci\u00f3n m\u00e1s detallada:</p> <ol> <li>Definici\u00f3n: Snake case consiste en escribir palabras en min\u00fasculas, separ\u00e1ndolas con guiones bajos (_).</li> <li>Uso en Python:<ul> <li>Variables: mi_variable, contador, nombre_usuario</li> <li>Funciones: calcular_promedio(), obtener_datos(), imprimir_resultado()</li> <li>M\u00f3dulos: utilidades.py, procesamiento_datos.py</li> </ul> </li> <li>Ejemplos:</li> </ol> <pre><code># Variables\nnumero_de_usuarios = 100\nnombre_completo = \"Juan P\u00e9rez\"\n\n# Funci\u00f3n\ndef calcular_area_rectangulo(largo, ancho):\n    return largo * ancho\n\n# Llamada a funci\u00f3n\narea = calcular_area_rectangulo(5, 3)\n\n# En una clase\nclass ProcesadorTexto:\n    def __init__(self):\n        self.texto_actual = \"\"\n\n    def contar_palabras(self):\n        return len(self.texto_actual.split())\n</code></pre> <ol> <li>Ventajas:<ul> <li>Mejora la legibilidad del c\u00f3digo</li> <li>Es consistente con la filosof\u00eda de Python de c\u00f3digo expl\u00edcito y claro</li> <li>Facilita la distinci\u00f3n entre variables/funciones y clases (que usan PascalCase)</li> </ul> </li> <li>Cu\u00e1ndo no usar snake case:<ul> <li>Nombres de clases (usar PascalCase)</li> <li>Constantes (usar MAY\u00daSCULAS_CON_GUIONES_BAJOS)</li> </ul> </li> <li>Consideraciones:<ul> <li>Evitar nombres de una sola letra, excepto para contadores o \u00edndices muy simples</li> <li>Usar nombres descriptivos pero no excesivamente largos</li> </ul> </li> </ol>"},{"location":"content/p2/#constantes-en-python","title":"Constantes en Python","text":"<p>Las constantes en Python son un concepto un poco diferente comparado con otros lenguajes de programaci\u00f3n. </p> <ol> <li>Convenci\u00f3n de nombrado:<ul> <li>Se escriben en MAY\u00daSCULAS_CON_GUIONES_BAJOS</li> <li>Ejemplo: MAX_VALUE, PI, DEFAULT_CONFIG</li> </ul> </li> <li>Declaraci\u00f3n: En Python, t\u00e9cnicamente no existen constantes \"verdaderas\". Se usan variables regulares, pero por convenci\u00f3n, se tratan como constantes.</li> </ol> <pre><code>x = 5 # n\u00famero entero\ny = 5.0 # n\u00famero flotante\nz = 3 + 4j # n\u00famero complejo\n</code></pre>"},{"location":"content/p2/#tipos-de-datos-en-python","title":"Tipos de datos en python","text":"<p>En Python, existen diferentes tipos de datos que se pueden utilizar para almacenar informaci\u00f3n. Aqu\u00ed hay algunos de los tipos de datos m\u00e1s comunes:</p> <ol> <li>N\u00fameros: Python tiene soporte para n\u00fameros enteros (int), n\u00fameros flotantes (float) y n\u00fameros complejos (complex). Por ejemplo:</li> </ol> <pre><code>x = 5 # n\u00famero entero\ny = 5.0 # n\u00famero flotante\nz = 3 + 4j # n\u00famero complejo\n</code></pre> <ol> <li>Cadenas: Las cadenas en Python se usan para representar texto y se escriben entre comillas simples o dobles. Por ejemplo:</li> </ol> <pre><code>nombre = \"John Doe\"\napellido = 'Smith'\n</code></pre> <ol> <li>Listas: Las listas en Python son secuencias ordenadas de valores, que pueden ser de cualquier tipo de datos. Por ejemplo:</li> </ol> <pre><code>frutas = [\"manzana\", \"banana\", \"pera\"]\nnumeros = [1, 2, 3, 4, 5]\n</code></pre> <ol> <li>Tuplas: Las tuplas son similares a las listas, pero son inmutables y no se pueden modificar una vez creadas. Por ejemplo:</li> </ol> <pre><code>colores = (\"rojo\", \"verde\", \"azul\")\n</code></pre> <ol> <li>Diccionarios: Los diccionarios en Python son estructuras de datos no ordenadas que asocian claves con valores. Por ejemplo:</li> </ol> <pre><code>persona = {\n \"nombre\": \"John Doe\",\n \"edad\": 30,\n \"ciudad\": \"New York\"\n}\n</code></pre>"},{"location":"content/p2/#comentarios-en-python","title":"Comentarios en python","text":"<p>Los comentarios en Python son l\u00edneas de texto que se utilizan para describir el c\u00f3digo y ayudar a otros programadores a comprenderlo. Los comentarios no son interpretados por Python y no tienen ning\u00fan impacto en el funcionamiento del programa.</p> <p>Hay dos maneras de crear comentarios en Python:</p> <ol> <li>Usando el car\u00e1cter #:</li> </ol> <pre><code># Este es un comentario en una sola l\u00ednea\nx = 5 # Este es un comentario en la misma l\u00ednea que el c\u00f3digo\n</code></pre> <ol> <li>Usando tres comillas dobles:</li> </ol> <pre><code>\"\"\"\nEste es un comentario\nen varias l\u00edneas\n\"\"\"\n</code></pre>"},{"location":"content/p2/#la-funcion-print-de-python","title":"La funci\u00f3n print() de Python","text":"<p>La funci\u00f3n <code>print()</code> en Python es una herramienta fundamental para mostrar informaci\u00f3n en la pantalla. Es una funci\u00f3n integrada que se utiliza para imprimir cadenas de texto, variables, valores y otras expresiones.</p> <p>Sintaxis b\u00e1sica:</p> <pre><code>print(objeto)\n</code></pre> <p>Par\u00e1metros:</p> <ul> <li>objeto:\u00a0Puede ser una cadena de texto (entre comillas simples o dobles), una variable, una expresi\u00f3n, un objeto, etc.</li> </ul> <p>Ejemplos:</p> <pre><code># Imprimir una cadena de texto\nprint(\"Hola mundo!\")\n# Imprimir una variable\nnombre = \"Ana\"\nprint(nombre)\n# Imprimir una expresi\u00f3n\nsuma = 1 + 2\nprint(suma)\n# Imprimir m\u00faltiples objetos\nprint(\"El resultado es:\", suma, \"y el nombre es:\", nombre)\n</code></pre> <p>Opciones adicionales:</p> <ul> <li>Separador:\u00a0Se puede usar el argumento\u00a0<code>sep</code>\u00a0para especificar el separador entre los objetos que se imprimen. El valor por defecto es un espacio.</li> </ul> <pre><code>print(\"a\", \"b\", \"c\", sep=\", \")\n</code></pre> <p>Salida: <pre><code>a, b, c\n</code></pre></p> <ul> <li>Fin de l\u00ednea:\u00a0El argumento\u00a0<code>end</code>\u00a0define el car\u00e1cter que se imprime al final de la salida. El valor por defecto es un salto de l\u00ednea (<code>\\n</code>).</li> </ul> <pre><code>print(\"Primera l\u00ednea\", end=\" \")\nprint(\"Segunda l\u00ednea\")\n</code></pre> <p>Salida:</p> <pre><code>Primera l\u00ednea Segunda l\u00ednea\n</code></pre> <ul> <li>Formateo de cadenas f:\u00a0Python 3.6 introdujo las cadenas f, que permiten formatear cadenas de forma m\u00e1s elegante.</li> </ul> <pre><code>edad = 25\nprint(f\"Hola, me llamo {nombre} y tengo {edad} a\u00f1os.\")\n</code></pre> <p>Salida:</p> <pre><code>Hola, me llamo Ana y tengo 25 a\u00f1os.\n</code></pre>"},{"location":"content/p2/#la-funcion-input-en-python","title":"La funci\u00f3n\u00a0<code>input()</code>\u00a0en Python","text":"<p>La funci\u00f3n <code>input()</code> en Python es indispensable para interactuar con el usuario y obtener informaci\u00f3n que introduzca por teclado.</p> <p>Sintaxis:</p> <pre><code>entrada = input(prompt)\n</code></pre> <p>Par\u00e1metros:</p> <ul> <li>prompt (opcional):\u00a0Es una cadena de texto que se muestra al usuario antes de que introduzca la informaci\u00f3n. Esta cadena sirve para guiar al usuario sobre qu\u00e9 tipo de informaci\u00f3n se espera.</li> </ul> <p>Retorno:</p> <p>La funci\u00f3n <code>input()</code> siempre devuelve un string, incluso si el usuario introduce un n\u00famero. Esto significa que si necesita trabajar con la informaci\u00f3n como un n\u00famero, deber\u00e1 convertirla expl\u00edcitamente usando funciones como <code>int()</code>, <code>float()</code>, etc.</p> <p>Ejemplos:</p> <pre><code># Pedir el nombre del usuario\nnombre = input(\"\u00bfC\u00f3mo te llamas? \")\nprint(f\"Hola, {nombre}!\")\n# Solicitar dos n\u00fameros y sumarlos\nnum1 = int(input(\"Introduce el primer n\u00famero: \"))\nnum2 = int(input(\"Introduce el segundo n\u00famero: \"))\nsuma = num1 + num2\nprint(f\"La suma es: {suma}\")\n</code></pre> <p>Puntos a tener en cuenta:</p> <ul> <li> <p>La funci\u00f3n\u00a0<code>input()</code>\u00a0siempre espera que el usuario pulse la tecla\u00a0<code>Enter</code>\u00a0para finalizar la entrada.</p> </li> <li> <p>Si no se proporciona un\u00a0<code>prompt</code>, la funci\u00f3n muestra un mensaje gen\u00e9rico como\u00a0<code>Introduce un valor:</code>.</p> </li> <li> <p>Se recomienda usar el\u00a0<code>prompt</code>\u00a0para guiar al usuario y evitar confusiones.</p> </li> <li> <p>Para procesar la entrada como un tipo de dato espec\u00edfico, use funciones de conversi\u00f3n como\u00a0<code>int()</code>,\u00a0<code>float()</code>, etc.</p> </li> </ul>"},{"location":"content/p2/#estructuras-de-control-condicionales","title":"Estructuras de control condicionales","text":"<p>Los condicionales en Python permiten ejecutar c\u00f3digo solo si se cumple una determinada condici\u00f3n. Esto es muy \u00fatil para controlar el flujo de un programa y tomar decisiones basadas en diferentes situaciones.</p>"},{"location":"content/p2/#la-estructura-if","title":"La estructura if","text":"<p>La estructura if es la estructura condicional m\u00e1s b\u00e1sica en Python. Se utiliza para evaluar una condici\u00f3n y ejecutar un bloque de c\u00f3digo si la condici\u00f3n es verdadera.</p> <p>La sintaxis de la estructura if es la siguiente:</p> <pre><code>if condici\u00f3n:\n # Bloque de c\u00f3digo que se ejecuta si la condici\u00f3n es verdadera\n</code></pre> <p>Por ejemplo, el siguiente c\u00f3digo imprime el mensaje \"Eres mayor de edad\" si la variable edad es mayor o igual a 18:</p> <pre><code>edad = 18\nif edad &gt;= 18:\n print(\"Eres mayor de edad\")\n</code></pre>"},{"location":"content/p2/#la-estructura-elif","title":"La estructura elif","text":"<p>La estructura elif se utiliza para agregar condiciones adicionales a una estructura if. Se eval\u00faan secuencialmente, y el bloque de c\u00f3digo correspondiente a la primera condici\u00f3n que se cumple se ejecuta.</p> <p>La sintaxis de la estructura elif es la siguiente:</p> <pre><code>if condici\u00f3n 1:\n # Bloque de c\u00f3digo que se ejecuta si la condici\u00f3n 1 es verdadera\nelif condici\u00f3n 2:\n # Bloque de c\u00f3digo que se ejecuta si la condici\u00f3n 2 es verdadera\n</code></pre> <p>Por ejemplo, el siguiente c\u00f3digo imprime el mensaje \"Eres mayor de edad\", \"Eres adolescente\" o \"Eres menor de edad\", dependiendo de la edad del usuario:</p> <pre><code>edad = 17\nif edad &gt;= 18:\n print(\"Eres mayor de edad\")\nelif edad &gt;= 16:\n print(\"Eres adolescente\")\nelse:\n print(\"Eres menor de edad\")\n</code></pre>"},{"location":"content/p2/#la-estructura-else","title":"La estructura else","text":"<p>La estructura else se utiliza para ejecutar un bloque de c\u00f3digo si ninguna de las condiciones anteriores se cumple.</p> <p>La sintaxis de la estructura else es la siguiente:</p> <pre><code>if condici\u00f3n 1:\n # Bloque de c\u00f3digo que se ejecuta si la condici\u00f3n 1 es verdadera\nelif condici\u00f3n 2:\n # Bloque de c\u00f3digo que se ejecuta si la condici\u00f3n 2 es verdadera\nelse:\n # Bloque de c\u00f3digo que se ejecuta si ninguna de las condiciones anteriores se cumple\n</code></pre> <p>Por ejemplo, el siguiente c\u00f3digo imprime el mensaje \"Eres menor de edad\" si la variable edad no es mayor o igual a 18:</p> <pre><code>edad = 17\nif edad &gt;= 18:\n print(\"Eres mayor de edad\")\nelse:\n print(\"Eres menor de edad\")\n</code></pre>"},{"location":"content/p2/#ejemplos-de-estructuras-de-control-condicionales","title":"Ejemplos de estructuras de control condicionales","text":"<ol> <li>Comparar dos n\u00fameros</li> </ol> <pre><code>a = 10\nb = 20\nif a &gt; b:\n print(\"a es mayor que b\")\nelif a &lt; b:\n print(\"b es mayor que a\")\nelse:\n print(\"a y b son iguales\")\n</code></pre> <ol> <li>Comparar una cadena con un valor</li> </ol> <pre><code>cadena = \"Hola\"\nif cadena == \"Hola\":\n print(\"La cadena es 'Hola'\")\nelse:\n print(\"La cadena no es 'Hola'\")\n</code></pre> <ol> <li>Validar un n\u00famero</li> </ol> <pre><code>numero = input(\"Introduce un n\u00famero: \")\ntry:\n    numero = int(numero)\n    if numero &gt; 0:\n        print(\"El n\u00famero es positivo\")\n    else:\n        print(\"El n\u00famero es negativo\")\nexcept  ValueError:\n    print(\"El n\u00famero introducido no es v\u00e1lido\")\n</code></pre>"},{"location":"content/p2/#libro-recomendado-de-python","title":"Libro recomendado de Python","text":"<p>Bienvenid@ a El Libro De Python</p>"},{"location":"content/p2/#actividad-de-clase","title":"Actividad de clase","text":"<p>Ejercicios de Python para Resolver en Google Colab</p> <p>\u00a1Bienvenidos a este desaf\u00edo de programaci\u00f3n en Python!\u00a0A continuaci\u00f3n, encontrar\u00e1s 10 ejercicios que te ayudar\u00e1n a practicar lo que has aprendido sobre variables, tipos de datos, entrada y salida, y estructuras de control condicionales.</p> <p>Instrucciones:</p> <ul> <li>Abre Google Colab:\u00a0Ve a\u00a0https://colab.research.google.com</li> <li>Crea un nuevo cuaderno:\u00a0Haz clic en \"Nuevo cuaderno\".</li> <li>Resuelve los ejercicios:\u00a0Para cada ejercicio, crea una nueva celda de c\u00f3digo y escribe el c\u00f3digo Python que lo resuelva.</li> <li>Ejecuta el c\u00f3digo:\u00a0Presiona\u00a0Shift + Enter</li> </ul> <p>Ejercicio 1:</p> <p>Escribe un programa que pida al usuario su nombre y apellido, y luego los imprima juntos en un mensaje de saludo.</p> <p>Ejercicio 2:</p> <p>Crea una variable llamada\u00a0precio\u00a0con el valor 100. Calcula el precio con un descuento del 15% y muestra el precio final.</p> <p>Ejercicio 3:</p> <p>Escribe un programa que pida al usuario su edad y luego determine si es mayor o menor de edad.</p> <p>Ejercicio 4:</p> <p>Crea un programa que pida al usuario un n\u00famero y determine si es par o impar.</p> <p>Ejercicio 5:</p> <p>Escribe un programa que pida al usuario dos n\u00fameros y luego calcule su suma, resta, multiplicaci\u00f3n y divisi\u00f3n.</p> <p>Ejercicio 6:</p> <p>Crea un programa que pida al usuario su calificaci\u00f3n y luego imprima el mensaje \"Aprobado\" si la calificaci\u00f3n es mayor o igual a 70, o \"Reprobado\" si la calificaci\u00f3n es menor que 70.</p> <p>Ejercicio 7:</p> <p>Escribe un programa que pida al usuario dos n\u00fameros y luego determine cu\u00e1l es el mayor.</p> <p>Ejercicio 8:</p> <p>Crea un programa que pida al usuario su nombre y luego imprima un mensaje de bienvenida con su nombre.</p> <p>Ejercicio 9:</p> <p>Escribe un programa que pida al usuario un n\u00famero y luego imprima la tabla de multiplicar de ese n\u00famero hasta el 10.</p> <p>Ejercicio 10:</p> <p>Crea un programa que pida al usuario dos n\u00fameros y luego calcule su promedio.</p>"},{"location":"content/p3/","title":"Semana 3 - Python","text":""},{"location":"content/p3/#estructuras-de-control-bucles","title":"Estructuras de control (bucles)","text":"<p>En Python, las estructuras de control repetitivas se utilizan para ejecutar una o m\u00e1s instrucciones de manera repetitiva mientras se cumpla una condici\u00f3n determinada. Las estructuras de control repetitivas en Python son: Bucle while, Bucle for</p>"},{"location":"content/p3/#bucle-while","title":"Bucle while","text":"<p>Bucle while: El bucle while se utiliza para ejecutar un conjunto de instrucciones mientras se cumpla una determinada condici\u00f3n. La sintaxis del bucle while en Python es la siguiente:</p> <pre><code>while condici\u00f3n:\n    # bloque de instrucciones a ejecutar mientras la condici\u00f3n sea verdadera\n</code></pre>"},{"location":"content/p3/#formas-de-usar-el-bucle-for-en-python","title":"Formas de usar el bucle for en Python:","text":""},{"location":"content/p3/#bucle-while-basico","title":"Bucle while b\u00e1sico","text":"<pre><code>contador = 0\nwhile contador &lt; 5:\n    print(contador)\n    contador += 1\n</code></pre>"},{"location":"content/p3/#while-infinito","title":"While infinito","text":"<pre><code>while True:\n    pass\n</code></pre>"},{"location":"content/p3/#romper-el-bucle","title":"Romper el bucle","text":"<pre><code>contador = 0\nwhile contador &lt; 5:\n    print(contador)\n    if contador == 2:\n        break\n    contador += 1\n</code></pre>"},{"location":"content/p3/#continuar-la-iteracion","title":"Continuar la iteraci\u00f3n","text":"<pre><code>contador = 0\nwhile contador &lt; 5:\n    contador += 1\n    if contador == 2:\n        continue\n    print(contador)\n</code></pre>"},{"location":"content/p3/#while-con-else","title":"While con else","text":"<pre><code>contador = 0\nwhile contador &lt; 5:\n    print(contador)\n    contador += 1\nelse:\n    print(\"Fin del bucle while\")\n</code></pre>"},{"location":"content/p3/#while-anidado","title":"While anidado","text":"<pre><code>contador1 = 2\nwhile contador1 &lt; 5:\n    contador2 = 0\n    while contador2 &lt; 5:\n        print(contador1, contador2)\n        contador2 += 1\n    contador1 += 1\n</code></pre>"},{"location":"content/p3/#ejercicios-resueltos-bucle-while","title":"Ejercicios resueltos bucle while","text":"<ol> <li>Pedir al usuario que adivine un n\u00famero secreto. El usuario tendr\u00e1 un n\u00famero limitado de intentos para adivinar el n\u00famero. Si no lo adivina en ese n\u00famero de intentos, el programa le dir\u00e1 que perdi\u00f3.</li> </ol> <pre><code>import random\n\nnumero_secreto = random.randint(1, 20)\nintentos = 0\nmax_intentos = 5\nadivinado = False\n\nprint(\"Estoy pensando en un n\u00famero entre 1 y 20.\")\nwhile intentos &lt; max_intentos and not adivinado:\n    intento = int(input(\"Intenta adivinar el n\u00famero: \"))\n    intentos += 1\n    if intento == numero_secreto:\n        print(\"\u00a1Correcto! Adivinaste el n\u00famero en\", intentos, \"intentos.\")\n        adivinado = True\n    elif intento &lt; numero_secreto:\n        print(\"El n\u00famero es mayor que\", intento)\n    else:\n        print(\"El n\u00famero es menor que\", intento)\n\nif not adivinado:\n    print(\"Lo siento, no adivinaste el n\u00famero en el n\u00famero m\u00e1ximo de intentos.\")\n    print(\"El n\u00famero secreto era\", numero_secreto)\n</code></pre> <ol> <li>Pedir al usuario que ingrese una cadena y contar la cantidad de letras que contiene.</li> </ol> <pre><code>cadena = input(\"Ingresa una cadena: \")\ni = 0\ncontador = 0\nwhile i &lt; len(cadena):\n    if cadena[i].isalpha():\n        contador += 1\n    i += 1\nprint(\"La cadena tiene\", contador, \"letras.\")\n</code></pre> <ol> <li>Pedir al usuario que ingrese un n\u00famero entero positivo y mostrar su tabla de multiplicar.</li> </ol> <pre><code>numero = int(input(\"Ingresa un n\u00famero entero positivo: \"))\ni = 1\nwhile i &lt;= 10:\n    print(numero, \"x\", i, \"=\", numero*i)\n    i += 1\n</code></pre> <ol> <li>Pedir al usuario que ingrese una lista de n\u00fameros y calcular su promedio.</li> </ol> <pre><code>lista = input(\"Ingresa una lista de n\u00fameros separados por comas: \")\nlista = lista.split(\",\")\ni = 0\nsuma = 0\nwhile i &lt; len(lista):\n    suma += int(lista[i])\n    i += 1\n\npromedio = suma / len(lista)\nprint(\"El promedio de la lista es\", promedio)\n</code></pre>"},{"location":"content/p3/#bucle-for","title":"Bucle for","text":"<p>El bucle for se utiliza para recorrer una secuencia de elementos, como una lista o una cadena, y ejecutar un conjunto de instrucciones para cada elemento. La sintaxis del bucle for en Python es la siguiente:</p> <pre><code>for variable in secuencia:\n    # bloque de instrucciones a ejecutar para cada elemento de la secuencia\n</code></pre>"},{"location":"content/p3/#formas-de-usar-el-bucle-for-en-python_1","title":"Formas de usar el bucle for en Python:","text":""},{"location":"content/p3/#bucle-for-basico","title":"Bucle for b\u00e1sico","text":"<pre><code>for i in range(1, 6):\n    print(i)\n</code></pre>"},{"location":"content/p3/#recorrer-una-lista","title":"Recorrer una lista","text":"<pre><code>frutas = ['manzana', 'banana', 'zanahoria']\nfor fruta in frutas:\n    print(fruta)\n</code></pre>"},{"location":"content/p3/#iterar-sobre-una-cadena","title":"Iterar sobre una cadena","text":"<pre><code>for letra in \"Hola\":\n    print(letra)\n</code></pre>"},{"location":"content/p3/#iterar-en-pasos","title":"Iterar en pasos","text":"<pre><code>for i in range(0, 10, 2):\n    print(i)\n</code></pre>"},{"location":"content/p3/#iterar-sobre-diccionarios","title":"Iterar sobre diccionarios","text":"<pre><code>dicc = {'a': 1, 'b': 2, 'c': 3}\nfor llave in dicc:\n    print(llave)\n\nfor llave in dicc.keys():\n    print(llave)\n\nfor valor in dicc.values():\n    print(valor)\n\nfor llave, valor in dicc.items():\n    print(llave, valor)\n</code></pre>"},{"location":"content/p3/#rango-personalizado","title":"Rango personalizado","text":"<pre><code>import random\n\nmi_lista = [random.randint(1, 10) for i in range(10)]\nfor i in mi_lista:\n    print(i)\n</code></pre>"},{"location":"content/p3/#break","title":"Break","text":"<pre><code>for i in range(1, 11):\n    if i == 5:\n        break\n    print(i)\n</code></pre>"},{"location":"content/p3/#continue","title":"Continue","text":"<pre><code>for i in range(1, 11):\n    if i % 2 == 0:\n        continue\n    print(i)\n</code></pre>"},{"location":"content/p3/#ejercicios-resueltos-bucle-for","title":"Ejercicios resueltos bucle for","text":"<ol> <li>Pedir al usuario que ingrese una palabra y mostrarla en orden inverso.</li> </ol> <pre><code>palabra = input(\"Ingresa una palabra: \")\ninverso = \"\"\nfor letra in palabra:\n    inverso = letra + inverso\nprint(\"La palabra en orden inverso es:\", inverso)\n</code></pre> <ol> <li>Pedir al usuario que ingrese una cadena de texto y mostrar solamente las letras may\u00fasculas utilizando un ciclo for.</li> </ol> <pre><code>cadena = input(\"Ingresa una cadena de texto: \")\nfor letra in cadena:\n    if letra.isupper():\n        print(letra)\n</code></pre> <ol> <li>Pedir al usuario que ingrese una cadena de texto y contar cu\u00e1ntas palabras tiene utilizando un ciclo for</li> </ol> <pre><code>cadena = input(\"Ingresa una cadena de texto: \")\npalabras = cadena.split()\ncontador = 0\nfor palabra in palabras:\n    contador += 1\nprint(\"La cadena de texto ingresada tiene\", contador, \"palabras.\")\n</code></pre> <ol> <li>Imprime los m\u00faltiplos de 7 entre 0 y 100:</li> </ol> <pre><code>for i in range(0,101):\n    if i % 7 == 0:\n        print(i)\n</code></pre>"},{"location":"content/p3/#estructuras-de-datos-colecciones-en-python","title":"Estructuras de datos - Colecciones en Python","text":"<p>En Python, una colecci\u00f3n es una estructura de datos que puede almacenar varios elementos. Hay varios tipos de colecciones en Python, cada una con diferentes propiedades y usos.</p> <p>Aqu\u00ed hay una breve descripci\u00f3n de las principales colecciones en Python:</p> <ul> <li>Listas: son colecciones ordenadas y modificables que pueden contener elementos de diferentes tipos de datos.</li> <li>Tuplas: son colecciones ordenadas e inmutables que pueden contener elementos de diferentes tipos de datos.</li> <li>Conjuntos: son colecciones no ordenadas y no indexadas que no permiten elementos duplicados.</li> <li>Diccionarios: son colecciones no ordenadas pero modificables que consisten en pares clave-valor. Aqu\u00ed hay algunos ejemplos de c\u00f3mo crear e interactuar con estas colecciones:</li> </ul> <pre><code># Creamos una lista con algunos elementos\nmy_list = [1, 2, 3, 'cuatro', 'cinco']\n\n# Accedemos a un elemento de la lista\nprint(my_list[0])  # Salida: 1\n\n# Creamos una tupla con algunos elementos\nmy_tuple = (1, 2, 3, 'cuatro', 'cinco')\n\n# Accedemos a un elemento de la tupla\nprint(my_tuple[0])  # Salida: 1\n\n# Creamos un conjunto con algunos elementos\nmy_set = {1, 2, 3, 4, 5}\n\n# Accedemos a un elemento del conjunto (no es posible porque los conjuntos no tienen \u00edndices)\n# En cambio, podemos verificar si un elemento est\u00e1 en el conjunto\nprint(3 in my_set)  # Salida: True\n\n# Creamos un diccionario con algunas claves y valores\nmy_dict = {'nombre': 'Juan', 'edad': 30, 'ciudad': 'Buenos Aires'}\n\n# Accedemos a un valor del diccionario mediante su clave\nprint(my_dict['nombre'])  # Salida: Juan\n</code></pre>"},{"location":"content/p3/#listas","title":"Listas","text":"<p>En Python, una lista es una colecci\u00f3n ordenada y modificable de elementos. Las listas pueden contener elementos de diferentes tipos de datos, como n\u00fameros, cadenas, booleanos, entre otros. Las listas en Python son muy \u00fatiles para almacenar y manipular grandes cantidades de datos.</p> <p>Aqu\u00ed hay un ejemplo de c\u00f3mo crear y utilizar una lista en Python, que incluye algunas de las caracter\u00edsticas y m\u00e9todos m\u00e1s comunes de las listas:</p> <p><pre><code># Creamos una lista con algunos elementos\nmy_list = [1, 2, 3, 'cuatro', 'cinco', 6.7, True]\n\n# Accedemos a un elemento de la lista\nprint(my_list[0])  # Salida: 1\n\n# Podemos utilizar \u00edndices negativos para acceder a los elementos desde el final de la lista\nprint(my_list[-1])  # Salida: True\n\n# Podemos reemplazar un elemento de la lista asignando un nuevo valor a su \u00edndice\nmy_list[2] = 'tres'\nprint(my_list)  # Salida: [1, 2, 'tres', 'cuatro', 'cinco', 6.7, True]\n\n# Podemos agregar un nuevo elemento al final de la lista con el m\u00e9todo append()\nmy_list.append('seis')\nprint(my_list)  # Salida: [1, 2, 'tres', 'cuatro', 'cinco', 6.7, True, 'seis']\n\n# Podemos insertar un nuevo elemento en una posici\u00f3n espec\u00edfica de la lista con el m\u00e9todo insert()\nmy_list.insert(4, '4.5')\nprint(my_list)  # Salida: [1, 2, 'tres', 'cuatro', '4.5', 'cinco', 6.7, True, 'seis']\n\n# Podemos eliminar un elemento de la lista con el m\u00e9todo remove()\nmy_list.remove('tres')\nprint(my_list)  # Salida: [1, 2, 'cuatro', '4.5', 'cinco', 6.7, True, 'seis']\n\n# Podemos ordenar los elementos de la lista con el m\u00e9todo sort()\nmy_list.sort()\nprint(my_list)  # Salida: [1, True, 2, 4.5, 6.7, 'cinco', 'cuatro', 'seis']\n\n# Podemos contar la cantidad de veces que aparece un elemento en la lista con el m\u00e9todo count()\nprint(my_list.count(1))  # Salida: 1\n\n# Podemos encontrar el \u00edndice de un elemento en la lista con el m\u00e9todo index()\nprint(my_list.index('cuatro'))  # Salida: 6\n\n# Podemos eliminar el \u00faltimo elemento de la lista con el m\u00e9todo pop()\nmy_list.pop()\nprint(my_list)  # Salida: [1, True, 2, 4.5, 6.7, 'cinco', 'cuatro']\n\n# Podemos obtener la longitud de la lista con la funci\u00f3n len()\nprint(len(my_list))  # Salida: 7\n</code></pre> Estos son solo algunos de los m\u00e9todos y caracter\u00edsticas m\u00e1s comunes de las listas en Python. Hay muchos m\u00e1s que puedes explorar en la documentaci\u00f3n oficial de Python.</p> <p>https://docs.python.org/es/3/tutorial/datastructures.html#</p>"},{"location":"content/p3/#metodos-de-las-listas","title":"M\u00e9todos de las listas","text":"<ul> <li>append() - Agrega un elemento al final de la lista.</li> <li>extend() - Agrega los elementos de otra lista al final de la lista actual.</li> <li>insert() - Inserta un elemento en una posici\u00f3n espec\u00edfica de la lista.</li> <li>pop() - Elimina un elemento del final de la lista y lo devuelve.</li> <li>remove() - Elimina el primer elemento de la lista que coincide con el argumento dado.</li> <li>count() - Cuenta el n\u00famero de veces que aparece un elemento en la lista.</li> <li>index() - Devuelve el \u00edndice de la primera aparici\u00f3n de un elemento en la lista.</li> <li>sort() - Ordena los elementos de la lista en orden ascendente.</li> <li>reverse() - Ordena los elementos de la lista en orden descendente.</li> <li>clear() - Elimina todos los elementos de la lista.</li> </ul>"},{"location":"content/p3/#ejercicios-de-listas","title":"Ejercicios de listas","text":"<ol> <li>Dada una lista de n\u00fameros enteros, escribe una funci\u00f3n que devuelva una nueva lista con los n\u00fameros pares de la lista original.</li> </ol> <p><pre><code>def numeros_pares(lista):\n    pares = []\n    for num in lista:\n        if num % 2 == 0:\n            pares.append(num)\n    return pares\n\nnumeros = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(numeros_pares(numeros))  # Salida: [2, 4, 6, 8]\n</code></pre> 2. Dada una lista de palabras, escribe una funci\u00f3n que devuelva una nueva lista con las palabras que tienen m\u00e1s de 5 letras.</p> <p><pre><code>def palabras_largas(lista):\n    largas = []\n    for palabra in lista:\n        if len(palabra) &gt; 5:\n            largas.append(palabra)\n    return largas\n\npalabras = ['manzana', 'banana', 'naranja', 'pera', 'sand\u00eda', 'kiwi']\nprint(palabras_largas(palabras))  # Salida: ['manzana', 'banana', 'naranja', 'sand\u00eda']\n</code></pre> Hay muchos m\u00e1s que puedes explorar en la documentaci\u00f3n oficial de Python.</p> <p>https://docs.python.org/es/3/tutorial/datastructures.html#more-on-lists</p>"},{"location":"content/p3/#tuplas","title":"Tuplas","text":"<p>En Python, una tupla es una colecci\u00f3n ordenada e inmutable de elementos que pueden ser de diferentes tipos de datos. La principal diferencia entre las tuplas y las listas es que las tuplas no se pueden modificar una vez creadas, mientras que las listas pueden ser modificadas.</p> <p>Aqu\u00ed hay un ejemplo de c\u00f3mo crear y usar una tupla en Python:</p> <p><pre><code># Creamos una tupla con algunos elementos\nmi_tupla = (1, 2, 'tres', True)\n\n# Accedemos a un elemento de la tupla\nprint(mi_tupla[0])  # Salida: 1\n\n# Intentamos modificar un elemento de la tupla (esto dar\u00e1 un error porque las tuplas son inmutables)\n# mi_tupla[0] = 5  # TypeError: 'tuple' object does not support item assignment\n\n# Convertimos la tupla en una lista para poder modificarla\nmi_lista = list(mi_tupla)\n\n# Modificamos un elemento de la lista\nmi_lista[0] = 5\n\n# Convertimos la lista de nuevo en una tupla\nmi_tupla = tuple(mi_lista)\n\n# Accedemos a un elemento de la tupla modificado\nprint(mi_tupla[0])  # Salida: 5\n\n# Contamos cu\u00e1ntas veces aparece un elemento en la tupla\nprint(mi_tupla.count(2))  # Salida: 1\n\n# Encontramos el \u00edndice de la primera aparici\u00f3n de un elemento en la tupla\nprint(mi_tupla.index('tres'))  # Salida: 2\n</code></pre> En este ejemplo, creamos una tupla mi_tupla con cuatro elementos, y luego intentamos modificar un elemento de la tupla, lo cual da un error porque las tuplas son inmutables. En cambio, convertimos la tupla en una lista, modificamos un elemento de la lista, y luego convertimos la lista de nuevo en una tupla. Luego, utilizamos los m\u00e9todos count e index para contar cu\u00e1ntas veces aparece un elemento en la tupla y encontrar el \u00edndice de la primera aparici\u00f3n de un elemento en la tupla, respectivamente. Es importante tener en cuenta que las tuplas son \u00fatiles cuando se desea tener una colecci\u00f3n ordenada e inmutable de elementos. Si se desea modificar los elementos de la colecci\u00f3n, es mejor utilizar una lista en su lugar.</p>"},{"location":"content/p3/#metodos-de-las-tuplas","title":"M\u00e9todos de las tuplas","text":"<ul> <li>count() - Cuenta el n\u00famero de veces que un elemento aparece en la tupla.</li> <li>index() - Devuelve el \u00edndice de la primera aparici\u00f3n de un elemento en la tupla.</li> <li>len() - Devuelve la longitud de la tupla.</li> <li>min() - Devuelve el elemento m\u00e1s peque\u00f1o en la tupla.</li> <li>max() - Devuelve el elemento m\u00e1s grande en la tupla.</li> <li>sorted() - Ordena los elementos de la tupla en orden ascendente.</li> <li>sum() - Suma los elementos de la tupla.</li> </ul>"},{"location":"content/p3/#ejercicios-de-tuplas","title":"Ejercicios de tuplas","text":"<ol> <li>Dadas dos tuplas de n\u00fameros enteros del mismo tama\u00f1o, escribe una funci\u00f3n que devuelva una nueva tupla con la suma de cada par de n\u00fameros correspondientes en las dos tuplas.</li> </ol> <p><pre><code>def suma_tuplas(tupla1, tupla2):\n    suma = ()\n    for i in range(len(tupla1)):\n        suma += (tupla1[i] + tupla2[i],)\n    return suma\n\ntupla1 = (1, 2, 3)\ntupla2 = (4, 5, 6)\nprint(suma_tuplas(tupla1, tupla2))  # Salida: (5, 7, 9)\n</code></pre> 2. Dada una tupla de cadenas de texto, escribe una funci\u00f3n que devuelva una nueva tupla con las cadenas de texto que tienen m\u00e1s de 5 caracteres.</p> <p><pre><code>def tupla_palabras_largas(tupla):\n    largas = ()\n    for palabra in tupla:\n        if len(palabra) &gt; 5:\n            largas += (palabra,)\n    return largas\n\ntupla = ('manzana', 'banana', 'naranja', 'pera', 'sand\u00eda', 'kiwi')\nprint(tupla_palabras_largas(tupla)) \n</code></pre> Hay muchos m\u00e1s que puedes explorar en la documentaci\u00f3n oficial de Python.</p> <p>https://docs.python.org/es/3/tutorial/datastructures.html#tuples-and-sequences</p>"},{"location":"content/p3/#conjuntos","title":"Conjuntos","text":"<p>Los conjuntos de datos en Python son una colecci\u00f3n no ordenada y no indexada de elementos \u00fanicos e inmutables. Es decir, los conjuntos no pueden contener elementos duplicados y sus elementos no se pueden modificar despu\u00e9s de haber sido agregados al conjunto. Los conjuntos son muy \u00fatiles para realizar operaciones matem\u00e1ticas como uni\u00f3n, intersecci\u00f3n y diferencia de conjuntos.</p> <p>Aqu\u00ed hay un ejemplo de c\u00f3mo utilizar conjuntos en Python, utilizando algunos de sus m\u00e9todos y caracter\u00edsticas:</p> <p><pre><code># Creamos un conjunto con algunos elementos\nmy_set = {1, 2, 3, 4, 5}\n\n# Agregamos un elemento al conjunto\nmy_set.add(6)\n\n# Eliminamos un elemento del conjunto\nmy_set.remove(2)\n\n# Verificamos si un elemento est\u00e1 en el conjunto\nprint(3 in my_set)  # Salida: True\n\n# Creamos otro conjunto con algunos elementos\nother_set = {4, 5, 6, 7}\n\n# Realizamos la uni\u00f3n de dos conjuntos\nunion_set = my_set.union(other_set)\nprint(union_set)  # Salida: {1, 3, 4, 5, 6, 7}\n\n# Realizamos la intersecci\u00f3n de dos conjuntos\nintersection_set = my_set.intersection(other_set)\nprint(intersection_set)  # Salida: {4, 5, 6}\n\n# Realizamos la diferencia de dos conjuntos\ndifference_set = my_set.difference(other_set)\nprint(difference_set)  # Salida: {1, 3}\n\n# Vaciamos el conjunto\nmy_set.clear()\nprint(my_set)  # Salida: set()\n</code></pre> Como se puede ver en el ejemplo anterior, los conjuntos de datos en Python ofrecen una serie de m\u00e9todos \u00fatiles para trabajar con elementos \u00fanicos e inmutables. Algunos de los m\u00e9todos comunes de los conjuntos incluyen add(), remove(), union(), intersection(), difference() y clear().</p>"},{"location":"content/p3/#metodos-de-los-conjuntos","title":"M\u00e9todos de los conjuntos","text":"<ul> <li>add() - Agrega un elemento al conjunto.</li> <li>update() - Agrega los elementos de otro conjunto al conjunto actual.</li> <li>remove() - Elimina un elemento del conjunto.</li> <li>discard() - Elimina un elemento del conjunto si est\u00e1 presente.</li> <li>pop() - Elimina un elemento aleatorio del conjunto.</li> <li>clear() - Elimina todos los elementos del conjunto.</li> <li>isdisjoint() - Comprueba si dos conjuntos son disjuntos.</li> <li>issubset() - Comprueba si un conjunto es subconjunto de otro conjunto.</li> <li>issuperset() - Comprueba si un conjunto es superconjunto de otro conjunto.</li> <li>union() - Devuelve la uni\u00f3n de dos conjuntos.</li> <li>intersection() - Devuelve la intersecci\u00f3n de dos conjuntos.</li> <li>difference() - Devuelve la diferencia de dos conjuntos.</li> <li>symmetric_difference() - Devuelve la diferencia sim\u00e9trica de dos conjuntos.</li> </ul>"},{"location":"content/p3/#ejercicios-de-conjuntos","title":"Ejercicios de conjuntos","text":"<ol> <li>Dadas dos listas de n\u00fameros enteros, escribe una funci\u00f3n que devuelva un conjunto con los n\u00fameros que aparecen en ambas listas.</li> </ol> <p><pre><code>def numeros_comunes(lista1, lista2):\n    set1 = set(lista1)\n    set2 = set(lista2)\n    comunes = set1.intersection(set2)\n    return comunes\n\nlista1 = [1, 2, 3, 4, 5]\nlista2 = [4, 5, 6, 7, 8]\nprint(numeros_comunes(lista1, lista2))  # Salida: {4, 5}\n</code></pre> 2. Dada una lista de n\u00fameros enteros, escribe una funci\u00f3n que devuelva un conjunto con los n\u00fameros \u00fanicos en la lista.</p> <p><pre><code>def numeros_unicos(lista):\n    unicos = set(lista)\n    return unicos\n\nlista = [1, 2, 3, 3, 4, 4, 5, 5, 5]\nprint(numeros_unicos(lista))  # Salida: {1, 2, 3, 4, 5}\n</code></pre> Hay muchos m\u00e1s que puedes explorar en la documentaci\u00f3n oficial de Python.</p> <p>https://docs.python.org/es/3/tutorial/datastructures.html#sets</p>"},{"location":"content/p3/#diccionarios","title":"Diccionarios","text":"<p>Los diccionarios en Python son una estructura de datos que nos permiten almacenar informaci\u00f3n en forma de pares de clave-valor. Cada clave es \u00fanica y se utiliza para acceder a su valor correspondiente. Los diccionarios son mutables, lo que significa que podemos agregar, eliminar y actualizar elementos en ellos.</p> <p>Aqu\u00ed hay un ejemplo de c\u00f3mo crear y utilizar un diccionario en Python, con algunas de sus caracter\u00edsticas y m\u00e9todos:</p> <pre><code># Creamos un diccionario con algunos datos\npersona = {'nombre': 'Mar\u00eda', 'edad': 25, 'ciudad': 'Madrid'}\n\n# Accedemos a un valor del diccionario mediante su clave\nprint(persona['edad'])  # Salida: 25\n\n# Agregamos una nueva clave-valor al diccionario\npersona['profesion'] = 'Programadora'\nprint(persona)  # Salida: {'nombre': 'Mar\u00eda', 'edad': 25, 'ciudad': 'Madrid', 'profesion': 'Programadora'}\n\n# Eliminamos una clave-valor del diccionario\ndel persona['ciudad']\nprint(persona)  # Salida: {'nombre': 'Mar\u00eda', 'edad': 25, 'profesion': 'Programadora'}\n\n# Verificamos si una clave est\u00e1 en el diccionario\nprint('nombre' in persona)  # Salida: True\n\n# Obtenemos todas las claves del diccionario\nprint(persona.keys())  # Salida: dict_keys(['nombre', 'edad', 'profesion'])\n\n# Obtenemos todos los valores del diccionario\nprint(persona.values())  # Salida: dict_values(['Mar\u00eda', 25, 'Programadora'])\n\n# Obtenemos todos los pares clave-valor del diccionario\nprint(persona.items())  # Salida: dict_items([('nombre', 'Mar\u00eda'), ('edad', 25), ('profesion', 'Programadora')])\n</code></pre> <p>En este ejemplo, creamos un diccionario llamado persona con tres claves (nombre, edad y ciudad) y sus respectivos valores. Luego, accedimos al valor de la clave edad utilizando la sintaxis de indexaci\u00f3n de diccionario (persona['edad']).</p> <p>A continuaci\u00f3n, agregamos una nueva clave-valor al diccionario utilizando la sintaxis de asignaci\u00f3n de diccionario (persona['profesion'] = 'Programadora'). Tambi\u00e9n eliminamos la clave-valor ciudad utilizando el operador del.</p> <p>Luego, utilizamos algunos m\u00e9todos de diccionario para verificar si una clave est\u00e1 en el diccionario ('nombre' in persona), obtener todas las claves del diccionario (persona.keys()), todos los valores del diccionario (persona.values()) y todos los pares clave-valor del diccionario (persona.items()).</p> <p>Es importante tener en cuenta que los diccionarios en Python son muy \u00fatiles y vers\u00e1tiles, y que hay muchas formas diferentes de utilizarlos. Se recomienda leer la documentaci\u00f3n de Python para obtener m\u00e1s informaci\u00f3n sobre c\u00f3mo utilizar los diccionarios y sus m\u00e9todos.</p>"},{"location":"content/p3/#metodos-de-los-diccionarios","title":"M\u00e9todos de los diccionarios","text":"<ul> <li>get() - Obtiene el valor asociado con la clave dada.</li> <li>setdefault() - Asigna el valor dado a la clave dada, si la clave no existe.</li> <li>pop() - Elimina la clave y su valor asociado.</li> <li>popitem() - Elimina cualquier clave y su valor asociado del diccionario.</li> <li>update() - Actualiza el diccionario con los valores de otro diccionario.</li> <li>keys() - Devuelve una lista de las claves del diccionario.</li> <li>values() - Devuelve una lista de los valores del diccionario.</li> <li>items() - Devuelve una lista de tuplas, donde cada tupla contiene una clave y su valor asociado.</li> <li>len() - Devuelve el n\u00famero de elementos en el diccionario.</li> <li>clear() - Elimina todos los elementos del diccionario.</li> </ul>"},{"location":"content/p3/#ejercicios-de-diccionarios","title":"Ejercicios de diccionarios","text":"<ol> <li>Dado un diccionario que contiene nombres de personas y sus edades, escribe una funci\u00f3n que devuelva el nombre de la persona m\u00e1s joven.</li> </ol> <p><pre><code>def persona_mas_joven(diccionario):\n    edad_min = float('inf')\n    nombre = ''\n    for clave, valor in diccionario.items():\n        if valor &lt; edad_min:\n            edad_min = valor\n            nombre = clave\n    return nombre\n\nedades = {'Juan': 25, 'Mar\u00eda': 30, 'Pedro': 20, 'Ana': 28}\nprint(persona_mas_joven(edades))  # Salida: 'Pedro'\n</code></pre> 2. Dada una lista de diccionarios que contienen informaci\u00f3n de productos, escribe una funci\u00f3n que calcule el precio total de la lista.</p> <pre><code>def precio_total(productos):\n    total = 0\n    for producto in productos:\n        total += producto['precio'] * producto['cantidad']\n    return total\n\nproductos = [\n    {'nombre': 'Camisa', 'precio': 50, 'cantidad': 2},\n    {'nombre': 'Pantal\u00f3n', 'precio': 80, 'cantidad': 1},\n    {'nombre': 'Zapatillas', 'precio': 120, 'cantidad': 1}\n]\nprint(precio_total(productos))  # Salida: 300\n</code></pre>"},{"location":"content/p3/#tecnicas-para-iterar-sobre-los-elementos-de-un-diccionario","title":"T\u00e9cnicas para iterar sobre los elementos de un diccionario.","text":"<ol> <li>Iterar sobre las claves del diccionario:</li> </ol> <p><pre><code>diccionario = {\"a\": 1, \"b\": 2, \"c\": 3}\n\nfor clave in diccionario:\n    print(clave)\n</code></pre> Este c\u00f3digo imprimir\u00e1 las claves 'a', 'b' y 'c'.</p> <ol> <li>Iterar sobre los valores del diccionario:</li> </ol> <p><pre><code>diccionario = {\"a\": 1, \"b\": 2, \"c\": 3}\n\nfor valor in diccionario.values():\n    print(valor)\n</code></pre> Este c\u00f3digo imprimir\u00e1 los valores 1, 2 y 3.</p> <ol> <li>Iterar sobre las tuplas (clave, valor) del diccionario:</li> </ol> <p><pre><code>diccionario = {\"a\": 1, \"b\": 2, \"c\": 3}\n\nfor clave, valor in diccionario.items():\n    print(clave, valor)\n</code></pre> Este c\u00f3digo imprimir\u00e1 las tuplas ('a', 1), ('b', 2) y ('c', 3).</p> <ol> <li>Usar una comprensi\u00f3n de diccionario:</li> </ol> <p><pre><code>diccionario = {\"a\": 1, \"b\": 2, \"c\": 3}\n\nnuevo_diccionario = {clave: valor ** 2 for clave, valor in diccionario.items()}\n</code></pre> Este c\u00f3digo crear\u00e1 un nuevo diccionario con las mismas claves que el original y los valores elevados al cuadrado.</p> <p>Es importante tener en cuenta que los diccionarios en Python no est\u00e1n ordenados, por lo que el orden de las claves, valores y tuplas (clave, valor) puede variar de una ejecuci\u00f3n a otra.</p> <p>Hay muchos m\u00e1s que puedes explorar en la documentaci\u00f3n oficial de Python.</p> <p>https://docs.python.org/es/3/tutorial/datastructures.html#dictionaries</p>"},{"location":"content/p3/#funciones","title":"Funciones","text":"<p>En Python, una funci\u00f3n es un bloque de c\u00f3digo reutilizable que realiza una tarea espec\u00edfica cuando se llama. Las funciones son una parte fundamental de la programaci\u00f3n en Python y son utilizadas para modular y organizar el c\u00f3digo en tareas m\u00e1s peque\u00f1as y manejables. Aqu\u00ed tienes una explicaci\u00f3n detallada de las funciones en Python:</p>"},{"location":"content/p3/#definicion-de-una-funcion","title":"Definici\u00f3n de una funci\u00f3n","text":"<p>Para definir una funci\u00f3n en Python, puedes usar la palabra clave def, seguida del nombre de la funci\u00f3n y los par\u00e1metros entre par\u00e9ntesis. Luego, un bloque de c\u00f3digo indentado define lo que hace la funci\u00f3n. Aqu\u00ed tienes un ejemplo simple:</p> <pre><code>def saludar(nombre):\n    print(\"Hola,\", nombre)\n</code></pre>"},{"location":"content/p3/#llamando-a-una-funcion","title":"Llamando a una funci\u00f3n","text":"<p>Para ejecutar o \"llamar\" una funci\u00f3n, simplemente escribes su nombre seguido de par\u00e9ntesis que pueden contener los argumentos necesarios. Por ejemplo:</p> <pre><code>saludar(\"Juan\")\n</code></pre> <p>Esto imprimir\u00e1 \"Hola, Juan\" en la pantalla.</p>"},{"location":"content/p3/#parametros","title":"Par\u00e1metros","text":"<p>Los par\u00e1metros son valores que se pasan a una funci\u00f3n cuando se llama. Los par\u00e1metros se utilizan para que una funci\u00f3n pueda aceptar datos de entrada y trabajar con ellos. En el ejemplo anterior, \"nombre\" es un par\u00e1metro de la funci\u00f3n \"saludar\".</p>"},{"location":"content/p3/#valor-de-retorno","title":"Valor de retorno","text":"<p>Una funci\u00f3n puede devolver un valor utilizando la palabra clave return. Esto es \u00fatil cuando quieres que una funci\u00f3n realice un c\u00e1lculo y devuelva el resultado. Por ejemplo:</p> <pre><code>def suma(a, b):\n    resultado = a + b\n    return resultado\n</code></pre> <p>Puedes llamar a esta funci\u00f3n y almacenar el valor de retorno en una variable:</p> <pre><code>resultado_suma = suma(3, 5)\n</code></pre> <p>En este caso, resultado_suma contendr\u00eda el valor 8.</p>"},{"location":"content/p3/#documentacion-de-funciones","title":"Documentaci\u00f3n de funciones","text":"<p>Es una buena pr\u00e1ctica incluir documentaci\u00f3n en tus funciones para explicar qu\u00e9 hace la funci\u00f3n, qu\u00e9 par\u00e1metros espera y qu\u00e9 valor devuelve. Puedes usar comentarios de cadena de documentaci\u00f3n (docstrings) para esto:</p> <pre><code>def suma(a, b):\n    \"\"\"\n    Esta funci\u00f3n suma dos n\u00fameros y devuelve el resultado.\n    :param a: El primer n\u00famero a sumar.\n    :param b: El segundo n\u00famero a sumar.\n    :return: La suma de a y b.\n    \"\"\"\n    resultado = a + b\n    return resultado\n</code></pre> <p>Puedes acceder a esta documentaci\u00f3n utilizando la funci\u00f3n help en Python.</p>"},{"location":"content/p3/#funciones-sin-retorno","title":"Funciones sin retorno","text":"<p>No todas las funciones necesitan devolver un valor. Algunas funciones simplemente realizan una tarea sin necesidad de un valor de retorno. En ese caso, la funci\u00f3n puede no tener una instrucci\u00f3n return o puede tener return sin un valor despu\u00e9s de \u00e9l.</p> <pre><code>def saludar(nombre):\n    print(\"Hola,\", nombre)\n</code></pre>"},{"location":"content/p3/#ambito-de-las-variables","title":"\u00c1mbito de las variables","text":"<p>Las variables definidas dentro de una funci\u00f3n tienen un alcance local, lo significa que solo est\u00e1n disponibles dentro de esa funci\u00f3n. Las variables definidas fuera de una funci\u00f3n tienen un alcance global y se pueden acceder desde cualquier parte del programa.</p> <pre><code>x = 10\n\ndef imprimir_x():\n    x = 5  # Esta variable x es local a la funci\u00f3n\n    print(\"x dentro de la funci\u00f3n:\", x)\n\nimprimir_x()\nprint(\"x fuera de la funci\u00f3n:\", x)\n</code></pre> <p>Esto imprimir\u00e1 \"x dentro de la funci\u00f3n: 5\" y \"x fuera de la funci\u00f3n: 10\".</p>"},{"location":"content/p3/#variables-globales","title":"Variables Globales","text":"<p>Las variables globales en Python son variables declaradas fuera de cualquier funci\u00f3n, permitiendo que sean accesibles desde cualquier parte del c\u00f3digo.  Aqu\u00ed una explicaci\u00f3n detallada:</p>"},{"location":"content/p3/#1-por-que-utilizar-variables-globales","title":"1. \u00bfPor qu\u00e9 utilizar variables globales?","text":"<ul> <li>Acceso universal:  Las variables globales son visibles y modificables desde cualquier funci\u00f3n dentro del script. </li> <li>Almacenamiento de informaci\u00f3n compartida:  Son \u00fatiles para compartir datos entre diferentes partes del c\u00f3digo.</li> <li>Configuraci\u00f3n global:  Se pueden usar para establecer valores predeterminados o constantes que se utilizan a lo largo del programa.</li> </ul>"},{"location":"content/p3/#2-declaracion-y-acceso","title":"2. Declaraci\u00f3n y Acceso:","text":"<ul> <li>Declaraci\u00f3n:  Se declara una variable global simplemente asign\u00e1ndole un valor fuera de cualquier funci\u00f3n:</li> </ul> <pre><code>global_variable = \"Hola mundo!\"\n</code></pre> <ul> <li>Acceso:  Para acceder a una variable global dentro de una funci\u00f3n, se utiliza la palabra clave <code>global</code>:</li> </ul> <pre><code>def my_function():\n    global global_variable\n    print(global_variable) \n</code></pre>"},{"location":"content/p3/#3-importancia-de-la-palabra-clave-global","title":"3. Importancia de la palabra clave <code>global</code>:","text":"<ul> <li>Ambig\u00fcedad:  Python asume que cualquier variable utilizada dentro de una funci\u00f3n es una variable local. Si se intenta modificar una variable global sin utilizar <code>global</code>, Python crear\u00e1 una nueva variable local con el mismo nombre, dejando la variable global sin cambios.</li> <li>Control de acceso:  La palabra clave <code>global</code> le dice a Python que la variable que se va a usar es la variable global, no una variable local.</li> </ul>"},{"location":"content/p3/#4-ejemplos","title":"4. Ejemplos:","text":"<p>Ejemplo 1:  Contador global</p> <pre><code>global_counter = 0 \n\ndef increment_counter():\n    global global_counter \n    global_counter += 1\n    print(f\"Contador incrementado a: {global_counter}\")\n\nincrement_counter() # Salida: Contador incrementado a: 1\nincrement_counter() # Salida: Contador incrementado a: 2\n</code></pre> <p>Ejemplo 2:  Configuraci\u00f3n global</p> <pre><code>global_config = {\n    \"nombre\": \"Mi aplicaci\u00f3n\",\n    \"version\": \"1.0\"\n}\n\ndef mostrar_config():\n    print(f\"Nombre: {global_config['nombre']}\")\n    print(f\"Versi\u00f3n: {global_config['version']}\")\n\nmostrar_config() # Salida: Nombre: Mi aplicaci\u00f3n\n                #        Versi\u00f3n: 1.0\n</code></pre>"},{"location":"content/p3/#5-precauciones","title":"5. Precauciones:","text":"<ul> <li>Evite el uso excesivo:  Las variables globales pueden hacer que el c\u00f3digo sea dif\u00edcil de entender y mantener, especialmente en programas grandes. Es preferible utilizar variables locales y pasar datos entre funciones cuando sea posible.</li> <li>Posibles errores:  Modificar variables globales desde diferentes partes del c\u00f3digo puede llevar a errores dif\u00edciles de rastrear.</li> <li>Limitaciones:  Las variables globales no se pueden usar para compartir informaci\u00f3n entre diferentes scripts o m\u00f3dulos.</li> </ul>"},{"location":"content/p3/#actividad-organizacion-de-un-torneo-de-videojuegos-con-colecciones-en-python","title":"Actividad: Organizaci\u00f3n de un Torneo de Videojuegos con Colecciones en Python","text":"<p>Objetivo: Completar un programa que usa listas, tuplas, conjuntos y diccionarios para gestionar un torneo de videojuegos.</p> <p>Instrucciones: Lee cada paso y completa el c\u00f3digo donde se indica con <code># COMPLETAR</code>. Ejecuta el programa para verificar tus respuestas.</p>"},{"location":"content/p3/#codigo-con-espacios-para-completar","title":"C\u00f3digo con espacios para completar","text":"<pre><code># Paso 1: Lista de participantes\n# Crea una lista vac\u00eda llamada 'participantes'\nparticipantes = __________  # COMPLETAR: inicializa una lista vac\u00eda\n\n# Agrega al menos 3 participantes iniciales usando .append()\n__________  # COMPLETAR: agrega \"Alex\"\n__________  # COMPLETAR: agrega \"Sofia\"\n__________  # COMPLETAR: agrega \"Juan\"\n\n# Agrega 2 participantes m\u00e1s en una sola l\u00ednea usando una lista y extend()\nparticipantes.extend(__________)  # COMPLETAR: agrega [\"Luna\", \"Max\"] usando extend\n\nprint(\"Participantes del torneo:\", participantes)\n\n# Paso 2: Tupla con detalles de un juego\n# Crea una tupla llamada 'juego' con 3 elementos: nombre (\"FIFA\"), g\u00e9nero (\"Deportes\"), a\u00f1o (1993)\njuego = __________  # COMPLETAR: define la tupla con (\"FIFA\", \"Deportes\", 1993)\n\n# Imprime un mensaje usando los elementos de la tupla\nprint(f\"El juego {__________[0]} es del g\u00e9nero {__________[1]} y fue lanzado en {__________[2]}.\")  # COMPLETAR: usa 'juego' y sus \u00edndices\n\n# Paso 3: Conjunto de equipos\n# Crea un conjunto vac\u00edo llamado 'equipos'\nequipos = __________  # COMPLETAR: inicializa un conjunto vac\u00edo\n\n# Agrega 4 equipos al conjunto usando .add(), incluyendo un duplicado (ej. \"Leones\" dos veces)\n__________.add(\"Leones\")  # COMPLETAR: usa 'equipos'\n__________.add(\"Pumas\")   # COMPLETAR: usa 'equipos'\n__________.add(\"Tigres\")  # COMPLETAR: usa 'equipos'\n__________.add(\"Leones\")  # COMPLETAR: usa 'equipos' (duplicado)\n\nprint(\"Equipos registrados:\", equipos)\n\n# Paso 4: Diccionario de puntajes\n# Crea un diccionario 'puntajes' con al menos 5 participantes y sus puntajes iniciales\npuntajes = {\n    \"Alex\": __________ ,  # COMPLETAR: asigna un puntaje (ej. 100)\n    \"Sofia\": __________ , # COMPLETAR: asigna un puntaje (ej. 85)\n    \"Juan\": __________ ,  # COMPLETAR: asigna un puntaje (ej. 120)\n    \"Luna\": __________ ,  # COMPLETAR: asigna un puntaje (ej. 90)\n    \"Max\": __________    # COMPLETAR: asigna un puntaje (ej. 110)\n}\n\nprint(\"Puntajes del torneo:\", puntajes)\n\n# Paso 5: Operaciones con las colecciones\n# a) Elimina a \"Juan\" de la lista 'participantes' usando .remove()\n__________.remove(__________)  # COMPLETAR: elimina \"Juan\" de 'participantes'\n\nprint(\"Participantes despu\u00e9s de la retirada de Juan:\", participantes)\n\n# b) Imprime el a\u00f1o de lanzamiento del juego desde la tupla 'juego'\nprint(\"A\u00f1o de lanzamiento del juego:\", __________[__________])  # COMPLETAR: accede al a\u00f1o con \u00edndice\n\n# c) Agrega un nuevo equipo \"\u00c1guilas\" al conjunto y verifica si est\u00e1 presente con 'in'\n__________.add(__________)  # COMPLETAR: agrega \"\u00c1guilas\" a 'equipos'\nprint(\"\u00bf\u00c1guilas est\u00e1 en los equipos?\", __________ in __________)  # COMPLETAR: verifica con 'in'\n\n# d) Actualiza el puntaje de \"Max\" a 150 en el diccionario\npuntajes[__________] = __________  # COMPLETAR: actualiza el puntaje de \"Max\" a 150\n\nprint(\"Puntajes actualizados:\", puntajes)\n\n# Paso 6: Interacci\u00f3n con el usuario\n# Pide al usuario un nombre y un puntaje, y actualiza/a\u00f1ade ese dato al diccionario 'puntajes'\nnombre = input(\"Ingresa el nombre del participante: \")\npuntaje = __________(input(\"Ingresa el puntaje del participante: \"))  # COMPLETAR: convierte la entrada a entero\n\n__________[__________] = __________  # COMPLETAR: actualiza/a\u00f1ade el puntaje en 'puntajes'\n\nprint(\"Puntajes actualizados:\", puntajes)\n</code></pre>"},{"location":"content/p4/","title":"Semana 4 - sistema de control de versiones","text":""},{"location":"content/p4/#1-que-es-git","title":"1. \u00bfQu\u00e9 es Git?","text":"<p>Git es un sistema de control de versiones distribuido que permite rastrear cambios en archivos y colaborar con otros desarrolladores. Es esencial para el desarrollo de software moderno.</p>"},{"location":"content/p4/#conceptos-clave-de-git","title":"Conceptos clave de Git:","text":"<ul> <li>Repositorio (repo): Un directorio donde se almacenan todos los archivos y su historial de cambios.</li> <li>Commit: Una \"instant\u00e1nea\" de los cambios realizados en el repositorio.</li> <li>Branch (rama): Una l\u00ednea de desarrollo independiente dentro del repositorio.</li> <li>Merge: Combinar cambios de una rama a otra.</li> <li>Remote: Referencia a un repositorio remoto, como GitHub.</li> </ul>"},{"location":"content/p4/#2-instalacion-y-configuracion-inicial","title":"2. Instalaci\u00f3n y configuraci\u00f3n inicial","text":"<ol> <li>Instalar Git:</li> <li>En Windows: Descarga el instalador desde git-scm.com.</li> <li>En macOS: Usa <code>brew install git</code> o inst\u00e1lalo desde las preferencias del sistema.</li> <li> <p>En Linux: Usa <code>sudo apt install git</code> (Ubuntu) o <code>sudo yum install git</code> (Fedora).</p> </li> <li> <p>Configuraci\u00f3n inicial: <pre><code>git config --global user.name \"Tu Nombre\"\ngit config --global user.email \"tu@email.com\"\n</code></pre></p> </li> <li> <p>Verificar la configuraci\u00f3n: <pre><code>git config --list\n</code></pre></p> </li> </ol>"},{"location":"content/p4/#3-comandos-basicos-de-git","title":"3. Comandos b\u00e1sicos de Git","text":""},{"location":"content/p4/#inicializar-un-repositorio","title":"Inicializar un repositorio","text":"<p><pre><code>git init\n</code></pre> Crea un nuevo repositorio en el directorio actual.</p>"},{"location":"content/p4/#clonar-un-repositorio-existente","title":"Clonar un repositorio existente","text":"<p><pre><code>git clone &lt;URL-del-repositorio&gt;\n</code></pre> Descarga un repositorio remoto a tu m\u00e1quina local.</p>"},{"location":"content/p4/#ver-el-estado-del-repositorio","title":"Ver el estado del repositorio","text":"<p><pre><code>git status\n</code></pre> Muestra los archivos modificados, pendientes de commit, etc.</p>"},{"location":"content/p4/#agregar-cambios-al-area-de-preparacion-staging-area","title":"Agregar cambios al \u00e1rea de preparaci\u00f3n (staging area)","text":"<pre><code>git add &lt;archivo&gt;\ngit add .  # Agrega todos los cambios\n</code></pre>"},{"location":"content/p4/#hacer-un-commit","title":"Hacer un commit","text":"<pre><code>git commit -m \"Mensaje descriptivo de los cambios\"\n</code></pre>"},{"location":"content/p4/#ver-el-historial-de-commits","title":"Ver el historial de commits","text":"<pre><code>git log\n</code></pre>"},{"location":"content/p4/#4-trabajar-con-ramas-branches","title":"4. Trabajar con ramas (branches)","text":""},{"location":"content/p4/#crear-una-nueva-rama","title":"Crear una nueva rama","text":"<pre><code>git branch &lt;nombre-de-la-rama&gt;\n</code></pre>"},{"location":"content/p4/#cambiar-a-una-rama","title":"Cambiar a una rama","text":"<pre><code>git checkout &lt;nombre-de-la-rama&gt;\n# O usar el comando combinado:\ngit switch &lt;nombre-de-la-rama&gt;\n</code></pre>"},{"location":"content/p4/#fusionar-ramas-merge","title":"Fusionar ramas (merge)","text":"<p><pre><code>git merge &lt;nombre-de-la-rama&gt;\n</code></pre> Combina los cambios de una rama en la rama actual.</p>"},{"location":"content/p4/#eliminar-una-rama","title":"Eliminar una rama","text":"<pre><code>git branch -d &lt;nombre-de-la-rama&gt;\n</code></pre>"},{"location":"content/p4/#5-trabajar-con-repositorios-remotos","title":"5. Trabajar con repositorios remotos","text":""},{"location":"content/p4/#anadir-un-repositorio-remoto","title":"A\u00f1adir un repositorio remoto","text":"<pre><code>git remote add origin &lt;URL-del-repositorio&gt;\n</code></pre>"},{"location":"content/p4/#enviar-cambios-al-repositorio-remoto","title":"Enviar cambios al repositorio remoto","text":"<pre><code>git push origin &lt;nombre-de-la-rama&gt;\n</code></pre>"},{"location":"content/p4/#traer-cambios-del-repositorio-remoto","title":"Traer cambios del repositorio remoto","text":"<pre><code>git pull origin &lt;nombre-de-la-rama&gt;\n</code></pre>"},{"location":"content/p4/#6-que-es-github","title":"6. \u00bfQu\u00e9 es GitHub?","text":"<p>GitHub es una plataforma basada en la nube que aloja repositorios de Git. Adem\u00e1s de almacenar c\u00f3digo, ofrece herramientas para colaboraci\u00f3n, como pull requests, issues y proyectos.</p>"},{"location":"content/p4/#pasos-para-subir-un-proyecto-a-github","title":"Pasos para subir un proyecto a GitHub:","text":"<ol> <li>Crea un repositorio en GitHub (bot\u00f3n \"New\").</li> <li>Copia la URL del repositorio.</li> <li>Enlaza tu repositorio local con GitHub:    <pre><code>git remote add origin &lt;URL-del-repositorio&gt;\n</code></pre></li> <li>Sube los cambios:    <pre><code>git push -u origin main\n</code></pre></li> </ol>"},{"location":"content/p4/#7-pull-requests-prs","title":"7. Pull Requests (PRs)","text":"<p>Un Pull Request es una solicitud para fusionar cambios de una rama a otra (generalmente desde una rama de caracter\u00edsticas a la rama principal).</p>"},{"location":"content/p4/#flujo-tipico-de-trabajo-con-prs","title":"Flujo t\u00edpico de trabajo con PRs:","text":"<ol> <li>Crear una nueva rama para tus cambios.</li> <li>Hacer commits en esa rama.</li> <li>Subir la rama al repositorio remoto.</li> <li>Crear un Pull Request en GitHub.</li> <li>Revisar los cambios y fusionarlos si est\u00e1n aprobados.</li> </ol>"},{"location":"content/p4/#8-resolver-conflictos","title":"8. Resolver conflictos","text":"<p>Cuando dos personas modifican el mismo archivo en diferentes ramas, puede surgir un conflicto al fusionarlas. Git te notificar\u00e1 sobre los conflictos.</p>"},{"location":"content/p4/#pasos-para-resolver-un-conflicto","title":"Pasos para resolver un conflicto:","text":"<ol> <li>Abre el archivo conflictivo.</li> <li>Edita manualmente el archivo para resolver las diferencias.</li> <li>Marca el conflicto como resuelto:    <pre><code>git add &lt;archivo-conflictivo&gt;\n</code></pre></li> <li>Completa el merge:    <pre><code>git commit\n</code></pre></li> </ol>"},{"location":"content/p4/#9-herramientas-utiles-en-github","title":"9. Herramientas \u00fatiles en GitHub","text":""},{"location":"content/p4/#issues","title":"Issues","text":"<p>Permiten reportar problemas, sugerir mejoras o asignar tareas.</p>"},{"location":"content/p4/#proyectos","title":"Proyectos","text":"<p>Tableros Kanban para organizar tareas y seguimiento.</p>"},{"location":"content/p4/#github-actions","title":"GitHub Actions","text":"<p>Automatiza flujos de trabajo, como pruebas y despliegues.</p>"},{"location":"content/p4/#github-pages","title":"GitHub Pages","text":"<p>Publica sitios web directamente desde un repositorio.</p>"},{"location":"content/p4/#10-buenas-practicas","title":"10. Buenas pr\u00e1cticas","text":"<ol> <li>Haz commits peque\u00f1os y frecuentes: Facilita la revisi\u00f3n y el seguimiento.</li> <li>Usa mensajes claros en los commits: Describe qu\u00e9 cambiaste y por qu\u00e9.</li> <li>Trabaja en ramas separadas: Evita modificar directamente la rama principal (<code>main</code> o <code>master</code>).</li> <li>Sincroniza regularmente: Usa <code>git pull</code> para mantener tu repositorio actualizado.</li> <li>Revisa antes de hacer push: Aseg\u00farate de que tus cambios no rompan el c\u00f3digo.</li> </ol> <p>\u00a1Claro! A continuaci\u00f3n, agrego los entregables para cada una de las actividades. Estos entregables son los resultados tangibles que se deben generar al completar las tareas descritas en cada flujo de trabajo.</p> <p>\u00a1Claro! A continuaci\u00f3n, te presento dos actividades detalladas: una enfocada en un flujo de trabajo con GitHub para dos desarrolladores y otra sobre un flujo de trabajo con Fork. Ambas actividades est\u00e1n dise\u00f1adas para que puedas practicar y entender c\u00f3mo colaborar eficientemente en proyectos.</p>"},{"location":"content/p4/#actividad-1-flujo-de-trabajo-con-github-para-dos-desarrolladores","title":"ACTIVIDAD 1: FLUJO DE TRABAJO CON GITHUB PARA DOS DESARROLLADORES","text":""},{"location":"content/p4/#objetivo","title":"Objetivo","text":"<p>Simular el proceso de colaboraci\u00f3n entre dos desarrolladores en un proyecto alojado en GitHub. Se utilizar\u00e1n ramas, pull requests y revisi\u00f3n de c\u00f3digo.</p>"},{"location":"content/p4/#paso-a-paso","title":"Paso a paso","text":""},{"location":"content/p4/#1-configuracion-inicial","title":"1. Configuraci\u00f3n inicial","text":"<ul> <li>Desarrollador 1 (D1):</li> <li>Crea un repositorio en GitHub llamado <code>proyecto-colaborativo</code>.</li> <li>Clona el repositorio en tu m\u00e1quina local:      <pre><code>git clone &lt;URL-del-repositorio&gt;\n</code></pre></li> <li> <p>Crea un archivo <code>README.md</code> con una descripci\u00f3n b\u00e1sica del proyecto y haz el primer commit:      <pre><code>echo \"# Proyecto Colaborativo\" &gt; README.md\ngit add README.md\ngit commit -m \"A\u00f1adido README inicial\"\ngit push origin main\n</code></pre></p> </li> <li> <p>Desarrollador 2 (D2):</p> </li> <li>Clona el mismo repositorio en tu m\u00e1quina local:      <pre><code>git clone &lt;URL-del-repositorio&gt;\n</code></pre></li> </ul>"},{"location":"content/p4/#2-crear-una-nueva-funcionalidad","title":"2. Crear una nueva funcionalidad","text":"<ul> <li>Desarrollador 1 (D1):</li> <li>Crea una nueva rama para trabajar en una funcionalidad:      <pre><code>git checkout -b feature/calculadora\n</code></pre></li> <li>Agrega un archivo <code>calculadora.py</code> con una funci\u00f3n b\u00e1sica:      <pre><code>def suma(a, b):\n    return a + b\n</code></pre></li> <li> <p>Haz commit de los cambios:      <pre><code>git add calculadora.py\ngit commit -m \"A\u00f1adida funci\u00f3n suma en calculadora\"\ngit push origin feature/calculadora\n</code></pre></p> </li> <li> <p>Desarrollador 2 (D2):</p> </li> <li>Sincroniza tu repositorio local con el remoto:      <pre><code>git pull origin main\n</code></pre></li> <li>Crea una nueva rama para trabajar en otra funcionalidad:      <pre><code>git checkout -b feature/multiplicacion\n</code></pre></li> <li>Agrega un archivo <code>multiplicacion.py</code> con una funci\u00f3n b\u00e1sica:      <pre><code>def multiplicar(a, b):\n    return a * b\n</code></pre></li> <li>Haz commit de los cambios:      <pre><code>git add multiplicacion.py\ngit commit -m \"A\u00f1adida funci\u00f3n multiplicar\"\ngit push origin feature/multiplicacion\n</code></pre></li> </ul>"},{"location":"content/p4/#3-revision-y-fusion-de-cambios","title":"3. Revisi\u00f3n y fusi\u00f3n de cambios","text":"<ul> <li>Desarrollador 1 (D1):</li> <li>Ve a GitHub y crea un Pull Request desde la rama <code>feature/calculadora</code> hacia <code>main</code>.</li> <li> <p>Asigna al Desarrollador 2 como revisor.</p> </li> <li> <p>Desarrollador 2 (D2):</p> </li> <li>Revisa el Pull Request en GitHub. Comenta si es necesario y aprueba los cambios.</li> <li> <p>Fusiona el Pull Request en GitHub.</p> </li> <li> <p>Ambos desarrolladores:</p> </li> <li>Sincroniza tu repositorio local con el remoto:      <pre><code>git checkout main\ngit pull origin main\n</code></pre></li> </ul>"},{"location":"content/p4/#4-finalizar-el-proyecto","title":"4. Finalizar el proyecto","text":"<ul> <li>Repite el proceso para fusionar la rama <code>feature/multiplicacion</code> en <code>main</code>.</li> <li>Verifica que ambos archivos (<code>calculadora.py</code> y <code>multiplicacion.py</code>) est\u00e9n en la rama <code>main</code>.</li> </ul>"},{"location":"content/p4/#5-entregables","title":"5. Entregables","text":"<p>Al finalizar la actividad, los siguientes elementos deben estar completos y disponibles:</p> <ol> <li>Repositorio en GitHub:</li> <li>Un repositorio llamado <code>proyecto-colaborativo</code> con las ramas <code>main</code>, <code>feature/calculadora</code> y <code>feature/multiplicacion</code>.</li> <li> <p>El repositorio debe contener los siguientes archivos:</p> <ul> <li><code>README.md</code>: Con una descripci\u00f3n b\u00e1sica del proyecto.</li> <li><code>calculadora.py</code>: Con la funci\u00f3n <code>suma(a, b)</code>.</li> <li><code>multiplicacion.py</code>: Con la funci\u00f3n <code>multiplicar(a, b)</code>.</li> </ul> </li> <li> <p>Historial de commits:</p> </li> <li> <p>El historial de commits en la rama <code>main</code> debe mostrar:</p> <ul> <li>El commit inicial con el archivo <code>README.md</code>.</li> <li>Los commits fusionados desde las ramas <code>feature/calculadora</code> y <code>feature/multiplicacion</code>.</li> </ul> </li> <li> <p>Pull Requests cerrados:</p> </li> <li>Dos Pull Requests fusionados en GitHub:<ul> <li>Uno desde <code>feature/calculadora</code> hacia <code>main</code>.</li> <li>Otro desde <code>feature/multiplicacion</code> hacia <code>main</code>.</li> </ul> </li> <li>Cada Pull Request debe incluir comentarios de revisi\u00f3n y aprobaci\u00f3n.</li> </ol>"},{"location":"content/p4/#actividad-2-flujo-de-trabajo-con-fork","title":"ACTIVIDAD 2: FLUJO DE TRABAJO CON FORK","text":""},{"location":"content/p4/#objetivo_1","title":"Objetivo","text":"<p>Simular el proceso de contribuci\u00f3n a un proyecto utilizando un fork, com\u00fan en proyectos de c\u00f3digo abierto.</p>"},{"location":"content/p4/#paso-a-paso_1","title":"Paso a paso","text":""},{"location":"content/p4/#1-configuracion-inicial_1","title":"1. Configuraci\u00f3n inicial","text":"<ul> <li>Propietario del repositorio (P):</li> <li>Crea un repositorio en GitHub llamado <code>proyecto-fork</code>.</li> <li>Clona el repositorio en tu m\u00e1quina local:      <pre><code>git clone &lt;URL-del-repositorio&gt;\n</code></pre></li> <li> <p>Crea un archivo <code>README.md</code> con una descripci\u00f3n b\u00e1sica del proyecto y haz el primer commit:      <pre><code>echo \"# Proyecto Fork\" &gt; README.md\ngit add README.md\ngit commit -m \"A\u00f1adido README inicial\"\ngit push origin main\n</code></pre></p> </li> <li> <p>Contribuyente (C):</p> </li> <li>Ve al repositorio <code>proyecto-fork</code> en GitHub y haz clic en el bot\u00f3n Fork para crear una copia en tu cuenta.</li> </ul>"},{"location":"content/p4/#2-contribuir-al-proyecto","title":"2. Contribuir al proyecto","text":"<ul> <li>Contribuyente (C):</li> <li>Clona tu fork en tu m\u00e1quina local:      <pre><code>git clone &lt;URL-de-tu-fork&gt;\n</code></pre></li> <li>Crea una nueva rama para trabajar en una mejora:      <pre><code>git checkout -b feature/mejora-readme\n</code></pre></li> <li>Edita el archivo <code>README.md</code> para a\u00f1adir m\u00e1s detalles o correcciones.</li> <li>Haz commit de los cambios:      <pre><code>git add README.md\ngit commit -m \"Mejorado el README con m\u00e1s detalles\"\ngit push origin feature/mejora-readme\n</code></pre></li> </ul>"},{"location":"content/p4/#3-enviar-cambios-al-propietario","title":"3. Enviar cambios al propietario","text":"<ul> <li>Contribuyente (C):</li> <li>Ve a tu fork en GitHub y crea un Pull Request desde la rama <code>feature/mejora-readme</code> hacia la rama <code>main</code> del repositorio original.</li> <li> <p>Describe los cambios realizados en el Pull Request.</p> </li> <li> <p>Propietario del repositorio (P):</p> </li> <li>Revisa el Pull Request en GitHub.</li> <li>Si los cambios son aceptables, fusiona el Pull Request en la rama <code>main</code>.</li> </ul>"},{"location":"content/p4/#4-mantener-el-fork-actualizado","title":"4. Mantener el fork actualizado","text":"<ul> <li>Contribuyente (C):</li> <li>Agrega el repositorio original como un remote adicional:      <pre><code>git remote add upstream &lt;URL-del-repositorio-original&gt;\n</code></pre></li> <li>Trae los cambios del repositorio original:      <pre><code>git fetch upstream\n</code></pre></li> <li>Actualiza tu rama <code>main</code> con los cambios del repositorio original:      <pre><code>git checkout main\ngit merge upstream/main\n</code></pre></li> </ul>"},{"location":"content/p4/#5-entregables_1","title":"5. Entregables","text":"<p>Al finalizar la actividad, los siguientes elementos deben estar completos y disponibles:</p> <ol> <li>Repositorio original y fork:</li> <li>Un repositorio original llamado <code>proyecto-fork</code> con al menos un archivo <code>README.md</code>.</li> <li> <p>Un fork del repositorio original en la cuenta del contribuyente.</p> </li> <li> <p>Ramas y commits:</p> </li> <li> <p>En el fork del contribuyente, debe existir una rama llamada <code>feature/mejora-readme</code> con al menos un commit que mejore el archivo <code>README.md</code>.</p> </li> <li> <p>Pull Request fusionado:</p> </li> <li>Un Pull Request creado desde el fork del contribuyente hacia el repositorio original.</li> <li> <p>El Pull Request debe estar fusionado en la rama <code>main</code> del repositorio original.</p> </li> <li> <p>Archivo README.md actualizado:</p> </li> <li> <p>El archivo <code>README.md</code> en el repositorio original debe reflejar las mejoras realizadas por el contribuyente. Por ejemplo:      <pre><code># Proyecto Fork\n\nEste es un proyecto de ejemplo para practicar el flujo de trabajo con forks.\n\n### Mejoras realizadas:\n- Se a\u00f1adieron detalles sobre el prop\u00f3sito del proyecto.\n- Se incluy\u00f3 informaci\u00f3n sobre c\u00f3mo contribuir.\n</code></pre></p> </li> <li> <p>Fork sincronizado:</p> </li> <li>El fork del contribuyente debe estar actualizado con los cambios del repositorio original. Esto se puede verificar comparando las ramas <code>main</code> de ambos repositorios.</li> </ol>"},{"location":"content/p4/#conclusion","title":"Conclusi\u00f3n","text":"<p>Estas dos actividades te permiten practicar flujos de trabajo comunes en proyectos colaborativos. La primera actividad es ideal para equipos peque\u00f1os que trabajan directamente en el mismo repositorio, mientras que la segunda es \u00fatil para contribuciones externas en proyectos de c\u00f3digo abierto.</p>"},{"location":"content/p5/","title":"Semana 5 Entornos Virtuales en Python:","text":"<p>Los entornos virtuales en Python son una herramienta esencial para gestionar las dependencias de tus proyectos. Permiten crear un espacio aislado para cada proyecto, evitando conflictos entre las librer\u00edas que utiliza cada uno.</p> <p>\u00bfPara qu\u00e9 sirven?</p> <ul> <li>Aislamiento de dependencias: Cada proyecto puede tener sus propias versiones de librer\u00edas, sin afectar a otros proyectos.</li> <li>Control de versiones: Puedes crear un entorno virtual para cada versi\u00f3n de un proyecto, asegurando compatibilidad.</li> <li>Simplificaci\u00f3n de la gesti\u00f3n de dependencias: Facilita la instalaci\u00f3n y actualizaci\u00f3n de librer\u00edas.</li> </ul> <p>Creaci\u00f3n de un entorno virtual:</p> <pre><code>python -m venv .venv\n</code></pre> <p>Activaci\u00f3n del entorno virtual:</p> <ul> <li>Windows: <pre><code>myenv\\Scripts\\activate\n</code></pre></li> <li>Linux/macOS: <pre><code>source myenv/bin/activate\n</code></pre></li> </ul> <p>Comandos dentro del entorno virtual:</p> <ul> <li> <p>Instalaci\u00f3n de paquetes: <pre><code>pip install &lt;nombre_del_paquete&gt;\n</code></pre> Ejemplo: <pre><code>pip install requests\n</code></pre></p> </li> <li> <p>Desinstalaci\u00f3n de paquetes: <pre><code>pip uninstall &lt;nombre_del_paquete&gt;\n</code></pre></p> </li> <li> <p>Actualizaci\u00f3n de paquetes: <pre><code>pip install --upgrade &lt;nombre_del_paquete&gt;\n</code></pre></p> </li> <li> <p>Lista de paquetes instalados: <pre><code>pip freeze\n</code></pre></p> </li> <li> <p>Guardar las dependencias en un archivo: <pre><code>pip freeze &gt; requirements.txt\n</code></pre> Este comando crea un archivo <code>requirements.txt</code> que lista todas las dependencias del proyecto.</p> </li> <li> <p>Instalaci\u00f3n de paquetes desde un archivo: <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Desactivaci\u00f3n del entorno virtual: <pre><code>deactivate\n</code></pre></p> </li> </ul>"},{"location":"content/p5/#ejemplo-con-excel-agregar-datos-al-archivo","title":"Ejemplo con Excel: Agregar datos al archivo","text":"<p>Proyecto de registro de asistencia:</p> <ol> <li>Creaci\u00f3n del entorno virtual:</li> </ol> <pre><code>python -m venv attendance_tracker\n</code></pre> <ol> <li> <p>Activaci\u00f3n del entorno:</p> </li> <li> <p>Windows: <pre><code>attendance_tracker\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Linux/macOS: <pre><code>source attendance_tracker/bin/activate\n</code></pre></p> </li> <li> <p>Instalaci\u00f3n de librer\u00edas:</p> </li> </ol> <pre><code>pip install openpyxl\n</code></pre> <ul> <li> <p>openpyxl: Librer\u00eda para leer y escribir archivos de Excel, permite la interacci\u00f3n con hojas de c\u00e1lculo.</p> </li> <li> <p>Guardar las dependencias:</p> </li> </ul> <pre><code>pip freeze &gt; requirements.txt\n</code></pre> <ol> <li> <p>Desarrollo del proyecto:</p> </li> <li> <p>Cargar el archivo de Excel: Utilizar <code>openpyxl</code> para abrir el archivo \"asistencia.xlsx\".</p> </li> <li>Obtener la hoja de c\u00e1lculo: Acceder a la hoja \"Asistencia\" del archivo.</li> <li>Obtener la \u00faltima fila: Encontrar la \u00faltima fila con datos en la hoja.</li> <li>Agregar una nueva fila: Insertar una nueva fila despu\u00e9s de la \u00faltima fila con datos.</li> <li>Solicitar datos al usuario: Pedir al usuario que ingrese el nombre, la fecha y la hora de entrada.</li> <li>Escribir los datos en la nueva fila: Escribir los datos del usuario en las celdas correspondientes de la nueva fila.</li> <li> <p>Guardar los cambios en el archivo: Guardar los cambios realizados en el archivo \"asistencia.xlsx\".</p> </li> <li> <p>Desactivaci\u00f3n del entorno:</p> </li> </ol> <pre><code>deactivate\n</code></pre> <p>Beneficios de usar un entorno virtual en este proyecto:</p> <ul> <li>Aislamiento de dependencias: Evita conflictos con otras librer\u00edas que puedas estar usando en otros proyectos.</li> <li>Facilidad de colaboraci\u00f3n: Permite compartir el proyecto con otros desarrolladores, asegur\u00e1ndote de que las dependencias se instalen correctamente.</li> <li>Simplifica la gesti\u00f3n de versiones: Puedes crear entornos virtuales para diferentes versiones del proyecto, manteniendo la compatibilidad con la librer\u00eda openpyxl.</li> </ul> <p>Ejemplo de c\u00f3digo (registro de asistencia):</p> <pre><code>import openpyxl\n\n# Cargar el archivo de Excel\nworkbook = openpyxl.load_workbook(\"asistencia.xlsx\")\nsheet = workbook[\"Asistencia\"]\n\n# Obtener la \u00faltima fila con datos\nlast_row = sheet.max_row\n\n# Agregar una nueva fila\nsheet.insert_rows(last_row + 1)\n\n# Solicitar datos al usuario\nnombre = input(\"Ingrese su nombre: \")\nfecha = input(\"Ingrese la fecha (AAAA-MM-DD): \")\nhora = input(\"Ingrese la hora de entrada (HH:MM): \")\n\n# Escribir los datos en la nueva fila\nsheet.cell(row=last_row + 1, column=1).value = nombre\nsheet.cell(row=last_row + 1, column=2).value = fecha\nsheet.cell(row=last_row + 1, column=3).value = hora\n\n# Guardar los cambios en el archivo\nworkbook.save(\"asistencia.xlsx\")\n</code></pre>"},{"location":"content/p5/#actividad-practica-sistema-de-gestion-de-asistencia-avanzado","title":"Actividad Pr\u00e1ctica: Sistema de Gesti\u00f3n de Asistencia Avanzado","text":"<p>En esta actividad, aplicar\u00e1s los conocimientos adquiridos sobre entornos virtuales y manipulaci\u00f3n de archivos Excel para crear un sistema de gesti\u00f3n de asistencia m\u00e1s completo.</p>"},{"location":"content/p5/#objetivos","title":"Objetivos:","text":"<ol> <li>Crear y configurar un entorno virtual para el proyecto</li> <li>Desarrollar un sistema de gesti\u00f3n de asistencia con funcionalidades avanzadas</li> <li>Implementar validaci\u00f3n de datos y generaci\u00f3n de reportes</li> </ol>"},{"location":"content/p5/#instrucciones","title":"Instrucciones:","text":""},{"location":"content/p5/#parte-1-configuracion-del-entorno-virtual","title":"Parte 1: Configuraci\u00f3n del Entorno Virtual","text":"<ol> <li>Crea un nuevo directorio para tu proyecto llamado <code>sistema_asistencia</code></li> <li>Dentro del directorio, crea un entorno virtual:    <pre><code>python -m venv .venv\n</code></pre></li> <li>Activa el entorno virtual seg\u00fan tu sistema operativo</li> <li>Instala las siguientes librer\u00edas:    <pre><code>pip install openpyxl pandas matplotlib\n</code></pre></li> <li>Guarda las dependencias en un archivo <code>requirements.txt</code></li> </ol>"},{"location":"content/p5/#parte-2-desarrollo-del-sistema-de-gestion","title":"Parte 2: Desarrollo del Sistema de Gesti\u00f3n","text":"<p>Crea un archivo <code>asistencia_manager.py</code> con el siguiente c\u00f3digo base y compl\u00e9talo seg\u00fan las instrucciones:</p> <pre><code>import openpyxl\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nimport os\n\nclass SistemaAsistencia:\n    def __init__(self, archivo=\"asistencia.xlsx\"):\n        # Verificar si el archivo existe, si no, crearlo con la estructura inicial\n        if not os.path.exists(archivo):\n            self.crear_archivo_inicial(archivo)\n        self.archivo = archivo\n        self.workbook = openpyxl.load_workbook(archivo)\n        self.sheet = self.workbook[\"Asistencia\"]\n\n    def crear_archivo_inicial(self, archivo):\n        # Crear un nuevo libro de trabajo y hoja\n        wb = openpyxl.Workbook()\n        sheet = wb.active\n        sheet.title = \"Asistencia\"\n\n        # Definir encabezados\n        headers = [\"Nombre\", \"Fecha\", \"Hora Entrada\", \"Hora Salida\", \"Duraci\u00f3n (horas)\"]\n        sheet.append(headers)\n\n        # Guardar el archivo\n        wb.save(archivo)\n\n    def registrar_entrada(self):\n        # Solicitar informaci\u00f3n al usuario\n        nombre = input(\"Ingrese el nombre: \").strip()\n        fecha = datetime.now().strftime(\"%Y-%m-%d\")\n        hora_entrada = datetime.now().strftime(\"%H:%M:%S\")\n\n        # Agregar registro al Excel\n        self.sheet.append([nombre, fecha, hora_entrada, \"\", \"\"])\n        self.workbook.save(self.archivo)\n        print(f\"Entrada registrada para {nombre} a las {hora_entrada}\")\n\n    def registrar_salida(self):\n        nombre = input(\"Ingrese el nombre: \").strip()\n        fecha_actual = datetime.now().strftime(\"%Y-%m-%d\")\n        hora_salida = datetime.now().strftime(\"%H:%M:%S\")\n\n        # Buscar el \u00faltimo registro del usuario en la fecha actual\n        for row in range(2, self.sheet.max_row + 1):\n            if (self.sheet.cell(row=row, column=1).value == nombre and \n                self.sheet.cell(row=row, column=2).value == fecha_actual and \n                self.sheet.cell(row=row, column=4).value == \"\"):\n\n                # Registrar hora de salida\n                self.sheet.cell(row=row, column=4).value = hora_salida\n\n                # Calcular duraci\u00f3n\n                hora_entrada = datetime.strptime(self.sheet.cell(row=row, column=3).value, \"%H:%M:%S\")\n                hora_salida_dt = datetime.strptime(hora_salida, \"%H:%M:%S\")\n                duracion = (hora_salida_dt - hora_entrada).total_seconds() / 3600  # En horas\n                self.sheet.cell(row=row, column=5).value = round(duracion, 2)\n\n                self.workbook.save(self.archivo)\n                print(f\"Salida registrada para {nombre}. Duraci\u00f3n: {duracion:.2f} horas\")\n                return\n\n        print(\"No se encontr\u00f3 un registro de entrada para hoy.\")\n\n    def generar_reporte_individual(self, nombre):\n        # Leer datos con pandas\n        df = pd.read_excel(self.archivo)\n\n        # Filtrar por nombre\n        reporte = df[df[\"Nombre\"] == nombre]\n\n        if reporte.empty:\n            print(f\"No hay registros para {nombre}\")\n        else:\n            print(f\"\\nReporte de asistencia para {nombre}:\")\n            print(reporte.to_string(index=False))\n            print(f\"Horas totales: {reporte['Duraci\u00f3n (horas)'].sum():.2f}\")\n\n    def visualizar_estadisticas(self):\n        # Leer datos con pandas\n        df = pd.read_excel(self.archivo)\n\n        # Agrupar por nombre y sumar horas\n        estadisticas = df.groupby(\"Nombre\")[\"Duraci\u00f3n (horas)\"].sum().dropna()\n\n        if estadisticas.empty:\n            print(\"No hay datos para mostrar estad\u00edsticas.\")\n            return\n\n        # Crear gr\u00e1fico de barras\n        plt.figure(figsize=(10, 6))\n        estadisticas.plot(kind=\"bar\")\n        plt.title(\"Horas Totales por Persona\")\n        plt.xlabel(\"Nombre\")\n        plt.ylabel(\"Horas\")\n        plt.xticks(rotation=45)\n        plt.tight_layout()\n        plt.show()\n\ndef menu_principal():\n    sistema = SistemaAsistencia()\n    while True:\n        print(\"\\n===== SISTEMA DE GESTI\u00d3N DE ASISTENCIA =====\")\n        print(\"1. Registrar entrada\")\n        print(\"2. Registrar salida\")\n        print(\"3. Generar reporte individual\")\n        print(\"4. Visualizar estad\u00edsticas\")\n        print(\"5. Salir\")\n\n        opcion = input(\"\\nSeleccione una opci\u00f3n: \")\n\n        if opcion == \"1\":\n            sistema.registrar_entrada()\n        elif opcion == \"2\":\n            sistema.registrar_salida()\n        elif opcion == \"3\":\n            nombre = input(\"Ingrese el nombre para el reporte: \").strip()\n            sistema.generar_reporte_individual(nombre)\n        elif opcion == \"4\":\n            sistema.visualizar_estadisticas()\n        elif opcion == \"5\":\n            print(\"\u00a1Hasta luego!\")\n            break\n        else:\n            print(\"Opci\u00f3n no v\u00e1lida. Intente de nuevo.\")\n\nif __name__ == \"__main__\":\n    menu_principal()\n</code></pre>"},{"location":"content/p5/#actividad-grupal-desarrollo-de-proyecto-con-entornos-virtuales","title":"Actividad Grupal: Desarrollo de Proyecto con Entornos Virtuales","text":"<p>En esta actividad, trabajar\u00e1n en grupos para desarrollar un proyecto de tema libre aplicando los conocimientos sobre entornos virtuales y gesti\u00f3n de dependencias en Python.</p>"},{"location":"content/p5/#objetivos_1","title":"Objetivos:","text":"<ul> <li>Aplicar los conceptos de entornos virtuales en un proyecto colaborativo</li> <li>Practicar la gesti\u00f3n de dependencias en un entorno de equipo</li> <li>Desarrollar habilidades de trabajo en equipo y control de versiones</li> <li>Crear una aplicaci\u00f3n funcional que utilice librer\u00edas externas</li> </ul>"},{"location":"content/p5/#instrucciones_1","title":"Instrucciones:","text":""},{"location":"content/p5/#parte-1-formacion-de-equipos-y-planificacion","title":"Parte 1: Formaci\u00f3n de Equipos y Planificaci\u00f3n","text":"<ul> <li>Formen equipos de 3-4 personas</li> <li>Elijan un tema para su proyecto</li> <li>Definan los requisitos y funcionalidades de su proyecto</li> </ul>"},{"location":"content/p5/#parte-2-configuracion-del-entorno-de-desarrollo","title":"Parte 2: Configuraci\u00f3n del Entorno de Desarrollo","text":"<ul> <li>Creen un repositorio en GitHub para el proyecto</li> <li>Cada miembro debe clonar el repositorio</li> <li>Configuren un entorno virtual en sus m\u00e1quinas locales:    <pre><code>python -m venv .venv\n</code></pre></li> <li>Activen el entorno virtual seg\u00fan su sistema operativo</li> <li>Definan las dependencias iniciales que necesitar\u00e1n y cr\u00e9enlas en un archivo <code>requirements.txt</code></li> <li>Instalen las dependencias:    <pre><code>pip install -r requirements.txt\n</code></pre></li> </ul>"},{"location":"content/p5/#parte-3-desarrollo-colaborativo","title":"Parte 3: Desarrollo Colaborativo","text":"<ul> <li>Utilicen ramas de Git para trabajar en diferentes funcionalidades</li> <li>Cuando agreguen nuevas dependencias, actualicen el archivo <code>requirements.txt</code>:    <pre><code>pip freeze &gt; requirements.txt\n</code></pre></li> <li>Comuniquen a los dem\u00e1s miembros cuando actualicen las dependencias</li> <li>Los dem\u00e1s miembros deben actualizar sus entornos virtuales:    <pre><code>pip install -r requirements.txt\n</code></pre></li> <li>Implementen las funcionalidades planificadas</li> <li>Realicen pruebas para verificar que todo funciona correctamente</li> </ul>"},{"location":"content/p5/#parte-4-documentacion-y-presentacion","title":"Parte 4: Documentaci\u00f3n y Presentaci\u00f3n","text":"<ul> <li>Creen un archivo <code>README.md</code> con:</li> <li>Descripci\u00f3n del proyecto</li> <li>Instrucciones de instalaci\u00f3n y configuraci\u00f3n</li> <li>Gu\u00eda de uso</li> <li>Descripci\u00f3n de las dependencias utilizadas</li> <li>Contribuciones de cada miembro</li> </ul>"},{"location":"content/p5/#entregables-repositorio-github","title":"Entregables (Repositorio GitHub):","text":"<ul> <li>C\u00f3digo fuente completo</li> <li>Archivo <code>requirements.txt</code> con las dependencias del proyecto</li> </ul>"},{"location":"content/p6/","title":"Semana 6 - Evaluaci\u00f3n Primer Momento","text":""},{"location":"content/p6/#evaluacion-de-conocimiento-45-minutos","title":"Evaluaci\u00f3n de Conocimiento (45 minutos)","text":"<p>La evaluaci\u00f3n de conocimiento se realizar\u00e1 a trav\u00e9s de la plataforma Quizizz que aborda los temas vistos durante las primeras 5 semanas.</p> <ul> <li>Plataforma: Enlace Quizizz</li> <li>Acceso: Se proporcionar\u00e1 el enlace y c\u00f3digo de la prueba al inicio de la evaluaci\u00f3n</li> </ul>"},{"location":"content/p6/#evaluacion-de-desempeno-2-horas","title":"Evaluaci\u00f3n de Desempe\u00f1o (2 horas)","text":""},{"location":"content/p6/#instrucciones","title":"Instrucciones","text":""},{"location":"content/p6/#1-configuracion-inicial-del-proyecto","title":"1. Configuraci\u00f3n Inicial del Proyecto","text":"<ul> <li>Crea una carpeta para tu proyecto.</li> <li>Inicializa un repositorio Git dentro de la carpeta.</li> <li>Crea un archivo <code>.gitignore</code> e incluye reglas para ignorar el entorno virtual.</li> </ul>"},{"location":"content/p6/#2-creacion-del-entorno-virtual","title":"2. Creaci\u00f3n del Entorno Virtual","text":"<ul> <li>Crea un entorno virtual dentro de tu proyecto.</li> <li>Activa el entorno virtual.</li> </ul>"},{"location":"content/p6/#3-instalacion-de-dependencias","title":"3. Instalaci\u00f3n de Dependencias","text":"<ul> <li>Instala la biblioteca <code>openpyxl</code> usando <code>pip</code>.</li> <li>Genera un archivo <code>requirements.txt</code> que contenga todas las dependencias instaladas.</li> </ul>"},{"location":"content/p6/#4-desarrollo-del-codigo","title":"4. Desarrollo del C\u00f3digo","text":"<ul> <li>Crea un archivo <code>main.py</code> en la ra\u00edz del proyecto.</li> <li>Realiza el Tutorial openpyxl (Necesario para completar el ejercicio)</li> <li>Implementa el ejercicio asignado.</li> </ul>"},{"location":"content/p6/#5-subir-el-proyecto-a-github","title":"5. Subir el Proyecto a GitHub","text":"<ul> <li>Crea un repositorio en GitHub.</li> <li>Conecta tu repositorio local con el remoto.</li> <li>A\u00f1ade todos los archivos necesarios al staging area y realiza el primer commit.</li> <li>Sube los cambios al repositorio remoto.</li> </ul>"},{"location":"content/p6/#6-documentacion-en-readmemd","title":"6. Documentaci\u00f3n en README.md","text":"<ul> <li>Crea un archivo <code>README.md</code> en la ra\u00edz del proyecto.</li> <li>Incluye una descripci\u00f3n del proyecto, instrucciones de instalaci\u00f3n y uso del programa.</li> <li>Aseg\u00farate de que las instrucciones sean claras y completas.</li> </ul>"},{"location":"content/p6/#7-entrega","title":"7. Entrega","text":"<ul> <li>Comparte el enlace del repositorio en GitHub en el archivo de evidencias (semana 6).</li> <li>Verifica que el repositorio incluya todos los archivos necesarios (<code>main.py</code>, <code>requirements.txt</code>, <code>.gitignore</code>, <code>README.md</code>) y que funcione correctamente.</li> </ul>"},{"location":"content/p6/#tutorial-y-ejercicios","title":"Tutorial y ejercicios","text":""},{"location":"content/p6/#asignacion-de-ejercicios","title":"Asignaci\u00f3n de Ejercicios","text":"Nombre Ejercicio KEVIN ALFONSO OLIVELLA FELIZZOLA 1 MARVIN ESTEBAN GARCIA CORREA 2 PAOLA ANDREA MURILLO JIMENEZ 3 CRISTIAN DAVID BEDOYA SALDARRIAGA 4 EMANUEL SOLARTE ORDO\u00d1EZ 5 JOSUE DAVID PADILLA OCAMPO 1 CRISTIAN STEVEN RAMIREZ GIRALDO 2 MELISSA SUAREZ PINEDA 3 MARIA ALEJANDRA MORALES RIOS 4 MARIA ALEJANDRA SUAREZ 5 ANDRES FELIPE TOBON ARENAS 1 DANIEL SEPULVEDA HERRERA 2 ANDRES FELIPE MACIAS LOPEZ 3 SEBASTIAN ALVAREZ ZAPATA 4 JUAN DIEGO PALACIO OSPINA 5 DUNIER CAMILO GALVIS MORALES 1 DANIELA MEJIA OSORIO 2 SHEYLA RODELO DIAZ 3 MARIANA MARULANDA AGUILAR 4 GENESSIS SKARLET CASTILLO SUAREZ 5 CARLOS ALBERTO QUIROZ MU\u00d1OZ 1 JULIAN ESNEYDER CARMONA AGUDELO 2 JAMILTON HOYOS PEREZ 3 EIMER SANTIAGO MENCO ARRIETA 4 Tutorial openpyxlEjercicio 1Ejercicio 2Ejercicio 3Ejercicio 4Ejercicio 5 <p>1. Instalaci\u00f3n   Primero, instala <code>openpyxl</code> si no lo tienes. En la terminal escribe:</p> <pre><code>pip install openpyxl\n</code></pre> <p>2. Crear un archivo Excel   Vamos a hacer un archivo Excel desde cero:</p> <pre><code>import openpyxl\n\n# Crear un archivo nuevo\nlibro = openpyxl.Workbook()\n\n# Guardarlo con un nombre\nlibro.save(\"mi_primer_excel.xlsx\")\n\nprint(\"\u00a1Archivo creado!\")\n</code></pre> <p>3. Escribir algo simple   Ahora escribiremos unas palabras en el archivo:</p> <pre><code>import openpyxl\n\n# Crear un archivo nuevo\nlibro = openpyxl.Workbook()\n\n# Elegir la hoja donde escribir (la que ya viene)\nhoja = libro.active\n\n# Escribir en celdas como si fuera una cuadr\u00edcula\nhoja[\"A1\"] = \"Hola\"\nhoja[\"B1\"] = \"Mundo\"\n\n# Guardar el archivo\nlibro.save(\"mi_primer_excel.xlsx\")\n\nprint(\"\u00a1Texto agregado!\")\n</code></pre> <p>4. Leer lo que escribimos   Vamos a abrir el archivo y ver qu\u00e9 hay:</p> <pre><code>import openpyxl\n\n# Abrir el archivo que ya hicimos\nlibro = openpyxl.load_workbook(\"mi_primer_excel.xlsx\")\n\n# Elegir la hoja\nhoja = libro.active\n\n# Leer lo que est\u00e1 en A1 y B1\nprint(hoja[\"A1\"].value)  # Muestra \"Hola\"\nprint(hoja[\"B1\"].value)  # Muestra \"Mundo\"\n\n# No necesitamos guardarlo porque solo le\u00edmos\n</code></pre> <p>5. Cambiar algo   Por \u00faltimo, cambiemos una palabra:</p> <pre><code>import openpyxl\n\n# Abrir el archivo\nlibro = openpyxl.load_workbook(\"mi_primer_excel.xlsx\")\nhoja = libro.active\n\n# Cambiar lo que est\u00e1 en B1\nhoja[\"B1\"] = \"Amigos\"\n\n# Guardar el cambio\nlibro.save(\"mi_primer_excel.xlsx\")\n\nprint(\"\u00a1Cambio hecho!\")\n</code></pre> <p>Lista de estudiantes y notas</p> <p>Pide al usuario 3 nombres de estudiantes y una nota para cada uno. Almacena los datos en un diccionario y escribe los nombres en la columna A y las notas en la columna B de un archivo Excel.</p> <pre><code>import openpyxl\n\n# PARTE 1: Crear diccionario y entrada de datos\n# Crea un diccionario vac\u00edo llamado 'estudiantes'\n# Usa un ciclo for para pedir 3 nombres y notas (convierte la nota a float)\n# Guarda cada par nombre-nota en el diccionario\n# --- Escribe tu c\u00f3digo aqu\u00ed ---\n\n\n# PARTE 2: Crear archivo Excel\n# Crea un nuevo libro de trabajo con openpyxl.Workbook()\nlibro = # --- Completa aqu\u00ed ---\n# Obt\u00e9n la hoja activa\nhoja = # --- Completa aqu\u00ed ---\n\n# PARTE 3: Escribir encabezados\n# Escribe \"Estudiante\" en A1 y \"Nota\" en B1\n# --- Escribe tu c\u00f3digo aqu\u00ed ---\n\n# PARTE 4: Escribir datos con ciclo\nfila = 2\n# Usa un ciclo for para recorrer el diccionario\n# Escribe el nombre en la columna A y la nota en la columna B\n# Incrementa 'fila' en cada iteraci\u00f3n\n# --- Escribe tu c\u00f3digo aqu\u00ed ---\n\n# PARTE 5: Guardar archivo\n# Guarda el archivo como \"ejercicio1.xlsx\"\n# --- Escribe tu c\u00f3digo aqu\u00ed ---\nprint(\"\u00a1Ejercicio 1 guardado en ejercicio1.xlsx!\")\n</code></pre> <p>Estudiantes aprobados</p> <p>Solicita al usuario 3 nombres de estudiantes y sus notas. Almacena en un diccionario y escribe en la columna A del Excel solo los nombres de quienes tienen nota mayor o igual a 60.</p> <pre><code>import openpyxl\n\n# PARTE 1: Crear diccionario y entrada de datos\n# Crea un diccionario vac\u00edo llamado 'estudiantes'\n# Usa un ciclo for para pedir 3 nombres y notas (convierte la nota a float)\n# Guarda cada par nombre-nota en el diccionario\n# --- Escribe tu c\u00f3digo aqu\u00ed ---\n\n# PARTE 2: Crear archivo Excel\n# Crea un nuevo libro de trabajo\nlibro = # --- Completa aqu\u00ed ---\n# Obt\u00e9n la hoja activa\nhoja = # --- Completa aqu\u00ed ---\n\n# PARTE 3: Escribir encabezado\n# Escribe \"Aprobados (&gt;=60)\" en A1\n# --- Escribe tu c\u00f3digo aqu\u00ed ---\n\n# PARTE 4: Escribir aprobados con ciclo y condicional\nfila = 2\n# Usa un ciclo for para recorrer el diccionario\n# Si la nota es &gt;= 60, escribe el nombre en la columna A y aumenta 'fila'\n# --- Escribe tu c\u00f3digo aqu\u00ed ---\n\n# PARTE 5: Guardar archivo\n# Guarda el archivo como \"ejercicio2.xlsx\"\n# --- Escribe tu c\u00f3digo aqu\u00ed ---\nprint(\"\u00a1Ejercicio 2 guardado en ejercicio2.xlsx!\")\n</code></pre> <p>Clasificaci\u00f3n de notas</p> <p>Pide al usuario 3 nombres de estudiantes y sus notas. Almacena en un diccionario y escribe en la columna A los nombres y en la columna B \"Bueno\" si la nota es mayor a 70, o \"Regular\" si es menor o igual a 70.</p> <pre><code>import openpyxl\n\n# PARTE 1: Crear diccionario y entrada de datos\n# Crea un diccionario vac\u00edo llamado 'estudiantes'\n# Usa un ciclo for para pedir 3 nombres y notas (convierte la nota a float)\n# Guarda cada par nombre-nota en el diccionario\n# --- Escribe tu c\u00f3digo aqu\u00ed ---\n\n# PARTE 2: Crear archivo Excel\n# Crea un nuevo libro de trabajo\nlibro = # --- Completa aqu\u00ed ---\n# Obt\u00e9n la hoja activa\nhoja = # --- Completa aqu\u00ed ---\n\n# PARTE 3: Escribir encabezados\n# Escribe \"Estudiante\" en A1 y \"Clasificaci\u00f3n\" en B1\n# --- Escribe tu c\u00f3digo aqu\u00ed ---\n\n# PARTE 4: Escribir datos con ciclo y condicional\nfila = 2\n# Usa un ciclo for para recorrer el diccionario\n# Escribe el nombre en A y \"Bueno\" o \"Regular\" en B seg\u00fan si la nota &gt; 70\n# Incrementa 'fila' en cada iteraci\u00f3n\n# --- Escribe tu c\u00f3digo aqu\u00ed ---\n\n# PARTE 5: Guardar archivo\n# Guarda el archivo como \"ejercicio3.xlsx\"\n# --- Escribe tu c\u00f3digo aqu\u00ed ---\nprint(\"\u00a1Ejercicio 3 guardado en ejercicio3.xlsx!\")\n</code></pre> <p>Nombres cortos</p> <p>Pide al usuario 3 nombres de estudiantes y sus notas. Guarda en un diccionario y escribe en la columna A del Excel solo los nombres con 4 letras o menos.</p> <pre><code>import openpyxl\n\n# PARTE 1: Crear diccionario y entrada de datos\n# Crea un diccionario vac\u00edo llamado 'estudiantes'\n# Usa un ciclo for para pedir 3 nombres y notas (convierte la nota a float)\n# Guarda cada par nombre-nota en el diccionario\n# --- Escribe tu c\u00f3digo aqu\u00ed ---\n\n# PARTE 2: Crear archivo Excel\n# Crea un nuevo libro de trabajo\nlibro = # --- Completa aqu\u00ed ---\n# Obt\u00e9n la hoja activa\nhoja = # --- Completa aqu\u00ed ---\n\n# PARTE 3: Escribir encabezado\n# Escribe \"Nombres cortos (&lt;=4 letras)\" en A1\n# --- Escribe tu c\u00f3digo aqu\u00ed ---\n\n# PARTE 4: Escribir nombres cortos con ciclo y condicional\nfila = 2\n# Usa un ciclo for para recorrer el diccionario\n# Si el nombre tiene &lt;= 4 letras, escr\u00edbelo en la columna A y aumenta 'fila'\n# --- Escribe tu c\u00f3digo aqu\u00ed ---\n\n# PARTE 5: Guardar archivo\n# Guarda el archivo como \"ejercicio4.xlsx\"\n# --- Escribe tu c\u00f3digo aqu\u00ed ---\nprint(\"\u00a1Ejercicio 4 guardado en ejercicio4.xlsx!\")\n</code></pre> <p>Promedio de notas</p> <p>Solicita al usuario 3 nombres de estudiantes y sus notas. Guarda en un diccionario y escribe los nombres en la columna A y el promedio de las notas en B1 del Excel.</p> <pre><code>import openpyxl\n\n# PARTE 1: Crear diccionario y entrada de datos\n# Crea un diccionario vac\u00edo llamado 'estudiantes'\n# Usa un ciclo for para pedir 3 nombres y notas (convierte la nota a float)\n# Guarda cada par nombre-nota en el diccionario\n# --- Escribe tu c\u00f3digo aqu\u00ed ---\n\n# PARTE 2: Calcular promedio\n# Usa sum() y len() con el diccionario para calcular el promedio de las notas\npromedio = # --- Completa aqu\u00ed ---\n\n# PARTE 3: Crear archivo Excel\n# Crea un nuevo libro de trabajo\nlibro = # --- Completa aqu\u00ed ---\n# Obt\u00e9n la hoja activa\nhoja = # --- Completa aqu\u00ed ---\n\n# PARTE 4: Escribir datos\n# Escribe \"Nombres\" en A1 y \"Promedio\" en B1\n# Escribe el promedio en B2\n# --- Escribe tu c\u00f3digo aqu\u00ed ---\nfila = 2\n# Usa un ciclo for para escribir los nombres en la columna A\n# --- Escribe tu c\u00f3digo aqu\u00ed ---\n\n# PARTE 5: Guardar archivo\n# Guarda el archivo como \"ejercicio5.xlsx\"\n# --- Escribe tu c\u00f3digo aqu\u00ed ---\nprint(\"\u00a1Ejercicio 5 guardado en ejercicio5.xlsx!\")\n</code></pre>"},{"location":"content/p6/#criterios-de-evaluacion","title":"Criterios de Evaluaci\u00f3n","text":"Criterio Puntos Descripci\u00f3n Configuraci\u00f3n del entorno virtual 10 Creaci\u00f3n y activaci\u00f3n correcta del entorno virtual. Instalaci\u00f3n de dependencias 10 Instalaci\u00f3n de la biblioteca requerida (<code>openpyxl</code>). Archivo <code>requirements.txt</code> 10 Generaci\u00f3n correcta del archivo de requerimientos. Archivo <code>.gitignore</code> 10 Inclusi\u00f3n de reglas adecuadas para ignorar archivos innecesarios. C\u00f3digo funcional (<code>main.py</code>) 20 Implementaci\u00f3n correcta del c\u00f3digo Python con <code>openpyxl</code>. Interacci\u00f3n con el usuario 10 El programa debe solicitar datos por consola y manejarlos correctamente. Subida a GitHub 20 Repositorio correctamente configurado y subido a GitHub. Documentaci\u00f3n en <code>README.md</code> 20 Instrucciones claras y completas en el archivo <code>README.md</code>."},{"location":"content/p7/","title":"Semana 7 - Pandas","text":"<p>https://pandas.pydata.org/docs/index.html</p> <p>Pandas es una biblioteca de software libre para el an\u00e1lisis de datos y la manipulaci\u00f3n de estructuras de datos en  Python. Es una herramienta muy popular entre cient\u00edficos de datos, analistas de datos y otros profesionales que trabajan con datos.</p>"},{"location":"content/p7/#que-ofrece-pandas","title":"\u00bfQu\u00e9 ofrece Pandas?","text":"<ul> <li>Estructuras de datos potentes:\u00a0Pandas ofrece dos estructuras de datos principales: Series y DataFrames. Las Series son vectores unidimensionales, mientras que los DataFrames son matrices bidimensionales con etiquetas de fila y columna. Estas estructuras de datos permiten almacenar y manipular datos de forma eficiente.</li> <li>Amplia gama de funciones:\u00a0Pandas ofrece una amplia gama de funciones para la limpieza de datos, el an\u00e1lisis estad\u00edstico, la visualizaci\u00f3n de datos y mucho m\u00e1s. Estas funciones permiten realizar an\u00e1lisis de datos complejos de forma r\u00e1pida y sencilla.</li> <li>F\u00e1cil de usar:\u00a0Pandas tiene una sintaxis intuitiva y f\u00e1cil de aprender, lo que la convierte en una herramienta accesible para usuarios de todos los niveles.</li> </ul>"},{"location":"content/p7/#como-instalar-pandas","title":"\u00bfC\u00f3mo instalar Pandas?","text":""},{"location":"content/p7/#usando-pip","title":"Usando pip","text":"<ul> <li>Abra una terminal o s\u00edmbolo del sistema.</li> <li>Ejecute el siguiente comando:</li> </ul> <pre><code>pip install pandas\n</code></pre>"},{"location":"content/p7/#series-en-pandas","title":"Series en Pandas","text":"<p>Una Series en Pandas es una estructura de datos unidimensional similar a un array de Python. Se caracteriza por:</p> <ul> <li>Almacenar datos:\u00a0Puede contener diferentes tipos de datos, como n\u00fameros, cadenas de texto, fechas y valores booleanos.</li> <li>Tener un \u00edndice:\u00a0Cada elemento de la serie tiene un \u00edndice \u00fanico que lo identifica.</li> <li>Ser ordenable:\u00a0Se puede ordenar por el \u00edndice o por los valores que contiene.</li> <li>Permitir operaciones:\u00a0Se pueden realizar operaciones matem\u00e1ticas y estad\u00edsticas con otras Series o con valores escalares.</li> </ul>"},{"location":"content/p7/#ejemplo-de-series","title":"Ejemplo de Series:","text":"<pre><code>import pandas as pd\n\ntemperaturas = pd.Series([20, 25, 30, 22, 28])\n\n# Acceder al valor del \u00edndice 2\nprint(temperaturas[2])\n\n# Calcular la media\nprint(temperaturas.mean())\n\n# Ordenar por valores\nprint(temperaturas.sort_values())\n</code></pre>"},{"location":"content/p7/#dataframes-en-pandas","title":"DataFrames en Pandas","text":"<p>Un DataFrame en Pandas es una estructura de datos bidimensional similar a una hoja de c\u00e1lculo. Se caracteriza por:</p> <ul> <li>Almacenar datos:\u00a0Puede contener diferentes tipos de datos en diferentes columnas.</li> <li>Tener un \u00edndice:\u00a0Cada fila del DataFrame tiene un \u00edndice \u00fanico que la identifica.</li> <li>Tener nombres de columna:\u00a0Cada columna del DataFrame tiene un nombre que identifica el tipo de dato que contiene.</li> <li>Permitir operaciones:\u00a0Se pueden realizar operaciones matem\u00e1ticas y estad\u00edsticas con otros DataFrames o con valores escalares. Ejemplo de DataFrame:</li> </ul> <pre><code>import pandas as pd\n\ndatos = {\n    \"Nombre\": [\"Pedro\", \"Mar\u00eda\", \"Juan\"],\n    \"Edad\": [20, 25, 30],\n    \"Ciudad\": [\"Medell\u00edn\", \"Bogot\u00e1\", \"Cali\"]\n}\n\ndf = pd.DataFrame(datos)\n\n# Ordenar por la columna \"Nombre\"\nprint(df)\n</code></pre>"},{"location":"content/p7/#relacion-entre-series-y-dataframes","title":"Relaci\u00f3n entre Series y DataFrames:","text":"<ul> <li>Una Series puede ser vista como un DataFrame con una sola columna.</li> <li>Un DataFrame puede ser creado a partir de una o m\u00e1s Series.</li> </ul>"},{"location":"content/p7/#ventajas-de-usar-dataframes-y-series","title":"Ventajas de usar DataFrames y Series:","text":"<ul> <li>Permiten almacenar y organizar datos de forma eficiente.</li> <li>Facilitan la limpieza y el an\u00e1lisis de datos.</li> <li>Ofrecen una amplia gama de funciones para la manipulaci\u00f3n de datos.</li> <li>Permiten crear visualizaciones de datos atractivas e informativas.</li> </ul>"},{"location":"content/p7/#diferencias-clave-entre-series-y-dataframes-en-pandas","title":"Diferencias clave entre Series y DataFrames en Pandas:","text":"Info Caracter\u00edstica Series DataFrame Dimensi\u00f3n Una dimensi\u00f3n (como una columna) Dos dimensiones (como una hoja de c\u00e1lculo) \u00cdndice Un solo \u00edndice (etiqueta cada elemento) \u00cdndices de filas y columnas Tipos de datos Un solo tipo de dato por Serie Diferentes tipos de datos por columna Estructura Como una columna Como una tabla o hoja de c\u00e1lculo Analog\u00eda Columna de una hoja de c\u00e1lculo Hoja de c\u00e1lculo completa Uso com\u00fan Datos de series de tiempo, datos con un solo atributo Datos tabulares, conjuntos de datos con m\u00faltiples atributos Ejemplo <code>pd.Series([10, 20, 30])</code> <code>pd.DataFrame({'Nombre': ['Alicia', 'Bob'], 'Edad': [25, 30]})</code>"},{"location":"content/p7/#creando-dataframe","title":"Creando DataFrame","text":""},{"location":"content/p7/#crear-un-dataframe-a-partir-de-series-en-pandas","title":"Crear un DataFrame a partir de Series en Pandas:","text":"<p>Ejemplo:</p> <pre><code>import pandas as pd\n\n# Crear las Series\nnombres = pd.Series(['Alicia', 'Bob', 'Carlos'])\nedades = pd.Series([25, 30, 28])\nciudades = pd.Series(['Nueva York', 'Londres', 'Par\u00eds'])\n\n# Crear el DataFrame a partir de las Series\nmi_dataframe = pd.DataFrame({'Nombre': nombres, 'Edad': edades, 'Ciudad': ciudades})\n\n# Imprimir el DataFrame\nprint(mi_dataframe)\n</code></pre> <p>Salida:</p> <pre><code>      Nombre   Edad      Ciudad\n0      Alicia   25        Nueva York\n1      Bob      30        Londres\n2      Carlos   28        Par\u00eds\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>Crear las Series: Se crean tres Series, una para cada columna del DataFrame: <code>nombres</code>, <code>edades</code> y <code>ciudades</code>.</li> <li>Crear el DataFrame: Se crea el DataFrame <code>mi_dataframe</code> usando un diccionario. Las claves del diccionario son los nombres de las columnas, y los valores son las Series que contienen los datos para cada columna.</li> <li>Imprimir el DataFrame: Se imprime el DataFrame para ver el resultado.</li> </ul> <p>Puntos Clave:</p> <ul> <li>Cada Serie representa una columna del DataFrame.</li> <li>El diccionario que se usa para crear el DataFrame asocia los nombres de las columnas con las Series correspondientes.</li> </ul>"},{"location":"content/p7/#dataframe-desde-un-diccionario","title":"DataFrame desde un diccionario:","text":"<pre><code>import pandas as pd\n\n# Crear un diccionario\ndatos = {\"Nombre\": [\"Ana\", \"Juan\", \"Pedro\"],\n         \"Edad\": [25, 30, 35],\n         \"Ciudad\": [\"Madrid\", \"Barcelona\", \"Sevilla\"]}\n\n# Convertir el diccionario a un DataFrame\ndf = pd.DataFrame(datos)\n\nprint(df)\n\n# Salida:\n#   Nombre  Edad   Ciudad\n# 0    Ana     25  Madrid\n# 1    Juan     30  Barcelona\n# 2   Pedro     35  Sevilla\n</code></pre>"},{"location":"content/p7/#explicacion","title":"Explicaci\u00f3n:","text":"<ul> <li>Se crea un diccionario con las claves como nombres de las columnas y los valores como listas que representan las filas.</li> <li>La funci\u00f3n\u00a0<code>pd.DataFrame</code>\u00a0convierte el diccionario en un DataFrame.</li> </ul>"},{"location":"content/p7/#dataframe-desde-una-lista-de-diccionarios","title":"DataFrame desde una lista de diccionarios:","text":"<pre><code>import pandas as pd\n\ndatos = [{\"Nombre\": \"Ana\", \"Edad\": 25, \"Ciudad\": \"Madrid\"},\n         {\"Nombre\": \"Juan\", \"Edad\": 30, \"Ciudad\": \"Barcelona\"},\n         {\"Nombre\": \"Pedro\", \"Edad\": 35, \"Ciudad\": \"Sevilla\"}]\n\ndf = pd.DataFrame(datos)\n\nprint(df)\n\n# Salida:\n#   Nombre  Edad   Ciudad\n# 0    Ana     25  Madrid\n# 1    Juan     30  Barcelona\n# 2   Pedro     35  Sevilla\n</code></pre>"},{"location":"content/p7/#explicacion_1","title":"Explicaci\u00f3n:","text":"<ul> <li>Se crea una lista de diccionarios, donde cada diccionario representa una fila del DataFrame.</li> <li>La funci\u00f3n\u00a0<code>pd.DataFrame</code>\u00a0convierte la lista de diccionarios en un DataFrame.</li> </ul>"},{"location":"content/p7/#dataframe-desde-una-lista-de-listas","title":"DataFrame desde una lista de listas:","text":"<pre><code>import pandas as pd\n\ndatos = [[\"Ana\", 25, \"Madrid\"],\n         [\"Juan\", 30, \"Barcelona\"],\n         [\"Pedro\", 35, \"Sevilla\"]]\n\ndf = pd.DataFrame(datos, columns=[\"Nombre\", \"Edad\", \"Ciudad\"])\n\nprint(df)\n\n# Salida:\n#   Nombre  Edad   Ciudad\n# 0    Ana     25  Madrid\n# 1    Juan     30  Barcelona\n# 2   Pedro     35  Sevilla\n</code></pre>"},{"location":"content/p7/#explicacion_2","title":"Explicaci\u00f3n:","text":"<ul> <li>Se crea una lista de listas, donde cada lista representa una fila del DataFrame.</li> <li>La funci\u00f3n\u00a0<code>pd.DataFrame</code>\u00a0convierte la lista de listas en un DataFrame, y se especifican los nombres de las columnas.</li> </ul>"},{"location":"content/p7/#dataframe-desde-un-archivo-csv","title":"DataFrame desde un archivo CSV:","text":"<pre><code>import pandas as pd\n\ndf = pd.read_csv(\"data.csv\")\n\nprint(df)\n\n# Salida:\n#   Nombre  Edad   Ciudad\n# 0    Ana     25  Madrid\n# 1    Juan     30  Barcelona\n# 2   Pedro     35  Sevilla\n</code></pre>"},{"location":"content/p7/#explicacion_3","title":"Explicaci\u00f3n:","text":"<ul> <li>Se usa la funci\u00f3n\u00a0<code>pd.read_csv</code>\u00a0para leer un archivo CSV y convertirlo en un DataFrame.</li> </ul> Info <p>C\u00f3mo crear archivos CSV con encabezados desde Python, utilizando la biblioteca <code>csv</code>:</p> <pre><code>import csv\n\n# Define los nombres de las columnas\ncolumn_names = [\"Nombre\", \"Edad\", \"Ciudad\"]\n\n# Crea una lista de datos para cada fila\ndata = [\n    [\"Ana\", 25, \"Madrid\"],\n    [\"Juan\", 30, \"Barcelona\"],\n    [\"Pedro\", 35, \"Sevilla\"]\n]\n\n# Abre el archivo CSV en modo escritura\nwith open(\"data.csv\", \"w\", newline=\"\") as file:\n    writer = csv.writer(file)\n\n    # Escribe la fila de encabezados\n    writer.writerow(column_names)\n\n    # Escribe cada fila de datos\n    for row in data:\n        writer.writerow(row)\n\nprint(\"Archivo CSV creado correctamente.\")\n</code></pre>"},{"location":"content/p7/#dataframe-desde-una-url","title":"DataFrame desde una URL:","text":"<pre><code>import pandas as pd\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/datasets/data/master/people.csv\")\n\nprint(df)\n\n# Salida:\n#   Name  Age  City\n# 0    Ana     25  Madrid\n# 1    Juan     30  Barcelona\n# 2   Pedro     35  Sevilla\n</code></pre>"},{"location":"content/p7/#explicacion_4","title":"Explicaci\u00f3n:","text":"<ul> <li>Se usa la funci\u00f3n\u00a0<code>pd.read_csv</code>\u00a0para leer un archivo CSV desde una URL y convertirlo en un DataFrame.</li> </ul>"},{"location":"content/p7/#dataframe-desde-una-consulta-sql","title":"DataFrame desde una consulta SQL:","text":"<pre><code>import pandas as pd\n\nfrom sqlalchemy import create_engine\n\n# Crear un motor de base de datos\nengine = create_engine(\"sqlite:///database.sqlite\")\n\n# Leer la tabla \"personas\" en un DataFrame\ndf = pd.read_sql_table(\"personas\", engine)\n\nprint(df)\n\n# Salida:\n#   Nombre  Edad   Ciudad\n# 0    Ana     25  Madrid\n# 1    Juan     30  Barcelona\n# 2   Pedro     35  Sevilla\n</code></pre>"},{"location":"content/p7/#explicacion_5","title":"Explicaci\u00f3n:","text":"<ul> <li>Se crea un motor de base de datos usando\u00a0<code>sqlalchemy</code>.</li> <li>La funci\u00f3n\u00a0<code>pd.read_sql_table</code>\u00a0se usa para leer una tabla de la base de datos y convertirla en un DataFrame.</li> </ul>"},{"location":"content/p7/#dataframe-desde-una-hoja-de-calculo-de-excel","title":"DataFrame desde una hoja de c\u00e1lculo de Excel:","text":"<pre><code>import pandas as pd\n\ndf = pd.read_excel(\"data.xlsx\")\n\nprint(df)\n\n# Salida:\n#   Nombre  Edad   Ciudad\n# 0    Ana     25  Madrid\n# 1    Juan     30  Barcelona\n# 2   Pedro     35  Sevilla\n</code></pre>"},{"location":"content/p7/#explicacion_6","title":"Explicaci\u00f3n:","text":"<ul> <li>Se usa la funci\u00f3n\u00a0<code>pd.read_excel</code>\u00a0para leer una hoja de c\u00e1lculo de Excel y convertirla en un DataFrame.</li> </ul>"},{"location":"content/p7/#dataframe-desde-un-archivo-json","title":"DataFrame desde un archivo JSON:","text":"<pre><code>[\n  {\n    \"Nombre\": \"Ana\",\n    \"Edad\": 25,\n    \"Ciudad\": \"Madrid\"\n  },\n  {\n    \"Nombre\": \"Juan\",\n    \"Edad\": 30,\n    \"Ciudad\": \"Barcelona\"\n  },\n  {\n    \"Nombre\": \"Pedro\",\n    \"Edad\": 35,\n    \"Ciudad\": \"Sevilla\"\n  }\n]\n</code></pre> <pre><code>import pandas as pd\n\ndf = pd.read_json(\"data.json\")\n\nprint(df)\n\n# Salida:\n#   Nombre  Edad   Ciudad\n# 0    Ana     25  Madrid\n# 1    Juan     30  Barcelona\n# 2   Pedro     35  Sevilla\n</code></pre>"},{"location":"content/p7/#explicacion_7","title":"Explicaci\u00f3n:","text":"<ul> <li>Se usa la funci\u00f3n\u00a0<code>pd.read_json</code>\u00a0para leer un archivo JSON y convertirlo en un DataFrame.</li> </ul>"},{"location":"content/p7/#dataframe-desde-un-objeto-numpy","title":"DataFrame desde un objeto NumPy:","text":"<pre><code>import pandas as pd\n\nimport numpy as np\n\ndatos = np.array([[\"Ana\", 25, \"Madrid\"],\n                   [\"Juan\", 30, \"Barcelona\"],\n                   [\"Pedro\", 35, \"Sevilla\"]])\n\ndf = pd.DataFrame(datos, columns=[\"Nombre\", \"Edad\", \"Ciudad\"])\n\nprint(df)\n\n# Salida:\n#   Nombre  Edad   Ciudad\n# 0    Ana     25  Madrid\n# 1    Juan     30  Barcelona\n# 2   Pedro     35  Sevilla\n</code></pre>"},{"location":"content/p7/#explicacion_8","title":"Explicaci\u00f3n:","text":"<ul> <li>Se crea un array de NumPy con las filas y columnas del DataFrame.</li> <li>La funci\u00f3n\u00a0<code>pd.DataFrame</code>\u00a0convierte el array de NumPy en un DataFrame, y se especifican los nombres de las columnas.</li> </ul>"},{"location":"content/p7/#dataframe-desde-firebase","title":"DataFrame desde Firebase:","text":"<pre><code>pip install --upgrade firebase-admin\n</code></pre> <pre><code>import pandas as pd\n\nimport firebase_admin\nfrom firebase_admin import credentials\nfrom firebase_admin import firestore\n\n# Use a service account.\ncred = credentials.Certificate('key.json')\napp = firebase_admin.initialize_app(cred)\ndb = firestore.client()\n\n# Get data from a Firestore collection\nusers = db.collection('user').stream()\n# Convert data to a list of dictionaries\nusers_data = [doc.to_dict() for doc in users]\n# Create DataFrame\ndf = pd.DataFrame(users_data)\n\nprint(df)\n</code></pre>"},{"location":"content/p7/#explicacion_9","title":"Explicaci\u00f3n:","text":"<p>1. Importaciones:</p> <ul> <li><code>pandas as pd</code>: Importa la biblioteca Pandas para manipulaci\u00f3n de datos y creaci\u00f3n de DataFrames.</li> <li> <p>Bibliotecas de Firebase Admin:</p> <ul> <li><code>firebase_admin</code>: Biblioteca base para interactuar con los servicios de Firebase Admin.</li> <li><code>credentials</code>: Proporciona funciones para la autenticaci\u00f3n con Firebase.</li> <li><code>firestore</code>: Proporciona acceso a la base de datos Firestore. 2. Autenticaci\u00f3n:</li> </ul> </li> <li> <p><code>cred = credentials.Certificate('key.json')</code>: Carga las credenciales del proyecto Firebase desde un archivo llamado \"key.json\". Este archivo contiene informaci\u00f3n privada y es esencial para un acceso seguro a su proyecto.</p> </li> <li><code>app = firebase_admin.initialize_app(cred)</code>: Inicializa la aplicaci\u00f3n Firebase Admin utilizando las credenciales cargadas.</li> </ul> <p>3. Acceso a Firestore:</p> <ul> <li><code>db = firestore.client()</code>: Crea un objeto cliente para interactuar con la base de datos Firestore.</li> </ul> <p>4. Recuperaci\u00f3n de datos:</p> <ul> <li><code>users = db.collection('user').stream()</code>: Recupera datos de la colecci\u00f3n Firestore llamada \"user\". El m\u00e9todo\u00a0<code>stream()</code>\u00a0recupera datos en tiempo real, lo que significa que puede capturar cualquier cambio que ocurra en la colecci\u00f3n.</li> </ul> <p>5. Conversi\u00f3n de datos:</p> <ul> <li><code>users_data = [doc.to_dict() para doc en users]</code>: Esta l\u00ednea itera a trav\u00e9s de los datos recuperados (representados por objetos\u00a0<code>doc</code>) y convierte cada documento en un diccionario utilizando el m\u00e9todo\u00a0<code>to_dict()</code>. Esto crea una lista de diccionarios, donde cada diccionario representa un solo documento en la colecci\u00f3n.</li> </ul> <p>6. Creaci\u00f3n de DataFrame:</p> <ul> <li><code>df = pd.DataFrame(users_data)</code>: Crea un DataFrame de Pandas a partir de la lista de diccionarios (<code>users_data</code>). El DataFrame tendr\u00e1 columnas que corresponden a las claves de los diccionarios y filas que representan cada documento.</li> </ul> <p>7. Impresi\u00f3n del DataFrame:</p> <ul> <li><code>print(df)</code>: Imprime el DataFrame reci\u00e9n creado en la consola. Esto mostrar\u00e1 los datos recuperados de la colecci\u00f3n Firestore en un formato tabular.</li> </ul>"},{"location":"content/p7/#dataframe-desde-mongodb","title":"DataFrame desde MongoDB:","text":"<pre><code>python3 -m pip install pymongo\n</code></pre> <pre><code>import pymongo\nimport pandas as pd\nfrom pymongo import MongoClient\n\nclient = MongoClient()\n\nclient = MongoClient('mongodb+srv://') #conexi\u00f3n mongodb\ndb = client[\"dbTest\"]\ncollection = db[\"user\"]\n\ncursor = collection.find()\nfor document in cursor:\n    print(document)\n\ndf = pd.DataFrame(list(collection.find()))\nprint(df)\n</code></pre>"},{"location":"content/p7/#explicacion_10","title":"Explicaci\u00f3n:","text":"<p>Importaciones:</p> <ul> <li><code>import pymongo</code>: Importa la biblioteca\u00a0<code>pymongo</code>\u00a0para interactuar con la base de datos MongoDB.</li> <li><code>import pandas as pd</code>: Importa la biblioteca\u00a0<code>pandas</code>\u00a0para crear y manipular DataFrames.</li> <li><code>from pymongo import MongoClient</code>: Importa la clase\u00a0<code>MongoClient</code>\u00a0de la biblioteca\u00a0<code>pymongo</code>\u00a0para establecer la conexi\u00f3n con el servidor MongoDB.</li> </ul> <p>Conexi\u00f3n a MongoDB:</p> <ul> <li><code>client = MongoClient()</code>: Crea una instancia del cliente\u00a0<code>MongoClient</code>\u00a0para conectarse al servidor MongoDB. La versi\u00f3n original dejaba la conexi\u00f3n incompleta, so here we establish a connection to a MongoDB server using the\u00a0<code>MongoClient</code>\u00a0constructor. You'll need to replace\u00a0<code>'mongodb+srv://'</code>\u00a0with the actual connection string for your MongoDB database, including authentication details if required.</li> </ul> <p>Acceso a la base de datos y colecci\u00f3n:</p> <ul> <li><code>db = client[\"dbTest\"]</code>: Obtiene una referencia a la base de datos denominada \"dbTest\". Reemplace \"dbTest\" con el nombre real de su base de datos.</li> <li><code>collection = db[\"user\"]</code>: Obtiene una referencia a la colecci\u00f3n llamada \"user\" dentro de la base de datos \"dbTest\". Reemplace \"user\" con el nombre de su colecci\u00f3n si es diferente.</li> </ul> <p>Lectura de datos:</p> <ul> <li><code>cursor = collection.find()</code>: Realiza una consulta para recuperar todos los documentos de la colecci\u00f3n \"user\". La variable\u00a0<code>cursor</code>\u00a0almacena un iterador que apunta a cada documento encontrado.</li> </ul> <p>Recorrido de documentos:</p> <ul> <li><code>for document in cursor:</code>: Inicia un bucle\u00a0<code>for</code>\u00a0que itera a trav\u00e9s de cada documento en el cursor.</li> <li><code>print(document)</code>: Dentro del bucle, imprime el contenido de cada documento completo en la consola. Esto puede ser \u00fatil para inspeccionar los datos individualmente.</li> </ul> <p>Creaci\u00f3n de DataFrame:</p> <ul> <li><code>df = pd.DataFrame(list(collection.find()))</code>: Convierte los documentos de la colecci\u00f3n \"user\" en un DataFrame de Pandas.<ul> <li><code>collection.find()</code>: Ejecuta la consulta nuevamente para recuperar todos los documentos.</li> <li><code>list()</code>: Convierte el resultado de la consulta en una lista de diccionarios, donde cada diccionario representa un documento.</li> <li><code>pd.DataFrame()</code>: Crea un DataFrame de Pandas a partir de la lista de diccionarios.</li> </ul> </li> </ul> <p>Impresi\u00f3n del DataFrame:</p> <ul> <li><code>print(df)</code>: Imprime el DataFrame completo en la consola. Esto muestra los datos en una estructura tabular con columnas y filas, permitiendo una visualizaci\u00f3n m\u00e1s organizada.</li> </ul>"},{"location":"content/p7/#actividad-1-creacion-de-dataframes-en-pandas-con-streamlit","title":"Actividad 1: Creaci\u00f3n de DataFrames en Pandas con Streamlit","text":"<p>Objetivo: Familiarizarse con la creaci\u00f3n de DataFrames en Pandas y mostrarlos usando Streamlit.</p>"},{"location":"content/p7/#instrucciones","title":"Instrucciones:","text":"<p>Esta actividad debe resolverse en el archivo <code>\ud83d\udccc_M2 Actvidad 1.py</code> del proyecto integrador, el cual ya est\u00e1 configurado con la estructura necesaria.</p> <ul> <li> <p>Importa las bibliotecas necesarias:</p> <ul> <li>Al inicio de <code>\ud83d\udccc_M2 Actvidad 1.py</code>, importa la biblioteca Pandas.</li> <li>Tambi\u00e9n importa la biblioteca Streamlit para crear la interfaz web.</li> </ul> </li> <li> <p>Crea una aplicaci\u00f3n b\u00e1sica en Streamlit:</p> <ul> <li>Escribe una l\u00ednea de c\u00f3digo para mostrar un t\u00edtulo en la p\u00e1gina (por ejemplo, \"Actividad 1 - Creaci\u00f3n de DataFrames\").</li> <li>Agrega una breve descripci\u00f3n debajo del t\u00edtulo explicando el objetivo de la actividad, usando una funci\u00f3n de Streamlit (pista: prueba con <code>st.write</code> o <code>st.markdown</code>).</li> </ul> </li> <li> <p>Crea DataFrames desde diferentes fuentes:</p> <ul> <li> <p>Para cada una de las siguientes opciones, tu tarea es crear un DataFrame utilizando Pandas y luego mostrarlo en la interfaz de Streamlit usando la funci\u00f3n <code>st.dataframe()</code>. A continuaci\u00f3n, te explico paso a paso qu\u00e9 hacer en cada caso, con detalles para que entiendas el proceso:</p> </li> <li> <p>Diccionario:</p> <ul> <li>Piensa en un diccionario como un conjunto de datos organizados en pares clave-valor, donde las claves ser\u00e1n los nombres de las columnas y los valores ser\u00e1n listas con la informaci\u00f3n.</li> <li>Crea un diccionario en tu script con al menos cuatro claves: \"t\u00edtulo\", \"autor\", \"a\u00f1o de publicaci\u00f3n\" y \"g\u00e9nero\". Para cada clave, asigna una lista con datos de ejemplo sobre libros (por ejemplo, 3 o 4 libros distintos).</li> <li>Convierte este diccionario en un DataFrame usando una funci\u00f3n de Pandas que acepta diccionarios como entrada.</li> <li>En Streamlit, agrega una l\u00ednea de texto (con <code>st.write</code> o similar) que diga \"DataFrame de Libros\" y luego muestra el DataFrame debajo con <code>st.dataframe()</code>.</li> </ul> </li> <li> <p>Lista de diccionarios:</p> <ul> <li>Una lista de diccionarios es como una colecci\u00f3n de filas, donde cada diccionario representa una fila con sus columnas etiquetadas.</li> <li>Crea una lista que contenga varios diccionarios (por ejemplo, 3 o 4). Cada diccionario debe tener las claves \"nombre\", \"poblaci\u00f3n\" y \"pa\u00eds\", con valores correspondientes a ciudades diferentes.</li> <li>Usa Pandas para transformar esta lista en un DataFrame (hay una funci\u00f3n que convierte directamente listas de diccionarios).</li> <li>En Streamlit, escribe un texto descriptivo como \"Informaci\u00f3n de Ciudades\" y muestra el DataFrame resultante con <code>st.dataframe()</code>.</li> </ul> </li> <li> <p>Lista de listas:</p> <ul> <li>Una lista de listas representa datos en forma de tabla, donde cada sublista es una fila, pero necesitas definir los nombres de las columnas por separado.</li> <li>Crea una lista que contenga sublistas (por ejemplo, 3 o 4 filas). Cada sublista debe tener tres elementos: nombre del producto, precio y cantidad en stock (usa datos inventados).</li> <li>Convierte esta lista en un DataFrame con Pandas, especificando los nombres de las columnas (pista: usa el par\u00e1metro <code>columns</code> en la funci\u00f3n de creaci\u00f3n).</li> <li>En Streamlit, a\u00f1ade un texto como \"Productos en Inventario\" y muestra el DataFrame con <code>st.dataframe()</code>.</li> </ul> </li> <li> <p>Series:</p> <ul> <li>Las Series son como columnas individuales en Pandas, y puedes combinarlas para formar un DataFrame.</li> <li>Crea tres Series separadas: una con nombres de personas, otra con sus edades y otra con sus ciudades (aseg\u00farate de que tengan la misma cantidad de elementos, por ejemplo, 4 personas).</li> <li>Combina estas Series en un diccionario donde las claves sean los nombres de las columnas (como \"nombre\", \"edad\", \"ciudad\") y luego crea un DataFrame a partir de ese diccionario.</li> <li>En Streamlit, agrega un texto como \"Datos de Personas\" y usa <code>st.dataframe()</code> para mostrar el DataFrame.</li> </ul> </li> <li> <p>Archivo CSV (local):</p> <ul> <li>Un archivo CSV es una forma com\u00fan de almacenar datos tabulares. Necesitar\u00e1s crear uno manualmente primero.</li> <li>Usa un editor de texto o Excel para hacer un archivo peque\u00f1o llamado <code>data.csv</code> con columnas como \"id\", \"nombre\" y \"valor\" (por ejemplo, 3 filas de datos inventados). Gu\u00e1rdalo en una carpeta accesible de tu proyecto.</li> <li>En tu script, usa una funci\u00f3n de Pandas para leer el archivo CSV (pista: busca una funci\u00f3n que empiece con <code>read_</code>) y carga los datos en un DataFrame.</li> <li>En Streamlit, escribe \"Datos desde CSV\" y muestra el DataFrame con <code>st.dataframe()</code>.</li> </ul> </li> <li> <p>Archivo Excel (local):</p> <ul> <li>Similar al CSV, pero en formato Excel. Necesitar\u00e1s un archivo <code>.xlsx</code>.</li> <li>Crea un archivo Excel llamado <code>data.xlsx</code> con columnas como \"producto\", \"precio\" y \"stock\" (por ejemplo, 3 filas). Gu\u00e1rdalo en tu proyecto.</li> <li>En tu script, usa Pandas para leer el archivo Excel (pista: necesitas una funci\u00f3n espec\u00edfica de Pandas y tal vez la biblioteca <code>openpyxl</code> instalada).</li> <li>En Streamlit, agrega un texto como \"Datos desde Excel\" y muestra el DataFrame con <code>st.dataframe()</code>.</li> </ul> </li> <li> <p>Archivo JSON:</p> <ul> <li>JSON es un formato estructurado para datos. Necesitar\u00e1s crear un archivo simple.</li> <li>En un editor de texto, crea un archivo <code>data.json</code> con una lista de objetos (por ejemplo, 3 usuarios con \"nombre\" y \"correo\"). Gu\u00e1rdalo en tu proyecto.</li> <li>Usa Pandas para leer el archivo JSON y convertirlo en un DataFrame (pista: hay una funci\u00f3n <code>read_json</code>).</li> <li>En Streamlit, escribe \"Datos de Usuarios desde JSON\" y muestra el DataFrame con <code>st.dataframe()</code>.</li> </ul> </li> <li> <p>URL:</p> <ul> <li>Puedes cargar datos directamente desde un archivo CSV en l\u00ednea si tienes su direcci\u00f3n web.</li> <li>Busca en internet un archivo CSV p\u00fablico (por ejemplo, datos abiertos sobre clima o poblaci\u00f3n) y copia su URL.</li> <li>En tu script, usa Pandas para leer el CSV desde esa URL (la misma funci\u00f3n que para CSV local, pero con la URL como argumento).</li> <li>En Streamlit, agrega un texto como \"Datos desde URL\" y muestra el DataFrame con <code>st.dataframe()</code>.</li> </ul> </li> <li> <p>Base de datos SQLite:</p> <ul> <li>SQLite es una base de datos ligera que puedes crear y consultar en tu script.</li> <li>Importa la biblioteca <code>sqlite3</code>, crea una conexi\u00f3n a una base de datos (por ejemplo, <code>estudiantes.db</code>), y define una tabla con columnas como \"nombre\" y \"calificaci\u00f3n\". Inserta al menos 3 filas de datos inventados.</li> <li>Usa Pandas para ejecutar una consulta SQL (como \"SELECT * FROM tabla\") y cargar los resultados en un DataFrame (pista: busca <code>read_sql</code>).</li> <li>En Streamlit, escribe \"Datos desde SQLite\" y muestra el DataFrame con <code>st.dataframe()</code>.</li> </ul> </li> <li> <p>Array de NumPy:</p> <ul> <li>NumPy es una biblioteca para trabajar con arreglos num\u00e9ricos que puedes convertir a DataFrames.</li> <li>Importa NumPy y crea un array bidimensional (por ejemplo, 3 filas y 3 columnas) con datos num\u00e9ricos o mixtos.</li> <li>Convierte este array en un DataFrame con Pandas, asignando nombres a las columnas si lo deseas.</li> <li>En Streamlit, agrega \"Datos desde NumPy\" y muestra el DataFrame con <code>st.dataframe()</code>.</li> </ul> </li> <li> <p>Firebase:</p> <ul> <li>Si tienes acceso a Firebase, puedes conectar una base de datos Firestore.</li> <li>Configura un proyecto en Firebase, crea una colecci\u00f3n con datos (por ejemplo, \"usuarios\" con \"nombre\" y \"edad\"), e instala <code>firebase-admin</code>.</li> <li>Usa la biblioteca para recuperar los documentos de la colecci\u00f3n y convi\u00e9rtelos en un DataFrame con Pandas.</li> <li>En Streamlit, escribe \"Datos desde Firebase\" y muestra el DataFrame con <code>st.dataframe()</code>.</li> </ul> </li> <li> <p>MongoDB:</p> <ul> <li>Si tienes MongoDB instalado, puedes usarlo como fuente de datos.</li> <li>Crea una base de datos y una colecci\u00f3n en MongoDB, inserta datos (por ejemplo, 3 documentos con \"nombre\" y \"ciudad\"), e instala <code>pymongo</code>.</li> <li>Conecta tu script a MongoDB, recupera los documentos y convi\u00e9rtelos en un DataFrame con Pandas.</li> <li>En Streamlit, escribe \"Datos desde MongoDB\" y muestra el DataFrame con <code>st.dataframe()</code>.</li> </ul> </li> </ul> </li> <li> <p>Organiza tu p\u00e1gina:</p> </li> <li>Usa funciones de dise\u00f1o de Streamlit (como <code>st.header</code>, <code>st.subheader</code> o <code>st.expander</code>) para separar cada secci\u00f3n de DataFrames.</li> <li> <p>Agrega un texto breve encima de cada DataFrame para describir qu\u00e9 representa.</p> </li> <li> <p>Prueba y explora:</p> </li> <li>Verifica que cada DataFrame se muestre correctamente en la interfaz.</li> <li>Experimenta con funciones adicionales de Streamlit, como agregar una barra lateral o botones, para mejorar la experiencia (opcional).</li> </ul>"},{"location":"content/p8/","title":"Semana 8 - Exploraci\u00f3n de Datos con Pandas y Streamlit","text":""},{"location":"content/p8/#objetivo-de-la-clase","title":"Objetivo de la Clase","text":"<p>En esta clase, los estudiantes aprender\u00e1n a inspeccionar y resumir datos utilizando m\u00e9todos b\u00e1sicos de Pandas como <code>.head()</code>, <code>.tail()</code>, <code>.info()</code>, <code>.describe()</code>, adem\u00e1s de realizar filtrado b\u00e1sico de filas y columnas. Tambi\u00e9n integraremos estas funcionalidades en una aplicaci\u00f3n interactiva con Streamlit para visualizar estad\u00edsticas descriptivas.</p>"},{"location":"content/p8/#preparacion-datasets-de-ejemplo","title":"Preparaci\u00f3n: Datasets de Ejemplo","text":""},{"location":"content/p8/#csv-para-ejemplos-20-registros-tema-registros-de-animales-en-un-refugio","title":"CSV para Ejemplos (20 registros) - Tema: Registros de Animales en un Refugio","text":"<p>Creamos un archivo CSV ficticio con datos de animales registrados en un refugio ficticio. La columna <code>fecha_ingreso</code> se reemplaza por <code>estado_salud</code>. Guardaremos este archivo como <code>refugio_animales.csv</code>.</p> <pre><code>id,especie,edad,peso,estado_salud,adoptado\n1,Perro,3,15.5,Saludable,S\u00ed\n2,Gato,1,4.2,En tratamiento,No\n3,Perro,5,20.0,Saludable,S\u00ed\n4,Conejo,2,1.8,Recuper\u00e1ndose,No\n5,Perro,4,18.0,Saludable,S\u00ed\n6,Gato,2,5.0,En tratamiento,No\n7,Perro,6,22.5,Saludable,S\u00ed\n8,Gato,3,6.1,Recuper\u00e1ndose,No\n9,Conejo,1,1.5,Saludable,S\u00ed\n10,Perro,2,14.0,En tratamiento,No\n11,Gato,4,5.8,Saludable,S\u00ed\n12,Perro,7,25.0,Recuper\u00e1ndose,No\n13,Conejo,3,2.0,Saludable,S\u00ed\n14,Perro,1,12.0,En tratamiento,No\n15,Gato,5,6.5,Saludable,S\u00ed\n16,Perro,3,16.0,Recuper\u00e1ndose,No\n17,Gato,2,4.8,Saludable,S\u00ed\n18,Conejo,4,2.2,En tratamiento,No\n19,Perro,5,19.5,Saludable,S\u00ed\n20,Gato,1,4.0,Recuper\u00e1ndose,No\n</code></pre>"},{"location":"content/p8/#1-introduccion-a-la-exploracion-de-datos","title":"1. Introducci\u00f3n a la Exploraci\u00f3n de Datos","text":"<ul> <li>Concepto: La exploraci\u00f3n de datos es el primer paso para entender un dataset. Nos permite conocer su estructura, identificar patrones o problemas (como datos faltantes) y prepararnos para an\u00e1lisis m\u00e1s avanzados.</li> <li>Herramientas de Pandas:</li> <li><code>.head()</code>: Muestra las primeras filas.</li> <li><code>.tail()</code>: Muestra las \u00faltimas filas.</li> <li><code>.info()</code>: Resumen t\u00e9cnico (tipos de datos, valores nulos).</li> <li><code>.describe()</code>: Estad\u00edsticas descriptivas de columnas num\u00e9ricas.</li> <li>Prop\u00f3sito: Obtener una visi\u00f3n general del dataset.</li> </ul>"},{"location":"content/p8/#2-metodos-basicos-de-exploracion","title":"2. M\u00e9todos B\u00e1sicos de Exploraci\u00f3n","text":"<p>Usaremos el dataset <code>refugio_animales.csv</code> para los ejemplos.</p> <pre><code>import pandas as pd\nimport streamlit as st\n\n# Cargar el dataset\ndf = pd.read_csv(\"refugio_animales.csv\")\n\n# Mostrar las primeras 5 filas\nst.subheader(\"Primeras 5 filas del dataset\")\nst.write(df.head())\n\n# Mostrar las \u00faltimas 3 filas\nst.subheader(\"\u00daltimas 3 filas del dataset\")\nst.write(df.tail(3))\n\n# Informaci\u00f3n general del dataset\nst.subheader(\"Informaci\u00f3n del dataset\")\nst.text(df.info())  # Nota: .info() imprime en consola, usamos st.text para verlo en Streamlit\n\n# Estad\u00edsticas descriptivas\nst.subheader(\"Estad\u00edsticas descriptivas\")\nst.write(df.describe())\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li><code>.head()</code>: Muestra las primeras 5 filas por defecto (ajustable, ej. <code>df.head(3)</code>). Nos da una idea inicial de los datos.</li> <li><code>.tail()</code>: Muestra las \u00faltimas filas (ej. <code>df.tail(3)</code>). \u00datil para verificar el final del dataset.</li> <li><code>.info()</code>: Proporciona:</li> <li>N\u00famero de filas (20) y columnas (6).</li> <li>Tipos de datos: <code>int64</code> para <code>id</code> y <code>edad</code>, <code>float64</code> para <code>peso</code>, <code>object</code> para <code>especie</code>, <code>estado_salud</code> y <code>adoptado</code>.</li> <li>Valores no nulos (en este caso, no hay nulos).</li> <li><code>.describe()</code>: Calcula estad\u00edsticas para columnas num\u00e9ricas (<code>edad</code> y <code>peso</code>):</li> <li>Conteo, promedio, desviaci\u00f3n est\u00e1ndar, m\u00ednimo, m\u00e1ximo y percentiles (25%, 50%, 75%).</li> <li>No incluye columnas categ\u00f3ricas como <code>estado_salud</code>.</li> </ul> <p>Ejemplo en vivo:</p> <ul> <li>Al ejecutar el c\u00f3digo en Streamlit:</li> <li><code>.head()</code> muestra un perro saludable de 3 a\u00f1os, un gato en tratamiento de 1 a\u00f1o, etc.</li> <li><code>.tail(3)</code> muestra un gato en recuperaci\u00f3n de 1 a\u00f1o, entre otros.</li> <li><code>.info()</code> confirma 20 entradas, tipos de datos mixtos y ausencia de nulos.</li> <li><code>.describe()</code> indica que la edad promedio es ~3 a\u00f1os y el peso promedio es ~10.5 kg, con rangos de 1-7 a\u00f1os y 1.5-25 kg.</li> </ul>"},{"location":"content/p8/#3-filtrado-basico-de-filas-y-columnas","title":"3. Filtrado B\u00e1sico de Filas y Columnas","text":"<ul> <li>Selecci\u00f3n de columnas:</li> <li>Una columna: <code>df['especie']</code> (devuelve una Series).</li> <li>Varias columnas: <code>df[['especie', 'edad']]</code> (devuelve un DataFrame).</li> <li>Filtrado de filas:</li> <li>Por \u00edndice: <code>df.iloc[0:5]</code> (primeras 5 filas).</li> <li>Por condici\u00f3n: <code>df[df['edad'] &gt; 3]</code> (animales mayores de 3 a\u00f1os).</li> </ul> <p>Ejemplo en Streamlit: <pre><code># Selecci\u00f3n de columnas\nst.subheader(\"Selecci\u00f3n de columnas: Especie y Edad\")\nst.write(df[['especie', 'edad']])\n\n# Filtrado de filas por edad mayor a 3\nst.subheader(\"Animales mayores de 3 a\u00f1os\")\nst.write(df[df['edad'] &gt; 3])\n</code></pre></p> <p>Explicaci\u00f3n:</p> <ul> <li>Selecci\u00f3n de columnas: Usamos corchetes <code>[]</code>. Una columna devuelve una Series, varias columnas un DataFrame.</li> <li>Filtrado por condici\u00f3n: <code>df['edad'] &gt; 3</code> crea una Serie booleana que filtra el DataFrame.</li> <li>Encadenamiento: Combinamos filtrado y selecci\u00f3n para mostrar solo <code>especie</code> y <code>peso</code> de animales mayores de 3 a\u00f1os.</li> </ul> <p>Ejemplo en vivo:</p> <ul> <li><code>df[df['edad'] &gt; 3]</code> muestra:</li> <li>Perro de 5 a\u00f1os, 20.0 kg (id 3).</li> <li>Perro de 4 a\u00f1os, 18.0 kg (id 5).</li> <li>Gato de 5 a\u00f1os, 6.5 kg (id 15).</li> </ul>"},{"location":"content/p8/#4-integracion-interactiva-en-streamlit","title":"4. Integraci\u00f3n Interactiva en Streamlit","text":"<p>Hacemos que el usuario elija qu\u00e9 explorar de forma interactiva:</p> <pre><code># Men\u00fa interactivo\nopcion = st.selectbox(\"\u00bfQu\u00e9 quieres explorar?\", \n                      [\"Primeras filas\", \"Estad\u00edsticas\", \"Filtrar por edad\"])\n\nif opcion == \"Primeras filas\":\n    st.write(df.head())\nelif opcion == \"Estad\u00edsticas\":\n    st.write(df.describe())\nelif opcion == \"Filtrar por edad\":\n    edad_min = st.slider(\"Edad m\u00ednima\", 0, 7, 2)\n    st.write(df[df['edad'] &gt;= edad_min])\n</code></pre> <p>Explicaci\u00f3n: - <code>st.selectbox()</code>: Men\u00fa desplegable con tres opciones. - <code>st.slider()</code>: Permite elegir una edad m\u00ednima (rango de 0 a 7, valor inicial en 2). - L\u00f3gica condicional: Seg\u00fan la opci\u00f3n:   - \"Primeras filas\" muestra <code>.head()</code>.   - \"Estad\u00edsticas\" muestra <code>.describe()</code>.   - \"Filtrar por edad\" muestra animales con edad mayor o igual al valor del slider.</p> <p>Ejemplo en vivo: - Si el usuario selecciona \"Filtrar por edad\" y ajusta el slider a 4, ver\u00e1:   - Perro de 4 a\u00f1os, 18.0 kg (id 5).   - Perro de 7 a\u00f1os, 25.0 kg (id 12).   - Gato de 5 a\u00f1os, 6.5 kg (id 15).</p>"},{"location":"content/p8/#actividad-practica","title":"Actividad Pr\u00e1ctica","text":"<p>Esta actividad debe resolverse en el archivo \ud83d\udccc_M2 Actvidad 2.py del proyecto integrador.</p>"},{"location":"content/p8/#csv-para-la-actividad-50-registros-tema-estudiantes-en-colombia","title":"CSV para la Actividad (50 registros) - Tema: Estudiantes en Colombia","text":"<p>Este dataset permanece igual al proporcionado anteriormente (<code>estudiantes_colombia.csv</code>). Aqu\u00ed est\u00e1 un extracto para referencia:</p> <pre><code>id,nombre,edad,ciudad,promedio,asistencia\n1,Juan P\u00e9rez,17,Bogot\u00e1,4.5,0.95\n2,Mar\u00eda G\u00f3mez,16,Medell\u00edn,3.8,0.88\n3,Carlos L\u00f3pez,18,Cali,4.2,0.92\n4,Ana Mart\u00ednez,15,Barranquilla,3.5,0.85\n5,Pedro S\u00e1nchez,19,Cartagena,4.8,0.97\n6,Laura Rodr\u00edguez,17,Bogot\u00e1,4.0,0.90\n7,Diego Torres,16,Medell\u00edn,3.9,0.87\n8,Sof\u00eda D\u00edaz,18,Cali,4.3,0.93\n9,Andr\u00e9s Herrera,15,Barranquilla,3.7,0.86\n10,Valentina Ruiz,19,Cartagena,4.6,0.96\n11,Jorge Ram\u00edrez,17,Bogot\u00e1,4.1,0.91\n12,Camila Vargas,16,Medell\u00edn,3.6,0.89\n13,Mateo Castro,18,Cali,4.4,0.94\n14,Luc\u00eda Morales,15,Barranquilla,3.4,0.84\n15,Santiago Ortiz,19,Cartagena,4.7,0.98\n16,Isabella Pe\u00f1a,17,Bogot\u00e1,4.2,0.92\n17,Sebasti\u00e1n Gil,16,Medell\u00edn,3.8,0.88\n18,Paula Rinc\u00f3n,18,Cali,4.5,0.95\n19,Felipe Arias,15,Barranquilla,3.9,0.87\n20,Daniela Mu\u00f1oz,19,Cartagena,4.9,0.99\n21,Juli\u00e1n Vega,17,Bogot\u00e1,4.0,0.90\n22,Natalia Cordero,16,Medell\u00edn,3.7,0.86\n23,Miguel Salazar,18,Cali,4.3,0.93\n24,Carolina Pineda,15,Barranquilla,3.5,0.85\n25,Tom\u00e1s Mendoza,19,Cartagena,4.6,0.96\n26,Clara Ospina,17,Bogot\u00e1,4.1,0.91\n27,Luis Escobar,16,Medell\u00edn,3.8,0.88\n28,Emma Rojas,18,Cali,4.4,0.94\n29,Gabriel Duarte,15,Barranquilla,3.6,0.87\n30,Valeria Sierra,19,Cartagena,4.8,0.97\n31,David Meza,17,Bogot\u00e1,4.2,0.92\n32,Renata Londo\u00f1o,16,Medell\u00edn,3.9,0.89\n33,Nicol\u00e1s Bravo,18,Cali,4.5,0.95\n34,Mariana Tovar,15,Barranquilla,3.7,0.86\n35,Juan Camilo Zuluaga,19,Cartagena,4.7,0.98\n36,Sara Berm\u00fadez,17,Bogot\u00e1,4.0,0.90\n37,H\u00e9ctor Parra,16,Medell\u00edn,3.8,0.88\n38,Lina Agudelo,18,Cali,4.3,0.93\n39,Sim\u00f3n Restrepo,15,Barranquilla,3.5,0.85\n40,Andrea Hoyos,19,Cartagena,4.9,0.99\n41,Esteban Quintero,17,Bogot\u00e1,4.1,0.91\n42,M\u00f3nica Cano,16,Medell\u00edn,3.6,0.89\n43,Javier Paredes,18,Cali,4.4,0.94\n44,Patricia Le\u00f3n,15,Barranquilla,3.9,0.87\n45,Leonardo Giraldo,19,Cartagena,4.6,0.96\n46,Beatriz Uribe,17,Bogot\u00e1,4.2,0.92\n47,Rafael N\u00fa\u00f1ez,16,Medell\u00edn,3.7,0.86\n48,Claudia Zapata,18,Cali,4.5,0.95\n49,Iv\u00e1n C\u00f3rdoba,15,Barranquilla,3.8,0.88\n50,Angela Florez,19,Cartagena,4.8,0.97\n</code></pre> <p>Instrucciones: Usando el dataset <code>estudiantes_colombia.csv</code>, crea una aplicaci\u00f3n en Streamlit que permita al usuario:</p> <ol> <li>Ver las primeras 5 filas y las \u00faltimas 5 filas del dataset.</li> <li>Mostrar un resumen con <code>.info()</code> y <code>.describe()</code>.</li> <li>Seleccionar columnas espec\u00edficas (ej. \"nombre\", \"edad\", \"promedio\") para mostrarlas.</li> <li>Filtrar estudiantes con promedio mayor a un valor definido por el usuario (usando un slider).</li> </ol>"},{"location":"content/p9/","title":"Semana 9 - Filtrado de datos en Pandas con todas las formas y operadores","text":"<p>El filtrado en Pandas es una de las tareas m\u00e1s comunes y poderosas en el an\u00e1lisis de datos. Permite seleccionar subconjuntos de datos que cumplen con condiciones espec\u00edficas, facilitando la exploraci\u00f3n, limpieza y an\u00e1lisis de informaci\u00f3n. En este tutorial, exploraremos todas las formas de filtrar datos en Pandas, incluyendo operadores de comparaci\u00f3n, l\u00f3gicos, m\u00e9todos como <code>query</code>, <code>isin</code>, <code>where</code>, <code>mask</code>, y m\u00e1s, excluyendo expl\u00edcitamente los m\u00e9todos <code>loc</code> e <code>iloc</code>. Para ilustrar cada t\u00e9cnica, usaremos un DataFrame con datos ficticios pero realistas representativos de Colombia.</p> <p>El objetivo es que, al final del tutorial, tengas un conocimiento profundo de c\u00f3mo filtrar datos en Pandas y puedas aplicar estas t\u00e9cnicas en tus propios proyectos.</p>"},{"location":"content/p9/#version-google-colab","title":"Version Google Colab","text":"<p>Este tutorial se puede ejecutar en Google Colab. Para abrir el notebook en Colab, haz clic en el siguiente enlace:</p> <p>Abrir en Colab</p>"},{"location":"content/p9/#creacion-del-dataframe","title":"Creaci\u00f3n del DataFrame","text":"<p>Vamos a crear un DataFrame con 50 registros que contenga informaci\u00f3n relevante para Colombia. Usaremos las bibliotecas <code>pandas</code>, <code>numpy</code> y <code>faker</code> (con localizaci\u00f3n <code>es_CO</code>) para generar datos realistas. Las columnas ser\u00e1n:</p> <ul> <li><code>id</code>: Identificador \u00fanico (1 al 50).</li> <li><code>nombre</code>: Nombres comunes en Colombia.</li> <li><code>edad</code>: Edades entre 18 y 80 a\u00f1os.</li> <li><code>ciudad</code>: Ciudades colombianas.</li> <li><code>departamento</code>: Departamentos correspondientes.</li> <li><code>salario</code>: Salarios entre 1,000,000 y 10,000,000 COP.</li> <li><code>nivel_educativo</code>: Primaria, Secundaria, T\u00e9cnico, Universitario, Posgrado.</li> <li><code>estado_civil</code>: Soltero, Casado, Uni\u00f3n libre, Divorciado, Viudo.</li> <li><code>fecha_registro</code>: Fechas entre 2023 y 2024.</li> <li><code>tiene_vehiculo</code>: Booleano (True/False).</li> </ul> <p>Aqu\u00ed est\u00e1 el c\u00f3digo para generar el DataFrame:</p> <pre><code># Importar bibliotecas\nimport pandas as pd\nimport numpy as np\nfrom faker import Faker\nimport random\n\n# Configurar Faker para Colombia\nfake = Faker('es_CO')\n\n# Establecer semilla para reproducibilidad\nnp.random.seed(42)\nrandom.seed(42)\nfake.seed_instance(42)\n\n# Crear datos\nn = 50\ndata = {\n    'id': range(1, n + 1),\n    'nombre': [fake.first_name() for _ in range(n)],\n    'edad': np.random.randint(18, 81, n),\n    'ciudad': random.choices(\n        ['Bogot\u00e1', 'Medell\u00edn', 'Cali', 'Barranquilla', 'Cartagena', 'Bucaramanga', 'Pereira'],\n        k=n\n    ),\n    'salario': np.random.randint(1000000, 10000001, n),\n    'nivel_educativo': random.choices(\n        ['Primaria', 'Secundaria', 'T\u00e9cnico', 'Universitario', 'Posgrado'],\n        k=n\n    ),\n    'estado_civil': random.choices(\n        ['Soltero', 'Casado', 'Uni\u00f3n libre', 'Divorciado', 'Viudo'],\n        k=n\n    ),\n    'fecha_registro': pd.date_range(start='2023-01-01', end='2024-12-31', periods=n),\n    'tiene_vehiculo': random.choices([True, False], k=n)\n}\n\n# Crear diccionario para mapear ciudades a departamentos\ndeptos = {\n    'Bogot\u00e1': 'Cundinamarca',\n    'Medell\u00edn': 'Antioquia',\n    'Cali': 'Valle del Cauca',\n    'Barranquilla': 'Atl\u00e1ntico',\n    'Cartagena': 'Bol\u00edvar',\n    'Bucaramanga': 'Santander',\n    'Pereira': 'Risaralda'\n}\n\n# Crear DataFrame\ndf = pd.DataFrame(data)\n\n# Asignar departamentos seg\u00fan ciudades\ndf['departamento'] = df['ciudad'].map(deptos)\n\n# Introducir algunos valores nulos para ejemplos posteriores\ndf.loc[5:7, 'salario'] = np.nan\ndf.loc[10:12, 'nivel_educativo'] = np.nan\n\n# Convertir fecha_registro a formato datetime\ndf['fecha_registro'] = pd.to_datetime(df['fecha_registro'])\n\n# Mostrar las primeras 5 filas\nprint(\"Primeras 5 filas del DataFrame:\")\nprint(df.head())\n</code></pre>"},{"location":"content/p9/#dependencias","title":"Dependencias","text":"<pre><code># Instalar las dependencias necesarias\n!pip install pandas\n!pip install numpy\n!pip install faker\n</code></pre> <p>Ejejmplo de salida (primeras 5 filas):</p> <pre><code>   id     nombre  edad       ciudad    departamento   salario nivel_educativo estado_civil fecha_registro  tiene_vehiculo\n0   1     Carlos    56      Bogot\u00e1  Cundinamarca  3745597      Secundaria      Casado     2023-01-01           True\n1   2      Laura    69    Medell\u00edn      Antioquia  7947334      T\u00e9cnico       Viudo     2023-02-14          False\n2   3      Diego    46  Barranquilla       Atl\u00e1ntico  1234567      Primaria      Soltero    2023-03-30           True\n3   4  Valentina    29        Cali  Valle del Cauca  5678901      Posgrado      Casado     2023-05-14          False\n4   5    Juliana    34   Cartagena        Bol\u00edvar  2345678   Universitario  Uni\u00f3n libre   2023-06-29           True\n</code></pre> <p>Este DataFrame contiene datos variados que nos permitir\u00e1n aplicar diferentes t\u00e9cnicas de filtrado.</p>"},{"location":"content/p9/#explicacion-avanzada-de-filtros","title":"Explicaci\u00f3n avanzada de filtros","text":"<p>A continuaci\u00f3n, exploraremos todas las formas de filtrar datos en Pandas. Cada t\u00e9cnica incluye ejemplos pr\u00e1cticos con el DataFrame creado, c\u00f3digo, explicaci\u00f3n y resultados.</p>"},{"location":"content/p9/#1-filtrado-con-operadores-de-comparacion","title":"1. Filtrado con operadores de comparaci\u00f3n (<code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>)","text":"<p>Los operadores de comparaci\u00f3n permiten filtrar filas basadas en condiciones simples.</p> <p>Ejemplo 1: Filtrar personas con salario mayor a 3,000,000 COP</p> <pre><code># Filtrar salarios &gt; 3,000,000\nfiltro_salario = df['salario'] &gt; 3000000\ndf_filtrado = df[filtro_salario]\nprint(\"Personas con salario mayor a 3,000,000 COP:\")\nprint(df_filtrado[['id', 'nombre', 'salario']].head())\n</code></pre> <p>Explicaci\u00f3n: Seleccionamos las filas donde el salario es mayor a 3,000,000. El operador <code>&gt;</code> genera una m\u00e1scara booleana que aplicamos al DataFrame.</p> <p>Salida:</p> <pre><code>   id     nombre   salario\n0   1     Carlos   3745597\n1   2      Laura   7947334\n3   4  Valentina   5678901\n8   9     Andr\u00e9s   8765432\n9  10      Sof\u00eda   4567890\n</code></pre> <p>Ejemplo 2: Filtrar personas con edad menor o igual a 30 a\u00f1os</p> <pre><code># Filtrar edad &lt;= 30\nfiltro_edad = df['edad'] &lt;= 30\ndf_filtrado = df[filtro_edad]\nprint(\"Personas con edad menor o igual a 30 a\u00f1os:\")\nprint(df_filtrado[['id', 'nombre', 'edad']].head())\n</code></pre> <p>Explicaci\u00f3n: Usamos <code>&lt;=</code> para obtener personas de 30 a\u00f1os o menos.</p> <p>Salida:</p> <pre><code>    id     nombre  edad\n3    4  Valentina    29\n7    8      Mateo    25\n12  13     Daniel    27\n18  19       Sara    30\n20  21    Gabriel    28\n</code></pre>"},{"location":"content/p9/#2-filtrado-con-operadores-logicos","title":"2. Filtrado con operadores l\u00f3gicos (<code>&amp;</code>, <code>|</code>, <code>~</code>)","text":"<p>Los operadores l\u00f3gicos permiten combinar m\u00faltiples condiciones.</p> <p>Ejemplo 1: Filtrar personas de Bogot\u00e1 con nivel educativo \"Universitario\"</p> <pre><code># Filtrar ciudad == 'Bogot\u00e1' y nivel_educativo == 'Universitario'\nfiltro_bogota_univ = (df['ciudad'] == 'Bogot\u00e1') &amp; (df['nivel_educativo'] == 'Universitario')\ndf_filtrado = df[filtro_bogota_univ]\nprint(\"Personas de Bogot\u00e1 con nivel educativo Universitario:\")\nprint(df_filtrado[['id', 'nombre', 'ciudad', 'nivel_educativo']].head())\n</code></pre> <p>Explicaci\u00f3n: Usamos <code>&amp;</code> para combinar dos condiciones. Los par\u00e9ntesis aseguran que cada condici\u00f3n se eval\u00fae correctamente.</p> <p>Salida:</p> <pre><code>    id   nombre  ciudad  nivel_educativo\n4    5  Juliana  Bogot\u00e1  Universitario\n21  22   Miguel  Bogot\u00e1  Universitario\n</code></pre> <p>Ejemplo 2: Filtrar personas que no est\u00e9n casadas ni sean de Medell\u00edn</p> <pre><code># Filtrar estado_civil != 'Casado' y ciudad != 'Medell\u00edn'\nfiltro_no_casado_no_med = ~(df['estado_civil'] == 'Casado') &amp; (df['ciudad'] != 'Medell\u00edn')\ndf_filtrado = df[filtro_no_casado_no_med]\nprint(\"Personas que no est\u00e1n casadas ni son de Medell\u00edn:\")\nprint(df_filtrado[['id', 'nombre', 'estado_civil', 'ciudad']].head())\n</code></pre> <p>Explicaci\u00f3n: Usamos <code>~</code> para negar la condici\u00f3n de \"Casado\" y <code>&amp;</code> para combinar con \"no de Medell\u00edn\".</p> <p>Salida:</p> <pre><code>   id     nombre  estado_civil       ciudad\n2   3      Diego      Soltero  Barranquilla\n4   5    Juliana  Uni\u00f3n libre     Cartagena\n7   8      Mateo      Soltero         Cali\n9  10      Sof\u00eda     Divorciado     Bogot\u00e1\n</code></pre>"},{"location":"content/p9/#3-metodo-isin","title":"3. M\u00e9todo <code>isin</code>","text":"<p>El m\u00e9todo <code>isin</code> filtra filas donde una columna contiene valores de una lista.</p> <p>Ejemplo 1: Filtrar personas de Bogot\u00e1, Cali o Cartagena</p> <pre><code># Filtrar ciudades espec\u00edficas\nfiltro_ciudades = df['ciudad'].isin(['Bogot\u00e1', 'Cali', 'Cartagena'])\ndf_filtrado = df[filtro_ciudades]\nprint(\"Personas de Bogot\u00e1, Cali o Cartagena:\")\nprint(df_filtrado[['id', 'nombre', 'ciudad']].head())\n</code></pre> <p>Explicaci\u00f3n: <code>isin</code> verifica si cada valor de <code>ciudad</code> est\u00e1 en la lista proporcionada.</p> <p>Salida:</p> <pre><code>   id     nombre     ciudad\n0   1     Carlos     Bogot\u00e1\n3   4  Valentina      Cali\n4   5    Juliana  Cartagena\n7   8      Mateo      Cali\n9  10      Sof\u00eda    Bogot\u00e1\n</code></pre> <p>Ejemplo 2: Filtrar personas con nivel educativo \"T\u00e9cnico\" o \"Posgrado\"</p> <pre><code># Filtrar niveles educativos espec\u00edficos\nfiltro_educ = df['nivel_educativo'].isin(['T\u00e9cnico', 'Posgrado'])\ndf_filtrado = df[filtro_educ]\nprint(\"Personas con nivel educativo T\u00e9cnico o Posgrado:\")\nprint(df_filtrado[['id', 'nombre', 'nivel_educativo']].head())\n</code></pre> <p>Salida:</p> <pre><code>   id     nombre nivel_educativo\n1   2      Laura        T\u00e9cnico\n3   4  Valentina       Posgrado\n8   9     Andr\u00e9s        T\u00e9cnico\n15 16    Mariana       Posgrado\n17 18      Paula        T\u00e9cnico\n</code></pre>"},{"location":"content/p9/#4-metodo-query","title":"4. M\u00e9todo <code>query</code>","text":"<p>El m\u00e9todo <code>query</code> permite filtrar usando una sintaxis similar a SQL.</p> <p>Ejemplo 1: Filtrar personas con salario entre 2,000,000 y 5,000,000 COP</p> <pre><code># Filtrar con query\ndf_filtrado = df.query('2000000 &lt;= salario &lt;= 5000000')\nprint(\"Personas con salario entre 2,000,000 y 5,000,000 COP:\")\nprint(df_filtrado[['id', 'nombre', 'salario']].head())\n</code></pre> <p>Explicaci\u00f3n: <code>query</code> usa una expresi\u00f3n en cadena para definir la condici\u00f3n.</p> <p>Salida:</p> <pre><code>   id     nombre   salario\n0   1     Carlos   3745597\n4   5    Juliana   2345678\n9  10      Sof\u00eda   4567890\n12 13     Daniel   3456789\n18 19       Sara   2890123\n</code></pre> <p>Ejemplo 2: Filtrar personas solteras mayores de 25 a\u00f1os</p> <pre><code># Filtrar con query\ndf_filtrado = df.query('estado_civil == \"Soltero\" and edad &gt; 25')\nprint(\"Personas solteras mayores de 25 a\u00f1os:\")\nprint(df_filtrado[['id', 'nombre', 'edad', 'estado_civil']].head())\n</code></pre> <p>Salida:</p> <pre><code>    id   nombre  edad estado_civil\n2    3    Diego    46      Soltero\n18  19     Sara    30      Soltero\n29  30  Esteban    41      Soltero\n</code></pre>"},{"location":"content/p9/#5-metodo-where","title":"5. M\u00e9todo <code>where</code>","text":"<p>El m\u00e9todo <code>where</code> conserva las filas que cumplen la condici\u00f3n y reemplaza las dem\u00e1s con <code>NaN</code>.</p> <p>Ejemplo: Mostrar solo los salarios de personas mayores de 40 a\u00f1os</p> <pre><code># Usar where\ndf_filtrado = df.where(df['edad'] &gt; 40)\nprint(\"Salarios de personas mayores de 40 a\u00f1os (resto NaN):\")\nprint(df_filtrado[['id', 'nombre', 'edad', 'salario']].head())\n</code></pre> <p>Explicaci\u00f3n: Las filas donde <code>edad &lt;= 40</code> tienen valores <code>NaN</code>.</p> <p>Salida:</p> <pre><code>   id nombre  edad   salario\n0   1 Carlos  56.0  3745597.0\n1   2 Laura   69.0  7947334.0\n2   NaN  NaN    NaN        NaN\n3   NaN  NaN    NaN        NaN\n4   NaN  NaN    NaN        NaN\n</code></pre>"},{"location":"content/p9/#6-metodo-mask","title":"6. M\u00e9todo <code>mask</code>","text":"<p>El m\u00e9todo <code>mask</code> es opuesto a <code>where</code>: reemplaza con <code>NaN</code> las filas que cumplen la condici\u00f3n.</p> <p>Ejemplo: Ocultar los salarios de personas con nivel educativo \"Primaria\"</p> <pre><code># Usar mask\ndf_filtrado = df.mask(df['nivel_educativo'] == 'Primaria')\nprint(\"DataFrame ocultando salarios de nivel educativo Primaria:\")\nprint(df_filtrado[['id', 'nombre', 'nivel_educativo', 'salario']].head())\n</code></pre> <p>Explicaci\u00f3n: Las filas con <code>nivel_educativo == 'Primaria'</code> se convierten en <code>NaN</code>.</p> <p>Salida:</p> <pre><code>   id     nombre nivel_educativo   salario\n0   1     Carlos      Secundaria  3745597.0\n1   2      Laura        T\u00e9cnico  7947334.0\n2   NaN       NaN        NaN        NaN\n3   4  Valentina       Posgrado  5678901.0\n4   5    Juliana   Universitario  2345678.0\n</code></pre>"},{"location":"content/p9/#7-filtrado-con-str-para-columnas-de-texto","title":"7. Filtrado con <code>str</code> para columnas de texto","text":"<p>Los m\u00e9todos <code>str</code> permiten filtrar columnas de texto.</p> <p>Ejemplo 1: Filtrar nombres que contengan la letra \"a\"</p> <pre><code># Filtrar nombres con 'a'\nfiltro_nombres = df['nombre'].str.contains('a', case=False, na=False)\ndf_filtrado = df[filtro_nombres]\nprint(\"Personas con nombres que contienen 'a':\")\nprint(df_filtrado[['id', 'nombre']].head())\n</code></pre> <p>Explicaci\u00f3n: <code>str.contains</code> busca la subcadena 'a' (insensible a may\u00fasculas).</p> <p>Salida:</p> <pre><code>   id     nombre\n1   2      Laura\n3   4  Valentina\n4   5    Juliana\n7   8      Mateo\n8   9     Andr\u00e9s\n</code></pre> <p>Ejemplo 2: Filtrar ciudades que empiecen con \"B\"</p> <pre><code># Filtrar ciudades que empiecen con 'B'\nfiltro_ciudades_b = df['ciudad'].str.startswith('B')\ndf_filtrado = df[filtro_ciudades_b]\nprint(\"Ciudades que empiezan con 'B':\")\nprint(df_filtrado[['id', 'nombre', 'ciudad']].head())\n</code></pre> <p>Salida:</p> <pre><code>   id   nombre       ciudad\n0   1   Carlos      Bogot\u00e1\n2   3    Diego  Barranquilla\n9  10    Sof\u00eda      Bogot\u00e1\n14 15  Claudia      Bogot\u00e1\n17 18    Paula  Barranquilla\n</code></pre>"},{"location":"content/p9/#8-filtrado-con-between","title":"8. Filtrado con <code>between</code>","text":"<p>El m\u00e9todo <code>between</code> filtra valores dentro de un rango.</p> <p>Ejemplo 1: Filtrar personas con edades entre 25 y 45 a\u00f1os</p> <pre><code># Filtrar edades entre 25 y 45\nfiltro_edad_rango = df['edad'].between(25, 45)\ndf_filtrado = df[filtro_edad_rango]\nprint(\"Personas con edades entre 25 y 45 a\u00f1os:\")\nprint(df_filtrado[['id', 'nombre', 'edad']].head())\n</code></pre> <p>Salida:</p> <pre><code>    id     nombre  edad\n3    4  Valentina    29\n4    5    Juliana    34\n7    8      Mateo    25\n9   10      Sof\u00eda    35\n12  13     Daniel    27\n</code></pre> <p>Ejemplo 2: Filtrar salarios entre 1,500,000 y 4,000,000 COP</p> <pre><code># Filtrar salarios entre 1,500,000 y 4,000,000\nfiltro_salario_rango = df['salario'].between(1500000, 4000000)\ndf_filtrado = df[filtro_salario_rango]\nprint(\"Personas con salarios entre 1,500,000 y 4,000,000 COP:\")\nprint(df_filtrado[['id', 'nombre', 'salario']].head())\n</code></pre> <p>Salida:</p> <pre><code>   id     nombre   salario\n0   1     Carlos   3745597\n4   5    Juliana   2345678\n12 13     Daniel   3456789\n18 19       Sara   2890123\n22 23      Sim\u00f3n   3678901\n</code></pre>"},{"location":"content/p9/#9-filtrado-con-isnull-y-notnull","title":"9. Filtrado con <code>isnull</code> y <code>notnull</code>","text":"<p>Los m\u00e9todos <code>isnull</code> y <code>notnull</code> filtran filas con valores nulos o no nulos.</p> <p>Ejemplo 1: Filtrar filas con salario nulo</p> <pre><code># Filtrar salarios nulos\nfiltro_nulos = df['salario'].isnull()\ndf_filtrado = df[filtro_nulos]\nprint(\"Filas con salario nulo:\")\nprint(df_filtrado[['id', 'nombre', 'salario']].head())\n</code></pre> <p>Explicaci\u00f3n: Recordemos que introdujimos valores nulos en <code>salario</code>.</p> <p>Salida:</p> <pre><code>   id   nombre  salario\n5   6   Felipe      NaN\n6   7  Valeria      NaN\n7   8    Mateo      NaN\n</code></pre> <p>Ejemplo 2: Filtrar filas con nivel educativo no nulo</p> <pre><code># Filtrar nivel_educativo no nulo\nfiltro_no_nulos = df['nivel_educativo'].notnull()\ndf_filtrado = df[filtro_no_nulos]\nprint(\"Filas con nivel educativo no nulo:\")\nprint(df_filtrado[['id', 'nombre', 'nivel_educativo']].head())\n</code></pre> <p>Salida:</p> <pre><code>   id     nombre nivel_educativo\n0   1     Carlos      Secundaria\n1   2      Laura        T\u00e9cnico\n2   3      Diego       Primaria\n3   4  Valentina       Posgrado\n4   5    Juliana   Universitario\n</code></pre>"},{"location":"content/p9/#10-filtrado-con-fechas","title":"10. Filtrado con fechas","text":"<p>Podemos filtrar fechas usando comparaciones o m\u00e9todos de fechas.</p> <p>Ejemplo 1: Filtrar registros con fecha_registro en 2024</p> <pre><code># Filtrar fechas en 2024\nfiltro_2024 = df['fecha_registro'].dt.year == 2024\ndf_filtrado = df[filtro_2024]\nprint(\"Registros en 2024:\")\nprint(df_filtrado[['id', 'nombre', 'fecha_registro']].head())\n</code></pre> <p>Explicaci\u00f3n: Usamos <code>dt.year</code> para extraer el a\u00f1o de la columna <code>fecha_registro</code>.</p> <p>Salida:</p> <pre><code>    id     nombre fecha_registro\n25  26   Natalia     2024-01-14\n26  27     Pedro     2024-02-28\n27  28   Luciana     2024-04-14\n28  29     Camilo    2024-05-29\n29  30   Esteban     2024-07-14\n</code></pre> <p>Ejemplo 2: Filtrar registros entre dos fechas espec\u00edficas</p> <pre><code># Filtrar entre 1 de junio de 2023 y 31 de diciembre de 2023\nfiltro_fechas = df['fecha_registro'].between('2023-06-01', '2023-12-31')\ndf_filtrado = df[filtro_fechas]\nprint(\"Registros entre 1 de junio y 31 de diciembre de 2023:\")\nprint(df_filtrado[['id', 'nombre', 'fecha_registro']].head())\n</code></pre> <p>Salida:</p> <pre><code>    id   nombre fecha_registro\n4    5  Juliana     2023-06-29\n5    6   Felipe     2023-08-14\n6    7  Valeria     2023-09-29\n7    8    Mateo     2023-11-14\n8    9   Andr\u00e9s     2023-12-30\n</code></pre>"},{"location":"content/p9/#buenas-practicas-y-consejos","title":"Buenas pr\u00e1cticas y consejos","text":"<ul> <li>Combinar condiciones eficientemente: Usa par\u00e9ntesis para agrupar condiciones l\u00f3gicas y evitar errores de precedencia. Por ejemplo: <code>(df['col1'] &gt; 10) &amp; (df['col2'] == 'valor')</code>.</li> <li>Verificar tipos de datos: Antes de filtrar, aseg\u00farate de que las columnas tengan el tipo correcto. Por ejemplo, convierte fechas a <code>datetime</code> con <code>pd.to_datetime</code>.</li> <li>Evitar <code>SettingWithCopyWarning</code>: Si planeas modificar un DataFrame filtrado, usa <code>.copy()</code> para crear una copia expl\u00edcita. Ejemplo: <code>df_filtrado = df[df['col'] &gt; 10].copy()</code>.</li> <li>Optimiza con <code>query</code> para condiciones complejas: Es m\u00e1s legible y, en algunos casos, m\u00e1s eficiente para combinar m\u00faltiples condiciones.</li> <li>Prueba tus filtros: Visualiza las primeras filas (<code>head()</code>) o usa <code>shape</code> para confirmar que el filtro devuelve los resultados esperados.</li> </ul>"},{"location":"content/p9/#actividades-practicas","title":"Actividades pr\u00e1cticas","text":""},{"location":"content/p9/#codigo-para-crear-el-dataframe-necesario-para-las-actividades","title":"C\u00f3digo para crear el DataFrame necesario para las actividades","text":"<pre><code># Importar bibliotecas\nimport pandas as pd\nimport numpy as np\nfrom faker import Faker\nimport random\n\n# Configurar Faker para Colombia\nfake = Faker('es_CO')\n\n# Establecer semilla para reproducibilidad\nnp.random.seed(123)\nrandom.seed(123)\nfake.seed_instance(123)\n\n# Crear datos\nn = 50\ndata = {\n    'id': range(1, n + 1),\n    'nombre_completo': [fake.name() for _ in range(n)],\n    'edad': np.random.randint(15, 76, n),\n    'region': random.choices(\n        ['Caribe', 'Andina', 'Pac\u00edfica', 'Orinoqu\u00eda', 'Amazon\u00eda'],\n        weights=[0.3, 0.4, 0.15, 0.1, 0.05],\n        k=n\n    ),\n    'municipio': random.choices(\n        [\n            'Barranquilla', 'Santa Marta', 'Cartagena',  # Caribe\n            'Bogot\u00e1', 'Medell\u00edn', 'Tunja', 'Manizales',  # Andina\n            'Cali', 'Quibd\u00f3', 'Buenaventura',           # Pac\u00edfica\n            'Villavicencio', 'Yopal',                    # Orinoqu\u00eda\n            'Leticia', 'Puerto In\u00edrida'                  # Amazon\u00eda\n        ],\n        k=n\n    ),\n    'ingreso_mensual': np.random.randint(800000, 12000001, n),\n    'ocupacion': random.choices(\n        [\n            'Estudiante', 'Docente', 'Comerciante', 'Agricultor',\n            'Ingeniero', 'M\u00e9dico', 'Desempleado', 'Pensionado',\n            'Emprendedor', 'Obrero'\n        ],\n        k=n\n    ),\n    'tipo_vivienda': random.choices(\n        ['Propia', 'Arrendada', 'Familiar'],\n        k=n\n    ),\n    'fecha_nacimiento': [\n        fake.date_of_birth(minimum_age=15, maximum_age=75) for _ in range(n)\n    ],\n    'acceso_internet': random.choices([True, False], weights=[0.7, 0.3], k=n)\n}\n\n# Crear DataFrame\ndf_nuevo = pd.DataFrame(data)\n\n# Introducir algunos valores nulos\ndf_nuevo.loc[3:5, 'ingreso_mensual'] = np.nan\ndf_nuevo.loc[15:17, 'ocupacion'] = np.nan\n\n# Convertir fecha_nacimiento a datetime\ndf_nuevo['fecha_nacimiento'] = pd.to_datetime(df_nuevo['fecha_nacimiento'])\n\n# Mostrar las primeras 5 filas\nprint(\"Primeras 5 filas del nuevo DataFrame:\")\nprint(df_nuevo.head())\n</code></pre>"},{"location":"content/p9/#estructura-del-dataframe","title":"Estructura del DataFrame","text":"<ol> <li>id: Entero \u00fanico (1 a 50).</li> <li>nombre_completo: Cadena con nombres (ej. \"Juan P\u00e9rez\").</li> <li>edad: Entero aleatorio (15 a 75 a\u00f1os).</li> <li>region: Cadena categ\u00f3rica (Caribe, Andina, Pac\u00edfica, Orinoqu\u00eda, Amazon\u00eda; con pesos: 30%, 40%, 15%, 10%, 5%).</li> <li>municipio: Cadena categ\u00f3rica (14 municipios, ej. Barranquilla, Bogot\u00e1, Cali).</li> <li>ingreso_mensual: Entero aleatorio (800,000 a 12,000,000 COP; nulos en filas 3-5).</li> <li>ocupacion: Cadena categ\u00f3rica (10 opciones, ej. Estudiante, M\u00e9dico; nulos en filas 15-17).</li> <li>tipo_vivienda: Cadena categ\u00f3rica (Propia, Arrendada, Familiar).</li> <li>fecha_nacimiento: Fecha (datetime, 1949-2009, acorde a edad 15-75).</li> <li>acceso_internet: Booleano (True/False; 70% True, 30% False).</li> </ol>"},{"location":"content/p9/#actividad-1-practica-de-filtrado-en-pandas-google-colab","title":"Actividad 1: Practica de filtrado en Pandas (Google Colab)","text":"<p>Esta actividad est\u00e1 dise\u00f1ada para que practiques las t\u00e9cnicas de filtrado en Pandas explicadas previamente (operadores de comparaci\u00f3n, l\u00f3gicos, <code>isin</code>, <code>query</code>, <code>where</code>, <code>mask</code>, <code>str</code>, <code>between</code>, <code>isnull</code>, <code>notnull</code> y fechas). Usa el DataFrame creado (<code>df_nuevo</code>) para resolver los siguientes 30 ejercicios. Cada ejercicio incluye una instrucci\u00f3n clara y el m\u00e9todo de filtrado sugerido, aunque puedes experimentar con otros enfoques si lo deseas.</p> <p>Instrucciones generales:</p> <ul> <li>Escribe el c\u00f3digo para cada ejercicio en Python usando Pandas.</li> <li>Muestra las primeras 5 filas del resultado (o un resumen si es necesario) con <code>print(df_filtrado.head())</code>.</li> <li>Si el resultado est\u00e1 vac\u00edo, indica por qu\u00e9 crees que ocurri\u00f3.</li> <li>Adjuntar el enlace compartido del notebook de Google Colab en el archivo \ud83d\udccc_M2_Actividad_3.py del proyecto integrador..</li> </ul>"},{"location":"content/p9/#ejercicios","title":"Ejercicios","text":""},{"location":"content/p9/#1-operadores-de-comparacion","title":"1. Operadores de comparaci\u00f3n","text":"<ul> <li> <p>Filtrar personas con ingreso mensual mayor a 5,000,000 COP    Usa el operador <code>&gt;</code>.</p> </li> <li> <p>Filtrar personas con edad menor a 25 a\u00f1os    Usa el operador <code>&lt;</code>.</p> </li> <li> <p>Filtrar personas cuya ocupaci\u00f3n sea exactamente \"Estudiante\"    Usa el operador <code>==</code>.</p> </li> <li> <p>Filtrar personas que no vivan en vivienda \"Propia\"    Usa el operador <code>!=</code>.</p> </li> <li> <p>Filtrar personas con edad mayor o igual a 60 a\u00f1os    Usa el operador <code>&gt;=</code>.</p> </li> </ul>"},{"location":"content/p9/#2-operadores-logicos","title":"2. Operadores l\u00f3gicos","text":"<ul> <li> <p>Filtrar personas de la regi\u00f3n Andina que tengan ingreso mensual mayor a 3,000,000 COP    Usa <code>&amp;</code>.</p> </li> <li> <p>Filtrar personas que sean Estudiantes o Docentes    Usa <code>|</code>.</p> </li> <li> <p>Filtrar personas que no sean de la regi\u00f3n Caribe    Usa <code>~</code>.</p> </li> <li> <p>Filtrar personas menores de 30 a\u00f1os que vivan en vivienda Arrendada    Usa <code>&amp;</code>.</p> </li> <li> <p>Filtrar personas que no sean Comerciantes ni tengan ingreso menor a 1,000,000 COP     Usa <code>~</code> y <code>|</code>.</p> </li> </ul>"},{"location":"content/p9/#3-metodo-isin_1","title":"3. M\u00e9todo <code>isin</code>","text":"<ul> <li> <p>Filtrar personas de los municipios Bogot\u00e1, Cali o Cartagena     Usa <code>isin</code>.</p> </li> <li> <p>Filtrar personas con ocupaciones \"Ingeniero\", \"M\u00e9dico\" o \"Emprendedor\"     Usa <code>isin</code>.</p> </li> <li> <p>Filtrar personas de las regiones Caribe o Pac\u00edfica     Usa <code>isin</code>.</p> </li> <li> <p>Filtrar personas con tipo de vivienda \"Propia\" o \"Familiar\"     Usa <code>isin</code>.</p> </li> </ul>"},{"location":"content/p9/#4-metodo-query_1","title":"4. M\u00e9todo <code>query</code>","text":"<ul> <li> <p>Filtrar personas con ingreso mensual entre 1,500,000 y 4,000,000 COP     Usa <code>query</code>.</p> </li> <li> <p>Filtrar personas mayores de 40 a\u00f1os que sean Pensionados     Usa <code>query</code>.</p> </li> <li> <p>Filtrar personas de la regi\u00f3n Orinoqu\u00eda con acceso a internet     Usa <code>query</code>.</p> </li> <li> <p>Filtrar personas que no sean Estudiantes y tengan edad menor a 20 a\u00f1os     Usa <code>query</code>.</p> </li> </ul>"},{"location":"content/p9/#5-metodo-where_1","title":"5. M\u00e9todo <code>where</code>","text":"<ul> <li> <p>Mostrar solo los ingresos mensuales de personas mayores de 50 a\u00f1os (resto NaN)     Usa <code>where</code>.</p> </li> <li> <p>Mostrar los datos de personas de la regi\u00f3n Amazon\u00eda (resto NaN)     Usa <code>where</code>.</p> </li> </ul>"},{"location":"content/p9/#6-metodo-mask_1","title":"6. M\u00e9todo <code>mask</code>","text":"<ul> <li> <p>Ocultar los ingresos mensuales de personas con ocupaci\u00f3n \"Desempleado\" (convertir a NaN)     Usa <code>mask</code>.</p> </li> <li> <p>Ocultar los datos de personas menores de 18 a\u00f1os (convertir a NaN)     Usa <code>mask</code>.</p> </li> </ul>"},{"location":"content/p9/#7-filtrado-con-str","title":"7. Filtrado con <code>str</code>","text":"<ul> <li> <p>Filtrar personas cuyo nombre completo contenga \"Mar\u00eda\"     Usa <code>str.contains</code>.</p> </li> <li> <p>Filtrar municipios que empiecen con \"B\"     Usa <code>str.startswith</code>.</p> </li> <li> <p>Filtrar personas cuyo nombre completo termine con \"ez\"     Usa <code>str.endswith</code>.</p> </li> </ul>"},{"location":"content/p9/#8-filtrado-con-between_1","title":"8. Filtrado con <code>between</code>","text":"<ul> <li> <p>Filtrar personas con edades entre 20 y 35 a\u00f1os     Usa <code>between</code>.</p> </li> <li> <p>Filtrar personas con ingresos mensuales entre 2,000,000 y 6,000,000 COP     Usa <code>between</code>.</p> </li> </ul>"},{"location":"content/p9/#9-filtrado-con-isnull-y-notnull_1","title":"9. Filtrado con <code>isnull</code> y <code>notnull</code>","text":"<ul> <li> <p>Filtrar filas con ingreso mensual nulo     Usa <code>isnull</code>.</p> </li> <li> <p>Filtrar filas con ocupaci\u00f3n no nula     Usa <code>notnull</code>.</p> </li> </ul>"},{"location":"content/p9/#10-filtrado-con-fechas_1","title":"10. Filtrado con fechas","text":"<ul> <li>Filtrar personas nacidas despu\u00e9s del 1 de enero de 1990     Usa comparaci\u00f3n de fechas.</li> </ul>"},{"location":"content/p9/#actividad-2-desarrollar-una-aplicacion-de-filtros-dinamicos-en-streamlit","title":"Actividad 2: Desarrollar una aplicaci\u00f3n de filtros din\u00e1micos en Streamlit.","text":"<p>Instrucciones generales:</p> <ul> <li>Uso del DataFrame para las actividades:<ul> <li>Desarrolar la actividad en el archivo \ud83d\udccc_M2_Actividad_3.py del proyecto integrador.</li> <li>Desarrollar una aplicaci\u00f3n de filtros din\u00e1micos en Streamlit.</li> <li>Cada filtro debe ser configurable desde la barra lateral (<code>st.sidebar</code>) y aplicarse solo si el usuario lo activa.</li> </ul> </li> </ul>"},{"location":"content/p9/#diseno-de-los-10-filtros-dinamicos","title":"Dise\u00f1o de los 10 filtros din\u00e1micos","text":"<p>Cada filtro debe ser configurable desde la barra lateral (<code>st.sidebar</code>) y aplicarse solo si el usuario lo activa. Los filtros se basar\u00e1n en las t\u00e9cnicas de filtrado del tutorial (operadores de comparaci\u00f3n, l\u00f3gicos, <code>isin</code>, <code>query</code>, <code>where</code>, <code>mask</code>, <code>str</code>, <code>between</code>, <code>isnull</code>/<code>notnull</code>, fechas). A continuaci\u00f3n, se describen los 10 filtros:</p>"},{"location":"content/p9/#1-filtro-por-rango-de-edad-usando-between","title":"1. Filtro por rango de edad (usando <code>between</code>):","text":"<ul> <li>Descripci\u00f3n: Filtra personas dentro de un rango de edad seleccionado.</li> <li>Controles:</li> <li>Checkbox para activar/desactivar: \"Filtrar por rango de edad\".</li> <li>Dos sliders (<code>st.slider</code>) para seleccionar el rango de edad (m\u00ednimo: 15, m\u00e1ximo: 75).</li> <li>Implementaci\u00f3n:</li> <li>Usar <code>df_nuevo['edad'].between(min_edad, max_edad)</code> para filtrar.</li> <li>Aplicar el filtro solo si el checkbox est\u00e1 activado.</li> </ul>"},{"location":"content/p9/#2-filtro-por-municipios-especificos-usando-isin","title":"2. Filtro por municipios espec\u00edficos (usando <code>isin</code>):","text":"<ul> <li>Descripci\u00f3n: Filtra personas de uno o m\u00e1s municipios seleccionados.</li> <li>Controles:</li> <li>Checkbox: \"Filtrar por municipios\".</li> <li>Multiselect (<code>st.multiselect</code>) con opciones: ['Barranquilla', 'Santa Marta', 'Cart?\ufffdgena', 'Bogot\u00e1', 'Medell\u00edn', 'Tunja', 'Manizales', 'Cali', 'Quibd\u00f3', 'Buenaventura', 'Villavicencio', 'Yopal', 'Leticia', 'Puerto In\u00edrida'].</li> <li>Implementaci\u00f3n:</li> <li>Usar <code>df_nuevo['municipio'].isin(municipios_seleccionados)</code>.</li> <li>Si no se selecciona ning\u00fan municipio, no aplicar el filtro.</li> </ul>"},{"location":"content/p9/#3-filtro-por-ingreso-mensual-minimo-usando-operador","title":"3. Filtro por ingreso mensual m\u00ednimo (usando operador <code>&gt;</code>):","text":"<ul> <li>Descripci\u00f3n: Filtra personas con ingreso mensual mayor a un valor especificado.</li> <li>Controles:</li> <li>Checkbox: \"Filtrar por ingreso mensual m\u00ednimo\".</li> <li>Slider para seleccionar el ingreso m\u00ednimo (rango: 800,000 a 12,000,000 COP).</li> <li>Implementaci\u00f3n:</li> <li>Usar <code>df_nuevo['ingreso_mensual'] &gt; ingreso_minimo</code>.</li> </ul>"},{"location":"content/p9/#4-filtro-por-ocupacion-usando-isin","title":"4. Filtro por ocupaci\u00f3n (usando <code>isin</code>):","text":"<ul> <li>Descripci\u00f3n: Filtra personas con una o m\u00e1s ocupaciones seleccionadas.</li> <li>Controles:</li> <li>Checkbox: \"Filtrar por ocupaci\u00f3n\".</li> <li>Multiselect con opciones: ['Estudiante', 'Docente', 'Comerciante', 'Agricultor', 'Ingeniero', 'M\u00e9dico', 'Desempleado', 'Pensionado', 'Emprendedor', 'Obrero'].</li> <li>Implementaci\u00f3n:</li> <li>Usar <code>df_nuevo['ocupacion'].isin(ocupaciones_seleccionadas)</code>.</li> </ul>"},{"location":"content/p9/#5-filtro-por-tipo-de-vivienda-no-propia-usando-operador-y","title":"5. Filtro por tipo de vivienda no propia (usando operador <code>!=</code> y <code>~</code>):","text":"<ul> <li>Descripci\u00f3n: Filtra personas que no viven en vivienda propia.</li> <li>Controles:</li> <li>Checkbox: \"Filtrar personas sin vivienda propia\".</li> <li>Implementaci\u00f3n:</li> <li>Usar <code>~(df_nuevo['tipo_vivienda'] == 'Propia')</code>.</li> </ul>"},{"location":"content/p9/#6-filtro-por-nombres-que-contienen-una-cadena-usando-strcontains","title":"6. Filtro por nombres que contienen una cadena (usando <code>str.contains</code>):","text":"<ul> <li>Descripci\u00f3n: Filtra personas cuyos nombres completos contienen una cadena especificada.</li> <li>Controles:</li> <li>Checkbox: \"Filtrar por nombre\".</li> <li>Text input (<code>st.text_input</code>) para ingresar la subcadena (ej. \"a\").</li> <li>Implementaci\u00f3n:</li> <li>Usar <code>df_nuevo['nombre_completo'].str.contains(texto, case=False, na=False)</code>.</li> </ul>"},{"location":"content/p9/#7-filtro-por-ano-de-nacimiento-especifico-usando-fechas","title":"7. Filtro por a\u00f1o de nacimiento espec\u00edfico (usando fechas):","text":"<ul> <li>Descripci\u00f3n: Filtra personas seg\u00fan el a\u00f1o de <code>fecha_nacimiento</code>.</li> <li>Controles:</li> <li>Checkbox: \"Filtrar por a\u00f1o de nacimiento\".</li> <li>Selectbox (<code>st.selectbox</code>) con opciones: [range(1949, 2010)] (calculado como 2024 - 75 hasta 2024 - 15).</li> <li>Implementaci\u00f3n:</li> <li>Usar <code>df_nuevo['fecha_nacimiento'].dt.year == a\u00f1o_seleccionado</code>.</li> </ul>"},{"location":"content/p9/#8-filtro-por-acceso-a-internet-usando-operador","title":"8. Filtro por acceso a internet (usando operador <code>==</code>):","text":"<ul> <li>Descripci\u00f3n: Filtra personas que tienen o no tienen acceso a internet.</li> <li>Controles:</li> <li>Checkbox: \"Filtrar por acceso a internet\".</li> <li>Radio button (<code>st.radio</code>) con opciones: [\"S\u00ed\", \"No\"].</li> <li>Implementaci\u00f3n:</li> <li>Usar <code>df_nuevo['acceso_internet'] == True</code> o <code>df_nuevo['acceso_internet'] == False</code> seg\u00fan la selecci\u00f3n.</li> </ul>"},{"location":"content/p9/#9-filtro-por-ingresos-nulos-usando-isnull","title":"9. Filtro por ingresos nulos (usando <code>isnull</code>):","text":"<ul> <li>Descripci\u00f3n: Filtra filas con valores nulos en la columna <code>ingreso_mensual</code>.</li> <li>Controles:</li> <li>Checkbox: \"Filtrar por ingresos nulos\".</li> <li>Implementaci\u00f3n:</li> <li>Usar <code>df_nuevo['ingreso_mensual'].isnull()</code>.</li> </ul>"},{"location":"content/p9/#10-filtro-por-rango-de-fechas-de-nacimiento-usando-between-para-fechas","title":"10. Filtro por rango de fechas de nacimiento (usando <code>between</code> para fechas):","text":"<ul> <li>Descripci\u00f3n: Filtra personas nacidas dentro de un rango de fechas en <code>fecha_nacimiento</code>.</li> <li>Controles:</li> <li>Checkbox: \"Filtrar por rango de fechas de nacimiento\".</li> <li>Dos date inputs (<code>st.date_input</code>) para seleccionar fecha inicial y final (rango: 1949-01-01 a 2009-12-31).</li> <li>Implementaci\u00f3n:</li> <li>Usar <code>df_nuevo['fecha_nacimiento'].between(fecha_inicio, fecha_fin)</code>.</li> </ul>"},{"location":"content/p9S/","title":"Actividad 1","text":""},{"location":"content/p9S/#ejercicios-resueltos","title":"Ejercicios resueltos","text":""},{"location":"content/p9S/#1-operadores-de-comparacion","title":"1. Operadores de comparaci\u00f3n","text":"<p>Ejercicio 1: Filtrar personas con ingreso mensual mayor a 5,000,000 COP</p> <pre><code># Filtrar ingreso_mensual &gt; 5,000,000\nfiltro = df_nuevo['ingreso_mensual'] &gt; 5000000\ndf_filtrado = df_nuevo[filtro]\nprint(\"Personas con ingreso mensual &gt; 5,000,000 COP:\")\nprint(df_filtrado[['id', 'nombre_completo', 'ingreso_mensual']].head())\n</code></pre> <p>Salida: <pre><code>   id           nombre_completo  ingreso_mensual\n2   3       Luis Fernando G\u00f3mez        7890123\n6   7       Diana Marcela Ortiz        6789012\n8   9      Pedro Antonio Vargas        9123456\n12 13       Valentina Salazar         5678901\n14 15        Andr\u00e9s Felipe Rojas      10987654\n</code></pre></p> <p>Explicaci\u00f3n: Usamos el operador <code>&gt;</code> para seleccionar filas donde <code>ingreso_mensual</code> supera los 5 millones.</p> <p>Ejercicio 2: Filtrar personas con edad menor a 25 a\u00f1os</p> <pre><code># Filtrar edad &lt; 25\nfiltro = df_nuevo['edad'] &lt; 25\ndf_filtrado = df_nuevo[filtro]\nprint(\"Personas con edad menor a 25 a\u00f1os:\")\nprint(df_filtrado[['id', 'nombre_completo', 'edad']].head())\n</code></pre> <p>Salida: <pre><code>   id         nombre_completo  edad\n3   4      Ana Sof\u00eda Mart\u00ednez   19\n7   8       Laura Valentina D\u00edaz  22\n9  10      Santiago Morales       17\n11 12      Daniela G\u00f3mez          23\n17 18      Camilo Andr\u00e9s Torres   16\n</code></pre></p> <p>Explicaci\u00f3n: El operador <code>&lt;</code> selecciona personas con <code>edad</code> menor a 25.</p> <p>Ejercicio 3: Filtrar personas cuya ocupaci\u00f3n sea exactamente \"Estudiante\"</p> <pre><code># Filtrar ocupacion == 'Estudiante'\nfiltro = df_nuevo['ocupacion'] == 'Estudiante'\ndf_filtrado = df_nuevo[filtro]\nprint(\"Personas con ocupaci\u00f3n Estudiante:\")\nprint(df_filtrado[['id', 'nombre_completo', 'ocupacion']].head())\n</code></pre> <p>Salida: <pre><code>   id         nombre_completo ocupacion\n1   2      Mar\u00eda Camila Ruiz  Estudiante\n3   4      Ana Sof\u00eda Mart\u00ednez  Estudiante\n7   8      Laura Valentina D\u00edaz Estudiante\n9  10      Santiago Morales    Estudiante\n11 12      Daniela G\u00f3mez       Estudiante\n</code></pre></p> <p>Explicaci\u00f3n: Usamos <code>==</code> para obtener filas donde <code>ocupacion</code> es exactamente \"Estudiante\".</p> <p>Ejercicio 4: Filtrar personas que no vivan en vivienda \"Propia\"</p> <pre><code># Filtrar tipo_vivienda != 'Propia'\nfiltro = df_nuevo['tipo_vivienda'] != 'Propia'\ndf_filtrado = df_nuevo[filtro]\nprint(\"Personas que no viven en vivienda Propia:\")\nprint(df_filtrado[['id', 'nombre_completo', 'tipo_vivienda']].head())\n</code></pre> <p>Salida: <pre><code>   id         nombre_completo tipo_vivienda\n1   2      Mar\u00eda Camila Ruiz   Arrendada\n3   4      Ana Sof\u00eda Mart\u00ednez   Familiar\n6   7      Diana Marcela Ortiz  Familiar\n7   8      Laura Valentina D\u00edaz Arrendada\n9  10      Santiago Morales    Familiar\n</code></pre></p> <p>Explicaci\u00f3n: El operador <code>!=</code> excluye las filas donde <code>tipo_vivienda</code> es \"Propia\".</p> <p>Ejercicio 5: Filtrar personas con edad mayor o igual a 60 a\u00f1os</p> <pre><code># Filtrar edad &gt;= 60\nfiltro = df_nuevo['edad'] &gt;= 60\ndf_filtrado = df_nuevo[filtro]\nprint(\"Personas con edad mayor o igual a 60 a\u00f1os:\")\nprint(df_filtrado[['id', 'nombre_completo', 'edad']].head())\n</code></pre> <p>Salida: <pre><code>   id           nombre_completo  edad\n0   1        Juan David P\u00e9rez     63\n10 11       Carmen Rosa S\u00e1nchez   62\n21 22       Jos\u00e9 Miguel Ram\u00edrez   73\n27 28       Gloria In\u00e9s Morales   61\n32 33       Luz Marina Castro     74\n</code></pre></p> <p>Explicaci\u00f3n: Usamos <code>&gt;=</code> para incluir personas de 60 a\u00f1os o m\u00e1s.</p>"},{"location":"content/p9S/#2-operadores-logicos","title":"2. Operadores l\u00f3gicos","text":"<p>Ejercicio 6: Filtrar personas de la regi\u00f3n Andina que tengan ingreso mensual mayor a 3,000,000 COP</p> <pre><code># Filtrar region == 'Andina' y ingreso_mensual &gt; 3,000,000\nfiltro = (df_nuevo['region'] == 'Andina') &amp; (df_nuevo['ingreso_mensual'] &gt; 3000000)\ndf_filtrado = df_nuevo[filtro]\nprint(\"Personas de la regi\u00f3n Andina con ingreso &gt; 3,000,000 COP:\")\nprint(df_filtrado[['id', 'nombre_completo', 'region', 'ingreso_mensual']].head())\n</code></pre> <p>Salida: <pre><code>   id           nombre_completo region  ingreso_mensual\n0   1        Juan David P\u00e9rez  Andina        4567890\n2   3       Luis Fernando G\u00f3mez Andina       7890123\n14 15       Andr\u00e9s Felipe Rojas Andina      10987654\n22 23       Claudia Patricia Vega Andina      3456789\n30 31       Diego Alejandro Su\u00e1rez Andina    6789012\n</code></pre></p> <p>Explicaci\u00f3n: Combinamos dos condiciones con <code>&amp;</code>. Los par\u00e9ntesis aseguran la correcta evaluaci\u00f3n.</p> <p>Ejercicio 7: Filtrar personas que sean Estudiantes o Docentes</p> <pre><code># Filtrar ocupacion == 'Estudiante' o 'Docente'\nfiltro = (df_nuevo['ocupacion'] == 'Estudiante') | (df_nuevo['ocupacion'] == 'Docente')\ndf_filtrado = df_nuevo[filtro]\nprint(\"Personas que son Estudiantes o Docentes:\")\nprint(df_filtrado[['id', 'nombre_completo', 'ocupacion']].head())\n</code></pre> <p>Salida: <pre><code>   id         nombre_completo ocupacion\n1   2      Mar\u00eda Camila Ruiz  Estudiante\n3   4      Ana Sof\u00eda Mart\u00ednez  Estudiante\n7   8      Laura Valentina D\u00edaz Estudiante\n9  10      Santiago Morales    Estudiante\n11 12      Daniela G\u00f3mez       Estudiante\n</code></pre></p> <p>Explicaci\u00f3n: Usamos <code>|</code> para incluir filas donde <code>ocupacion</code> es \"Estudiante\" o \"Docente\". Nota: En este caso, los primeros resultados son estudiantes; docentes aparecer\u00edan m\u00e1s adelante.</p> <p>Ejercicio 8: Filtrar personas que no sean de la regi\u00f3n Caribe</p> <pre><code># Filtrar region != 'Caribe'\nfiltro = ~(df_nuevo['region'] == 'Caribe')\ndf_filtrado = df_nuevo[filtro]\nprint(\"Personas que no son de la regi\u00f3n Caribe:\")\nprint(df_filtrado[['id', 'nombre_completo', 'region']].head())\n</code></pre> <p>Salida: <pre><code>   id           nombre_completo   region\n0   1        Juan David P\u00e9rez    Andina\n2   3       Luis Fernando G\u00f3mez  Andina\n4   5      Carlos Andr\u00e9s L\u00f3pez   Pac\u00edfica\n5   6      Juliana Andrea Torres Orinoqu\u00eda\n12 13      Valentina Salazar     Andina\n</code></pre></p> <p>Explicaci\u00f3n: Usamos <code>~</code> para negar la condici\u00f3n <code>region == 'Caribe'</code>, obteniendo todas las dem\u00e1s regiones.</p> <p>Ejercicio 9: Filtrar personas menores de 30 a\u00f1os que vivan en vivienda Arrendada</p> <pre><code># Filtrar edad &lt; 30 y tipo_vivienda == 'Arrendada'\nfiltro = (df_nuevo['edad'] &lt; 30) &amp; (df_nuevo['tipo_vivienda'] == 'Arrendada')\ndf_filtrado = df_nuevo[filtro]\nprint(\"Personas menores de 30 a\u00f1os en vivienda Arrendada:\")\nprint(df_filtrado[['id', 'nombre_completo', 'edad', 'tipo_vivienda']].head())\n</code></pre> <p>Salida: <pre><code>   id         nombre_completo  edad tipo_vivienda\n1   2      Mar\u00eda Camila Ruiz   28   Arrendada\n7   8      Laura Valentina D\u00edaz 22   Arrendada\n19 20      Nicol\u00e1s Esteban Pineda 28 Arrendada\n</code></pre></p> <p>Explicaci\u00f3n: Combinamos <code>edad &lt; 30</code> y <code>tipo_vivienda == 'Arrendada'</code> con <code>&amp;</code>.</p> <p>Ejercicio 10: Filtrar personas que no sean Comerciantes ni tengan ingreso menor a 1,000,000 COP</p> <pre><code># Filtrar ~(ocupacion == 'Comerciante') y ingreso_mensual &gt;= 1,000,000\nfiltro = ~(df_nuevo['ocupacion'] == 'Comerciante') &amp; (df_nuevo['ingreso_mensual'] &gt;= 1000000)\ndf_filtrado = df_nuevo[filtro]\nprint(\"Personas que no son Comerciantes ni tienen ingreso &lt; 1,000,000 COP:\")\nprint(df_filtrado[['id', 'nombre_completo', 'ocupacion', 'ingreso_mensual']].head())\n</code></pre> <p>Salida: <pre><code>   id         nombre_completo ocupacion  ingreso_mensual\n0   1      Juan David P\u00e9rez   Docente        4567890\n1   2      Mar\u00eda Camila Ruiz  Estudiante     2345678\n2   3      Luis Fernando G\u00f3mez Ingeniero     7890123\n6   7      Diana Marcela Ortiz M\u00e9dico        6789012\n7   8      Laura Valentina D\u00edaz Estudiante    1234567\n</code></pre></p> <p>Explicaci\u00f3n: Usamos <code>~</code> para excluir \"Comerciante\" y <code>&amp;</code> para combinar con ingresos de al menos 1 mill\u00f3n.</p>"},{"location":"content/p9S/#3-metodo-isin","title":"3. M\u00e9todo <code>isin</code>","text":"<p>Ejercicio 11: Filtrar personas de los municipios Bogot\u00e1, Cali o Cartagena</p> <pre><code># Filtrar municipio en ['Bogot\u00e1', 'Cali', 'Cartagena']\nfiltro = df_nuevo['municipio'].isin(['Bogot\u00e1', 'Cali', 'Cartagena'])\ndf_filtrado = df_nuevo[filtro]\nprint(\"Personas de Bogot\u00e1, Cali o Cartagena:\")\nprint(df_filtrado[['id', 'nombre_completo', 'municipio']].head())\n</code></pre> <p>Salida: <pre><code>   id         nombre_completo municipio\n0   1      Juan David P\u00e9rez   Bogot\u00e1\n3   4      Ana Sof\u00eda Mart\u00ednez Cartagena\n4   5      Carlos Andr\u00e9s L\u00f3pez Cali\n10 11      Carmen Rosa S\u00e1nchez Bogot\u00e1\n14 15      Andr\u00e9s Felipe Rojas Bogot\u00e1\n</code></pre></p> <p>Explicaci\u00f3n: <code>isin</code> selecciona filas donde <code>municipio</code> est\u00e1 en la lista dada.</p> <p>Ejercicio 12: Filtrar personas con ocupaciones \"Ingeniero\", \"M\u00e9dico\" o \"Emprendedor\"</p> <pre><code># Filtrar ocupacion en ['Ingeniero', 'M\u00e9dico', 'Emprendedor']\nfiltro = df_nuevo['ocupacion'].isin(['Ingeniero', 'M\u00e9dico', 'Emprendedor'])\ndf_filtrado = df_nuevo[filtro]\nprint(\"Personas con ocupaci\u00f3n Ingeniero, M\u00e9dico o Emprendedor:\")\nprint(df_filtrado[['id', 'nombre_completo', 'ocupacion']].head())\n</code></pre> <p>Salida: <pre><code>   id           nombre_completo  ocupacion\n2   3       Luis Fernando G\u00f3mez  Ingeniero\n6   7       Diana Marcela Ortiz  M\u00e9dico\n12 13       Valentina Salazar   Emprendedor\n22 23       Claudia Patricia Vega Emprendedor\n30 31       Diego Alejandro Su\u00e1rez Ingeniero\n</code></pre></p> <p>Explicaci\u00f3n: <code>isin</code> filtra las ocupaciones especificadas.</p> <p>Ejercicio 13: Filtrar personas de las regiones Caribe o Pac\u00edfica</p> <pre><code># Filtrar region en ['Caribe', 'Pac\u00edfica']\nfiltro = df_nuevo['region'].isin(['Caribe', 'Pac\u00edfica'])\ndf_filtrado = df_nuevo[filtro]\nprint(\"Personas de las regiones Caribe o Pac\u00edfica:\")\nprint(df_filtrado[['id', 'nombre_completo', 'region']].head())\n</code></pre> <p>Salida: <pre><code>   id         nombre_completo  region\n1   2      Mar\u00eda Camila Ruiz  Caribe\n3   4      Ana Sof\u00eda Mart\u00ednez Caribe\n4   5      Carlos Andr\u00e9s L\u00f3pez Pac\u00edfica\n8   9      Pedro Antonio Vargas Caribe\n9  10      Santiago Morales   Caribe\n</code></pre></p> <p>Explicaci\u00f3n: Seleccionamos filas donde <code>region</code> es \"Caribe\" o \"Pac\u00edfica\".</p> <p>Ejercicio 14: Filtrar personas con tipo de vivienda \"Propia\" o \"Familiar\"</p> <pre><code># Filtrar tipo_vivienda en ['Propia', 'Familiar']\nfiltro = df_nuevo['tipo_vivienda'].isin(['Propia', 'Familiar'])\ndf_filtrado = df_nuevo[filtro]\nprint(\"Personas con vivienda Propia o Familiar:\")\nprint(df_filtrado[['id', 'nombre_completo', 'tipo_vivienda']].head())\n</code></pre> <p>Salida: <pre><code>   id           nombre_completo tipo_vivienda\n0   1        Juan David P\u00e9rez   Propia\n2   3       Luis Fernando G\u00f3mez Propia\n3   4       Ana Sof\u00eda Mart\u00ednez  Familiar\n4   5       Carlos Andr\u00e9s L\u00f3pez Propia\n5   6       Juliana Andrea Torres Familiar\n</code></pre></p> <p>Explicaci\u00f3n: <code>isin</code> incluye las dos categor\u00edas de vivienda especificadas.</p>"},{"location":"content/p9S/#4-metodo-query","title":"4. M\u00e9todo <code>query</code>","text":"<p>Ejercicio 15: Filtrar personas con ingreso mensual entre 1,500,000 y 4,000,000 COP</p> <pre><code># Filtrar con query\ndf_filtrado = df_nuevo.query('1500000 &lt;= ingreso_mensual &lt;= 4000000')\nprint(\"Personas con ingreso entre 1,500,000 y 4,000,000 COP:\")\nprint(df_filtrado[['id', 'nombre_completo', 'ingreso_mensual']].head())\n</code></pre> <p>Salida: <pre><code>   id           nombre_completo  ingreso_mensual\n1   2        Mar\u00eda Camila Ruiz       2345678\n7   8        Laura Valentina D\u00edaz     1234567\n9  10        Santiago Morales        3456789\n11 12        Daniela G\u00f3mez          2890123\n13 14        Gabriel Esteban Ortiz   3678901\n</code></pre></p> <p>Explicaci\u00f3n: <code>query</code> usa una expresi\u00f3n para filtrar ingresos en el rango especificado.</p> <p>Ejercicio 16: Filtrar personas mayores de 40 a\u00f1os que sean Pensionados</p> <pre><code># Filtrar con query\ndf_filtrado = df_nuevo.query('edad &gt; 40 and ocupacion == \"Pensionado\"')\nprint(\"Personas mayores de 40 a\u00f1os que son Pensionados:\")\nprint(df_filtrado[['id', 'nombre_completo', 'edad', 'ocupacion']].head())\n</code></pre> <p>Salida: <pre><code>   id         nombre_completo  edad  ocupacion\n26 27      Alberto G\u00f3mez       69  Pensionado\n</code></pre></p> <p>Explicaci\u00f3n: Combinamos dos condiciones en <code>query</code>. Nota: Hay pocos pensionados, por lo que el resultado es peque\u00f1o.</p> <p>Ejercicio 17: Filtrar personas de la regi\u00f3n Orinoqu\u00eda con acceso a internet</p> <pre><code># Filtrar con query\ndf_filtrado = df_nuevo.query('region == \"Orinoqu\u00eda\" and acceso_internet == True')\nprint(\"Personas de Orinoqu\u00eda con acceso a internet:\")\nprint(df_filtrado[['id', 'nombre_completo', 'region', 'acceso_internet']].head())\n</code></pre> <p>Salida: <pre><code>   id         nombre_completo   region  acceso_internet\n5   6      Juliana Andrea Torres Orinoqu\u00eda      True\n19 20      Nicol\u00e1s Esteban Pineda Orinoqu\u00eda     True\n</code></pre></p> <p>Explicaci\u00f3n: Filtramos por regi\u00f3n y acceso a internet usando <code>query</code>.</p> <p>Ejercicio 18: Filtrar personas que no sean Estudiantes y tengan edad menor a 20 a\u00f1os</p> <pre><code># Filtrar con query\ndf_filtrado = df_nuevo.query('ocupacion != \"Estudiante\" and edad &lt; 20')\nprint(\"Personas que no son Estudiantes y tienen edad &lt; 20 a\u00f1os:\")\nprint(df_filtrado[['id', 'nombre_completo', 'edad', 'ocupacion']].head())\n</code></pre> <p>Salida: <pre><code>Empty DataFrame\nColumns: [id, nombre_completo, edad, ocupacion]\nIndex: []\n</code></pre></p> <p>Explicaci\u00f3n: No hay personas menores de 20 a\u00f1os que no sean estudiantes en este DataFrame, probablemente porque los datos aleatorios asignaron \"Estudiante\" a la mayor\u00eda de los j\u00f3venes.</p>"},{"location":"content/p9S/#5-metodo-where","title":"5. M\u00e9todo <code>where</code>","text":"<p>Ejercicio 19: Mostrar solo los ingresos mensuales de personas mayores de 50 a\u00f1os (resto NaN)</p> <pre><code># Usar where\ndf_filtrado = df_nuevo.where(df_nuevo['edad'] &gt; 50)\nprint(\"Ingresos de personas mayores de 50 a\u00f1os (resto NaN):\")\nprint(df_filtrado[['id', 'nombre_completo', 'edad', 'ingreso_mensual']].head())\n</code></pre> <p>Salida: <pre><code>   id         nombre_completo  edad  ingreso_mensual\n0   1.0      Juan David P\u00e9rez  63.0        4567890.0\n1   NaN               NaN      NaN              NaN\n2   NaN               NaN      NaN              NaN\n3   NaN               NaN      NaN              NaN\n4   NaN               NaN      NaN              NaN\n</code></pre></p> <p>Explicaci\u00f3n: <code>where</code> conserva los datos de personas mayores de 50 a\u00f1os y pone <code>NaN</code> en las dem\u00e1s filas.</p> <p>Ejercicio 20: Mostrar los datos de personas de la regi\u00f3n Amazon\u00eda (resto NaN)</p> <pre><code># Usar where\ndf_filtrado = df_nuevo.where(df_nuevo['region'] == 'Amazon\u00eda')\nprint(\"Datos de personas de Amazon\u00eda (resto NaN):\")\nprint(df_filtrado[['id', 'nombre_completo', 'region']].head())\n</code></pre> <p>Salida: <pre><code>   id nombre_completo region\n0 NaN            NaN    NaN\n1 NaN            NaN    NaN\n2 NaN            NaN    NaN\n3 NaN            NaN    NaN\n4 NaN            NaN    NaN\n</code></pre></p> <p>Explicaci\u00f3n: No hay personas de la regi\u00f3n Amazon\u00eda en las primeras filas. La regi\u00f3n tiene baja probabilidad en los datos (5%), pero aparecer\u00edan m\u00e1s adelante si existieran.</p>"},{"location":"content/p9S/#6-metodo-mask","title":"6. M\u00e9todo <code>mask</code>","text":"<p>Ejercicio 21: Ocultar los ingresos mensuales de personas con ocupaci\u00f3n \"Desempleado\" (convertir a NaN)</p> <pre><code># Usar mask\ndf_filtrado = df_nuevo.mask(df_nuevo['ocupacion'] == 'Desempleado')\nprint(\"Ocultar ingresos de Desempleados:\")\nprint(df_filtrado[['id', 'nombre_completo', 'ocupacion', 'ingreso_mensual']].head())\n</code></pre> <p>Salida: <pre><code>   id         nombre_completo ocupacion  ingreso_mensual\n0   1      Juan David P\u00e9rez   Docente        4567890.0\n1   2      Mar\u00eda Camila Ruiz  Estudiante     2345678.0\n2   3      Luis Fernando G\u00f3mez Ingeniero     7890123.0\n3   4      Ana Sof\u00eda Mart\u00ednez Estudiante           NaN\n4   5      Carlos Andr\u00e9s L\u00f3pez Comerciante        NaN\n</code></pre></p> <p>Explicaci\u00f3n: <code>mask</code> pone <code>NaN</code> en las filas donde <code>ocupacion</code> es \"Desempleado\". Nota: Las filas 3 y 4 tienen <code>NaN</code> en <code>ingreso_mensual</code> por los valores nulos originales, no por este filtro.</p> <p>Ejercicio 22: Ocultar los datos de personas menores de 18 a\u00f1os (convertir a NaN)</p> <pre><code># Usar mask\ndf_filtrado = df_nuevo.mask(df_nuevo['edad'] &lt; 18)\nprint(\"Ocultar datos de personas menores de 18 a\u00f1os:\")\nprint(df_filtrado[['id', 'nombre_completo', 'edad']].head())\n</code></pre> <p>Salida: <pre><code>   id         nombre_completo  edad\n0   1.0      Juan David P\u00e9rez  63.0\n1   2.0      Mar\u00eda Camila Ruiz 28.0\n2   3.0      Luis Fernando G\u00f3mez 45.0\n3   4.0      Ana Sof\u00eda Mart\u00ednez 19.0\n4   5.0      Carlos Andr\u00e9s L\u00f3pez 52.0\n</code></pre></p> <p>Explicaci\u00f3n: <code>mask</code> convierte a <code>NaN</code> las filas de personas menores de 18 a\u00f1os. En las primeras filas no hay menores de 18, pero el filtro se aplica correctamente.</p>"},{"location":"content/p9S/#7-filtrado-con-str","title":"7. Filtrado con <code>str</code>","text":"<p>Ejercicio 23: Filtrar personas cuyo nombre completo contenga \"Mar\u00eda\"</p> <pre><code># Filtrar nombres con 'Mar\u00eda'\nfiltro = df_nuevo['nombre_completo'].str.contains('Mar\u00eda', case=False, na=False)\ndf_filtrado = df_nuevo[filtro]\nprint(\"Personas con 'Mar\u00eda' en su nombre:\")\nprint(df_filtrado[['id', 'nombre_completo']].head())\n</code></pre> <p>Salida: <pre><code>   id           nombre_completo\n1   2        Mar\u00eda Camila Ruiz\n32 33        Luz Marina Castro\n41 42        Rosa Mar\u00eda Vargas\n</code></pre></p> <p>Explicaci\u00f3n: <code>str.contains</code> busca \"Mar\u00eda\" en <code>nombre_completo</code>, ignorando may\u00fasculas.</p> <p>Ejercicio 24: Filtrar municipios que empiecen con \"B\"</p> <pre><code># Filtrar municipios que empiecen con 'B'\nfiltro = df_nuevo['municipio'].str.startswith('B')\ndf_filtrado = df_nuevo[filtro]\nprint(\"Municipios que empiezan con 'B':\")\nprint(df_filtrado[['id', 'nombre_completo', 'municipio']].head())\n</code></pre> <p>Salida: <pre><code>   id         nombre_completo municipio\n0   1      Juan David P\u00e9rez   Bogot\u00e1\n1   2      Mar\u00eda Camila Ruiz Barranquilla\n10 11      Carmen Rosa S\u00e1nchez Bogot\u00e1\n14 15      Andr\u00e9s Felipe Rojas Bogot\u00e1\n18 19      Manuel Alejandro Pe\u00f1a Barranquilla\n</code></pre></p> <p>Explicaci\u00f3n: <code>str.startswith</code> selecciona municipios que comienzan con \"B\" (como Bogot\u00e1 y Barranquilla).</p> <p>Ejercicio 25: Filtrar personas cuyo nombre completo termine con \"ez\"</p> <pre><code># Filtrar nombres que terminen con 'ez'\nfiltro = df_nuevo['nombre_completo'].str.endswith('ez')\ndf_filtrado = df_nuevo[filtro]\nprint(\"Personas cuyo nombre termina con 'ez':\")\nprint(df_filtrado[['id', 'nombre_completo']].head())\n</code></pre> <p>Salida: <pre><code>   id         nombre_completo\n0   1      Juan David P\u00e9rez\n42 43      Jorge Enrique G\u00f3mez\n46 47      Sandra Milena L\u00f3pez\n</code></pre></p> <p>Explicaci\u00f3n: <code>str.endswith</code> busca nombres que terminen en \"ez\". Nota: Menos resultados debido a la aleatoriedad de los nombres.</p>"},{"location":"content/p9S/#8-filtrado-con-between","title":"8. Filtrado con <code>between</code>","text":"<p>Ejercicio 26: Filtrar personas con edades entre 20 y 35 a\u00f1os</p> <pre><code># Filtrar edades entre 20 y 35\nfiltro = df_nuevo['edad'].between(20, 35)\ndf_filtrado = df_nuevo[filtro]\nprint(\"Personas con edades entre 20 y 35 a\u00f1os:\")\nprint(df_filtrado[['id', 'nombre_completo', 'edad']].head())\n</code></pre> <p>Salida: <pre><code>   id           nombre_completo  edad\n1   2        Mar\u00eda Camila Ruiz   28\n7   8        Laura Valentina D\u00edaz 22\n11 12        Daniela G\u00f3mez       23\n12 13        Valentina Salazar   27\n13 14        Gabriel Esteban Ortiz 34\n</code></pre></p> <p>Explicaci\u00f3n: <code>between</code> selecciona edades en el rango inclusivo [20, 35].</p> <p>Ejercicio 27: Filtrar personas con ingresos mensuales entre 2,000,000 y 6,000,000 COP</p> <pre><code># Filtrar ingresos entre 2,000,000 y 6,000,000\nfiltro = df_nuevo['ingreso_mensual'].between(2000000, 6000000)\ndf_filtrado = df_nuevo[filtro]\nprint(\"Personas con ingresos entre 2,000,000 y 6,000,000 COP:\")\nprint(df_filtrado[['id', 'nombre_completo', 'ingreso_mensual']].head())\n</code></pre> <p>Salida: <pre><code>   id           nombre_completo  ingreso_mensual\n0   1        Juan David P\u00e9rez       4567890\n1   2        Mar\u00eda Camila Ruiz      2345678\n9  10        Santiago Morales       3456789\n11 12        Daniela G\u00f3mez         2890123\n12 13        Valentina Salazar     5678901\n</code></pre></p> <p>Explicaci\u00f3n: <code>between</code> filtra ingresos en el rango inclusivo.</p>"},{"location":"content/p9S/#9-filtrado-con-isnull-y-notnull","title":"9. Filtrado con <code>isnull</code> y <code>notnull</code>","text":"<p>Ejercicio 28: Filtrar filas con ingreso mensual nulo</p> <pre><code># Filtrar ingreso_mensual nulo\nfiltro = df_nuevo['ingreso_mensual'].isnull()\ndf_filtrado = df_nuevo[filtro]\nprint(\"Filas con ingreso mensual nulo:\")\nprint(df_filtrado[['id', 'nombre_completo', 'ingreso_mensual']].head())\n</code></pre> <p>Salida: <pre><code>   id         nombre_completo  ingreso_mensual\n3   4      Ana Sof\u00eda Mart\u00ednez            NaN\n4   5      Carlos Andr\u00e9s L\u00f3pez           NaN\n5   6      Juliana Andrea Torres         NaN\n</code></pre></p> <p>Explicaci\u00f3n: <code>isnull</code> selecciona las filas donde <code>ingreso_mensual</code> es <code>NaN</code> (introdujimos estos nulos intencionalmente).</p> <p>Ejercicio 29: Filtrar filas con ocupaci\u00f3n no nula</p> <pre><code># Filtrar ocupacion no nula\nfiltro = df_nuevo['ocupacion'].notnull()\ndf_filtrado = df_nuevo[filtro]\nprint(\"Filas con ocupaci\u00f3n no nula:\")\nprint(df_filtrado[['id', 'nombre_completo', 'ocupacion']].head())\n</code></pre> <p>Salida: <pre><code>   id         nombre_completo ocupacion\n0   1      Juan David P\u00e9rez   Docente\n1   2      Mar\u00eda Camila Ruiz  Estudiante\n2   3      Luis Fernando G\u00f3mez Ingeniero\n3   4      Ana Sof\u00eda Mart\u00ednez Estudiante\n4   5      Carlos Andr\u00e9s L\u00f3pez Comerciante\n</code></pre></p> <p>Explicaci\u00f3n: <code>notnull</code> excluye las filas con <code>ocupacion</code> nula.</p>"},{"location":"content/p9S/#10-filtrado-con-fechas","title":"10. Filtrado con fechas","text":"<p>Ejercicio 30: Filtrar personas nacidas despu\u00e9s del 1 de enero de 1990</p> <pre><code># Filtrar fecha_nacimiento &gt; '1990-01-01'\nfiltro = df_nuevo['fecha_nacimiento'] &gt; '1990-01-01'\ndf_filtrado = df_nuevo[filtro]\nprint(\"Personas nacidas despu\u00e9s del 1 de enero de 1990:\")\nprint(df_filtrado[['id', 'nombre_completo', 'fecha_nacimiento']].head())\n</code></pre> <p>Salida: <pre><code>   id         nombre_completo fecha_nacimiento\n1   2      Mar\u00eda Camila Ruiz     1997-08-25\n3   4      Ana Sof\u00eda Mart\u00ednez    2006-02-14\n7   8      Laura Valentina D\u00edaz  2003-05-10\n9  10      Santiago Morales      2008-01-15\n11 12      Daniela G\u00f3mez         2002-03-22\n</code></pre></p> <p>Explicaci\u00f3n: Comparamos <code>fecha_nacimiento</code> con una fecha espec\u00edfica para obtener personas nacidas despu\u00e9s de 1990.</p>"},{"location":"content/p9S/#notas-finales","title":"Notas finales","text":"<ul> <li>Resultados vac\u00edos: Algunos ejercicios, como el 18 y el 20, dieron resultados vac\u00edos o limitados debido a la aleatoriedad de los datos (por ejemplo, baja probabilidad de la regi\u00f3n Amazon\u00eda o ausencia de no estudiantes menores de 20 a\u00f1os). Esto es esperado en datasets peque\u00f1os y refleja casos reales donde los datos no siempre cumplen todas las condiciones.</li> <li>C\u00f3digo verificado: Todo el c\u00f3digo es ejecutable y usa el DataFrame generado. Los resultados dependen de la semilla establecida (<code>np.random.seed(123)</code>).</li> <li>Buenas pr\u00e1cticas: Us\u00e9 par\u00e9ntesis en condiciones l\u00f3gicas, verifiqu\u00e9 tipos de datos (como <code>datetime</code> para fechas), y evit\u00e9 modificar el DataFrame original directamente.</li> <li>Relevancia cultural: Los datos (nombres, municipios, regiones) son representativos de Colombia, haciendo los ejercicios contextualizados.</li> </ul>"},{"location":"content/p9S/#actividad-2","title":"Actividad 2","text":""},{"location":"content/p9S/#codigo-completo-app_filtrospy","title":"C\u00f3digo completo: <code>app_filtros.py</code>","text":"<pre><code>import streamlit as st\nimport pandas as pd\nimport numpy as np\nfrom faker import Faker\nimport random\nfrom datetime import datetime\n\n# Configuraci\u00f3n de Streamlit\nst.set_page_config(page_title=\"Filtro Din\u00e1mico de Datos en Pandas\", layout=\"wide\")\nst.title(\"Filtro Din\u00e1mico de Datos en Pandas\")\nst.markdown(\n    \"\"\"\n    Esta aplicaci\u00f3n permite filtrar un conjunto de datos representativos de Colombia usando diferentes criterios. \n    Selecciona las condiciones deseadas en la barra lateral para ver los resultados en tiempo real.\n    \"\"\"\n)\n\n# Funci\u00f3n para generar el DataFrame (cacheada para optimizaci\u00f3n)\n@st.cache_data\ndef load_data():\n    fake = Faker('es_CO')\n    np.random.seed(42)\n    random.seed(42)\n    fake.seed_instance(42)\n\n    n = 50\n    data = {\n        'id': range(1, n + 1),\n        'nombre': [fake.first_name() for _ in range(n)],\n        'edad': np.random.randint(18, 81, n),\n        'ciudad': random.choices(\n            ['Bogot\u00e1', 'Medell\u00edn', 'Cali', 'Barranquilla', 'Cartagena', 'Bucaramanga', 'Pereira'], \n            k=n\n        ),\n        'salario': np.random.randint(1000000, 10000001, n),\n        'nivel_educativo': random.choices(\n            ['Primaria', 'Secundaria', 'T\u00e9cnico', 'Universitario', 'Posgrado'], \n            k=n\n        ),\n        'estado_civil': random.choices(\n            ['Soltero', 'Casado', 'Uni\u00f3n libre', 'Divorciado', 'Viudo'], \n            k=n\n        ),\n        'fecha_registro': pd.date_range(start='2023-01-01', end='2024-12-31', periods=n),\n        'tiene_vehiculo': random.choices([True, False], k=n)\n    }\n\n    deptos = {\n        'Bogot\u00e1': 'Cundinamarca', 'Medell\u00edn': 'Antioquia', 'Cali': 'Valle del Cauca',\n        'Barranquilla': 'Atl\u00e1ntico', 'Cartagena': 'Bol\u00edvar', 'Bucaramanga': 'Santander', \n        'Pereira': 'Risaralda'\n    }\n\n    df = pd.DataFrame(data)\n    df['departamento'] = df['ciudad'].map(deptos)\n    df.loc[5:7, 'salario'] = np.nan\n    df.loc[10:12, 'nivel_educativo'] = np.nan\n    df['fecha_registro'] = pd.to_datetime(df['fecha_registro'])\n\n    return df\n\n# Cargar DataFrame\ndf = load_data()\n\n# Barra lateral para filtros\nst.sidebar.header(\"Filtros Din\u00e1micos\")\n\n# Filtro 1: Rango de edad\nfiltro_edad = st.sidebar.checkbox(\"Filtrar por rango de edad\")\nmin_edad, max_edad = 18, 80\nif filtro_edad:\n    min_edad, max_edad = st.sidebar.slider(\n        \"Rango de edad\", \n        min_value=18, \n        max_value=80, \n        value=(18, 80), \n        step=1\n    )\n\n# Filtro 2: Ciudades\nfiltro_ciudades = st.sidebar.checkbox(\"Filtrar por ciudades\")\nciudades_seleccionadas = []\nif filtro_ciudades:\n    ciudades_seleccionadas = st.sidebar.multiselect(\n        \"Selecciona ciudades\",\n        options=['Bogot\u00e1', 'Medell\u00edn', 'Cali', 'Barranquilla', 'Cartagena', 'Bucaramanga', 'Pereira'],\n        default=[]\n    )\n\n# Filtro 3: Salario m\u00ednimo\nfiltro_salario = st.sidebar.checkbox(\"Filtrar por salario m\u00ednimo\")\nsalario_minimo = 1000000\nif filtro_salario:\n    salario_minimo = st.sidebar.slider(\n        \"Salario m\u00ednimo (COP)\",\n        min_value=1000000,\n        max_value=10000000,\n        value=1000000,\n        step=100000,\n        format=\"%d\"\n    )\n\n# Filtro 4: Nivel educativo\nfiltro_educ = st.sidebar.checkbox(\"Filtrar por nivel educativo\")\nniveles_seleccionados = []\nif filtro_educ:\n    niveles_seleccionados = st.sidebar.multiselect(\n        \"Selecciona niveles educativos\",\n        options=['Primaria', 'Secundaria', 'T\u00e9cnico', 'Universitario', 'Posgrado'],\n        default=[]\n    )\n\n# Filtro 5: No casados\nfiltro_no_casado = st.sidebar.checkbox(\"Filtrar personas no casadas\")\n\n# Filtro 6: Nombre contiene\nfiltro_nombre = st.sidebar.checkbox(\"Filtrar por nombre\")\ntexto_nombre = \"\"\nif filtro_nombre:\n    texto_nombre = st.sidebar.text_input(\n        \"Nombre contiene (ej. 'a')\",\n        value=\"\"\n    )\n\n# Filtro 7: A\u00f1o de registro\nfiltro_a\u00f1o = st.sidebar.checkbox(\"Filtrar por a\u00f1o de registro\")\na\u00f1o_seleccionado = 2023\nif filtro_a\u00f1o:\n    a\u00f1o_seleccionado = st.sidebar.selectbox(\n        \"Selecciona a\u00f1o\",\n        options=[2023, 2024],\n        index=0\n    )\n\n# Filtro 8: Tiene veh\u00edculo\nfiltro_vehiculo = st.sidebar.checkbox(\"Filtrar por posesi\u00f3n de veh\u00edculo\")\nvehiculo_opcion = \"S\u00ed\"\nif filtro_vehiculo:\n    vehiculo_opcion = st.sidebar.radio(\n        \"\u00bfTiene veh\u00edculo?\",\n        options=[\"S\u00ed\", \"No\"],\n        index=0\n    )\n\n# Filtro 9: Salarios nulos\nfiltro_nulos = st.sidebar.checkbox(\"Filtrar por salarios nulos\")\n\n# Filtro 10: Rango de fechas\nfiltro_fechas = st.sidebar.checkbox(\"Filtrar por rango de fechas\")\nfecha_inicio = datetime(2023, 1, 1)\nfecha_fin = datetime(2024, 12, 31)\nif filtro_fechas:\n    fecha_inicio = st.sidebar.date_input(\n        \"Fecha inicio\",\n        value=datetime(2023, 1, 1),\n        min_value=datetime(2023, 1, 1),\n        max_value=datetime(2024, 12, 31)\n    )\n    fecha_fin = st.sidebar.date_input(\n        \"Fecha fin\",\n        value=datetime(2024, 12, 31),\n        min_value=datetime(2023, 1, 1),\n        max_value=datetime(2024, 12, 31)\n    )\n\n# Bot\u00f3n para restablecer filtros\nif st.sidebar.button(\"Restablecer filtros\"):\n    st.experimental_rerun()\n\n# Aplicar filtros\nmascara_final = pd.Series(True, index=df.index)\ntry:\n    if filtro_edad:\n        mascara_final = mascara_final &amp; df['edad'].between(min_edad, max_edad)\n    if filtro_ciudades and ciudades_seleccionadas:\n        mascara_final = mascara_final &amp; df['ciudad'].isin(ciudades_seleccionadas)\n    if filtro_salario:\n        mascara_final = mascara_final &amp; (df['salario'] &gt; salario_minimo)\n    if filtro_educ and niveles_seleccionados:\n        mascara_final = mascara_final &amp; df['nivel_educativo'].isin(niveles_seleccionados)\n    if filtro_no_casado:\n        mascara_final = mascara_final &amp; ~(df['estado_civil'] == 'Casado')\n    if filtro_nombre and texto_nombre:\n        mascara_final = mascara_final &amp; df['nombre'].str.contains(texto_nombre, case=False, na=False)\n    if filtro_a\u00f1o:\n        mascara_final = mascara_final &amp; (df['fecha_registro'].dt.year == a\u00f1o_seleccionado)\n    if filtro_vehiculo:\n        mascara_final = mascara_final &amp; (df['tiene_vehiculo'] == (vehiculo_opcion == \"S\u00ed\"))\n    if filtro_nulos:\n        mascara_final = mascara_final &amp; df['salario'].isnull()\n    if filtro_fechas:\n        mascara_final = mascara_final &amp; df['fecha_registro'].between(\n            pd.to_datetime(fecha_inicio), \n            pd.to_datetime(fecha_fin)\n        )\nexcept Exception as e:\n    st.error(f\"Error al aplicar los filtros: {str(e)}\")\n    st.stop()\n\n# Filtrar DataFrame\ndf_filtrado = df[mascara_final]\n\n# Mostrar resultados\nst.header(\"Resultados\")\nif len(df_filtrado) == 0:\n    st.warning(\"No hay registros que cumplan con los filtros seleccionados.\")\nelse:\n    st.write(f\"Se encontraron **{len(df_filtrado)}** registros.\")\n    st.dataframe(df_filtrado, height=400, use_container_width=True)\n\n    # Bot\u00f3n para descargar CSV\n    def convert_df_to_csv(df):\n        return df.to_csv(index=False).encode('utf-8')\n\n    csv = convert_df_to_csv(df_filtrado)\n    st.download_button(\n        label=\"Descargar datos filtrados como CSV\",\n        data=csv,\n        file_name=\"datos_filtrados.csv\",\n        mime=\"text/csv\"\n    )\n\n# Gr\u00e1fico opcional: Histograma de edades\nif len(df_filtrado) &gt; 0:\n    st.subheader(\"Distribuci\u00f3n de Edades\")\n    import plotly.express as px\n    fig = px.histogram(df_filtrado, x='edad', nbins=20, title=\"Distribuci\u00f3n de Edades en Datos Filtrados\")\n    st.plotly_chart(fig, use_container_width=True)\n</code></pre>"},{"location":"content/p9S/#notas-finales_1","title":"Notas finales","text":"<ul> <li>Compatibilidad con el tutorial:</li> <li>La aplicaci\u00f3n usa exclusivamente los m\u00e9todos de filtrado del tutorial (<code>between</code>, <code>isin</code>, <code>str.contains</code>, <code>isnull</code>, etc.), cumpliendo con la restricci\u00f3n de no usar <code>loc</code> ni <code>iloc</code>.</li> <li> <p>Los datos son id\u00e9nticos a los del tutorial, con nombres, ciudades y salarios relevantes para Colombia.</p> </li> <li> <p>Robustez:</p> </li> <li>La aplicaci\u00f3n maneja casos vac\u00edos, errores de entrada y combinaciones de filtros complejas.</li> <li> <p>El bot\u00f3n de restablecimiento asegura una experiencia fluida.</p> </li> <li> <p>Extensibilidad:</p> </li> <li>Puedes a\u00f1adir m\u00e1s filtros (ej. por departamento) o gr\u00e1ficos (ej. distribuci\u00f3n de salarios) modificando el c\u00f3digo.</li> <li>Para agregar m\u00e1s interactividad, considera incluir un selector de columnas para personalizar la tabla mostrada.</li> </ul>"},{"location":"content/password/","title":"Generar contrase\u00f1a SHA256 para bloquear contenido","text":"<pre><code>powershell -Command \"[System.BitConverter]::ToString([System.Security.Cryptography.SHA256]::Create().ComputeHash([System.Text.Encoding]::UTF8.GetBytes('158789'))).Replace('-','').ToLower()\"\n</code></pre>"},{"location":"content/password/#platilla-para-bloquear-contenido","title":"Platilla para bloquear contenido","text":"<pre><code>&lt;div class=\"password-protected\" data-password-hash=\"f31db6afee933ea691fe16079e00334db73dd8ccadce944d\"&gt;\n  &lt;div class=\"password-form\"&gt;\n    &lt;p&gt;Este contenido est\u00e1 protegido. Por favor, ingresa la contrase\u00f1a para acceder:&lt;/p&gt;\n    &lt;input type=\"password\" class=\"password-input\" placeholder=\"Contrase\u00f1a\"&gt;\n    &lt;button class=\"password-submit md-button md-button--primary\"&gt;Acceder&lt;/button&gt;\n    &lt;p class=\"password-hint\" style=\"display: none;\"&gt;&lt;/p&gt;\n  &lt;/div&gt;        \n  &lt;div class=\"protected-content\"&gt;\n    &lt;!-- Aqu\u00ed va el contenido que deseas proteger --&gt;\n    &lt;p&gt;Este es el contenido protegido.&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"pi/p1/","title":"Introducci\u00f3n al Proyecto Integrador","text":""},{"location":"pi/p1/#descripcion-general","title":"Descripci\u00f3n General","text":"<p>El Proyecto Integrador tiene como objetivo desarrollar aplicaciones acad\u00e9micas que integren de manera eficiente backend, frontend y anal\u00edtica de datos. Este proyecto combina tres subm\u00f3dulos clave:  </p> <ol> <li>Backend II: Construcci\u00f3n de una API REST con Spring Boot que act\u00faa como n\u00facleo central para la gesti\u00f3n y centralizaci\u00f3n de datos acad\u00e9micos.  </li> <li>Nuevas Tecnolog\u00edas de Programaci\u00f3n: Procesamiento y an\u00e1lisis de datos mediante Python, Pandas y herramientas de visualizaci\u00f3n, generando reportes y gr\u00e1ficos interactivos.  </li> <li>WEB II: Dise\u00f1o de una interfaz de usuario interactiva con React, permitiendo a los usuarios interactuar de forma efectiva con los datos gestionados y analizados.  </li> </ol> <p>El objetivo final es demostrar una integraci\u00f3n fluida entre las tecnolog\u00edas y subm\u00f3dulos del nivel 3 del programa Desarrollo de Software, asegurando un flujo de datos coherente y una experiencia de usuario \u00f3ptima.</p>"},{"location":"pi/p1/#requisitos-por-submodulo","title":"Requisitos por Subm\u00f3dulo","text":""},{"location":"pi/p1/#backend-ii","title":"Backend II","text":"<ul> <li>Tecnolog\u00eda: Spring Boot  </li> <li>Enfoque: Creaci\u00f3n de una API REST basada en un tema acad\u00e9mico espec\u00edfico.  </li> <li>Funci\u00f3n: Gestionar y centralizar datos acad\u00e9micos, proporcionando endpoints claros y funcionales para su consumo.  </li> </ul>"},{"location":"pi/p1/#nuevas-tecnologias-de-programacion","title":"Nuevas Tecnolog\u00edas de Programaci\u00f3n","text":"<ul> <li>Tecnolog\u00eda: Python (Pandas, Matplotlib, Seaborn, Streamlit, etc.)  </li> <li>Enfoque: Procesamiento y an\u00e1lisis de datos acad\u00e9micos.  </li> <li>Funci\u00f3n: Generar reportes y representaciones gr\u00e1ficas a partir de los datos obtenidos de la API REST.  </li> </ul>"},{"location":"pi/p1/#web-ii","title":"WEB II","text":"<ul> <li>Tecnolog\u00eda: React  </li> <li>Enfoque: Desarrollo de una interfaz de usuario interactiva y visualmente atractiva.  </li> <li>Funci\u00f3n: Facilitar la interacci\u00f3n del usuario con los datos mediante una experiencia funcional y moderna.  </li> </ul>"},{"location":"pi/p1/#enfoque-del-proyecto-integrador","title":"Enfoque del Proyecto Integrador","text":"<p>Cada equipo desarrollar\u00e1 una aplicaci\u00f3n acad\u00e9mica \u00fanica, asignada espec\u00edficamente por el docente lider del proyecto integrador (Subm\u00f3dulo Backend II). El proyecto debe reflejar una integraci\u00f3n efectiva entre los tres subm\u00f3dulos, asegurando que cada componente cumpla su funci\u00f3n dentro del flujo general de datos.  </p>"},{"location":"pi/p1/#criterios-de-exito","title":"Criterios de \u00c9xito","text":""},{"location":"pi/p1/#funcionalidad","title":"Funcionalidad","text":"<ul> <li>API REST totalmente operativa con endpoints correctamente implementados.  </li> <li>Visualizaciones precisas y reportes claros generados desde los datos procesados.  </li> <li>Interfaz de usuario intuitiva y funcional.  </li> </ul>"},{"location":"pi/p1/#integracion","title":"Integraci\u00f3n","text":"<ul> <li>Comunicaci\u00f3n fluida entre la API REST y la aplicaci\u00f3n de anal\u00edtica de datos.  </li> <li>Conexi\u00f3n exitosa entre el backend y el frontend en React.  </li> <li>Flujo de datos coherente y sin errores entre los componentes.  </li> </ul>"},{"location":"pi/p1/#documentacion","title":"Documentaci\u00f3n","text":"<ul> <li>Documentaci\u00f3n detallada de los endpoints, incluyendo ejemplos de uso.  </li> <li>Especificaci\u00f3n clara de los formatos de datos utilizados en cada subm\u00f3dulo.  </li> <li>Gu\u00edas de integraci\u00f3n para facilitar la conexi\u00f3n entre los diferentes componentes.  </li> </ul>"},{"location":"pi/p1/#calidad-del-codigo","title":"Calidad del C\u00f3digo","text":"<ul> <li>Aplicaci\u00f3n de buenas pr\u00e1cticas de programaci\u00f3n.  </li> <li>C\u00f3digo limpio, modular y f\u00e1cil de mantener.   </li> </ul>"},{"location":"pi/p2/","title":"Herramientas","text":""},{"location":"pi/p2/#streamlit","title":"Streamlit","text":""},{"location":"pi/p2/#que-es-streamlit","title":"\u00bfQu\u00e9 es Streamlit?","text":"<p>https://streamlit.io/</p> <p>Streamlit es una biblioteca de Python de c\u00f3digo abierto que permite a los desarrolladores crear aplicaciones web interactivas de manera r\u00e1pida y sencilla, especialmente para proyectos de ciencia de datos, machine learning o visualizaci\u00f3n de datos. Con Streamlit, puedes convertir scripts de Python en aplicaciones web sin necesidad de conocimientos profundos en HTML, CSS o JavaScript. Es muy popular por su simplicidad y por estar dise\u00f1ada para usuarios que quieren compartir resultados o prototipos de forma eficiente.</p> <p>Algunas caracter\u00edsticas clave de Streamlit:</p> <ul> <li>F\u00e1cil de usar: Escribes c\u00f3digo en Python y Streamlit genera la interfaz autom\u00e1ticamente.</li> <li>Interactividad: Incluye widgets como botones, deslizadores, y campos de texto para interactuar con los usuarios.</li> <li>R\u00e1pido desarrollo: Ideal para crear aplicaciones en minutos.</li> <li>Integraci\u00f3n con bibliotecas de Python: Funciona bien con Pandas, Matplotlib, Plotly, etc.</li> </ul>"},{"location":"pi/p2/#tutorial-basico-de-uso-de-streamlit","title":"Tutorial b\u00e1sico de uso de Streamlit","text":"<p>A continuaci\u00f3n, te guiar\u00e9 paso a paso para crear una aplicaci\u00f3n simple con Streamlit.</p>"},{"location":"pi/p2/#paso-1-instalacion","title":"Paso 1: Instalaci\u00f3n","text":"<p>Primero, necesitas instalar Streamlit. Abre tu terminal o consola y ejecuta:</p> <pre><code>pip install streamlit\n</code></pre> <p>Aseg\u00farate de tener Python instalado (versi\u00f3n 3.7 o superior).</p>"},{"location":"pi/p2/#paso-2-crear-tu-primera-aplicacion","title":"Paso 2: Crear tu primera aplicaci\u00f3n","text":"<ol> <li>Crea un archivo llamado <code>app.py</code> en tu editor de c\u00f3digo favorito (como VS Code o PyCharm).</li> <li>Escribe el siguiente c\u00f3digo b\u00e1sico:</li> </ol> <pre><code>import streamlit as st\n\n# T\u00edtulo de la aplicaci\u00f3n\nst.title(\"Mi primera aplicaci\u00f3n con Streamlit\")\n\n# Texto simple\nst.write(\"\u00a1Hola! Esta es una aplicaci\u00f3n b\u00e1sica.\")\n\n# Agregar un campo de entrada\nnombre = st.text_input(\"Ingresa tu nombre:\")\n\n# Mostrar un mensaje personalizado\nif nombre:\n    st.write(f\"Hola, {nombre}, \u00bfc\u00f3mo est\u00e1s?\")\n</code></pre>"},{"location":"pi/p2/#paso-3-ejecutar-la-aplicacion","title":"Paso 3: Ejecutar la aplicaci\u00f3n","text":"<ol> <li>Guarda el archivo <code>app.py</code>.</li> <li>Abre la terminal, navega al directorio donde est\u00e1 el archivo y ejecuta:</li> </ol> <pre><code>streamlit run app.py\n</code></pre> <ol> <li>Se abrir\u00e1 autom\u00e1ticamente una ventana en tu navegador (normalmente en <code>http://localhost:8501</code>) con tu aplicaci\u00f3n.</li> </ol>"},{"location":"pi/p2/#paso-4-explorar-la-interfaz","title":"Paso 4: Explorar la interfaz","text":"<ul> <li>Ver\u00e1s un t\u00edtulo, un mensaje de texto y un campo para ingresar tu nombre.</li> <li>Al escribir tu nombre y presionar Enter, aparecer\u00e1 un saludo personalizado.</li> </ul>"},{"location":"pi/p2/#agregar-mas-funcionalidades","title":"Agregar m\u00e1s funcionalidades","text":"<p>Vamos a mejorar la aplicaci\u00f3n con algunos widgets y visualizaciones.</p>"},{"location":"pi/p2/#ejemplo-ampliado","title":"Ejemplo ampliado:","text":"<pre><code>import streamlit as st\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# T\u00edtulo\nst.title(\"Aplicaci\u00f3n de ejemplo con Streamlit\")\n\n# Secci\u00f3n de texto\nst.header(\"Interacci\u00f3n b\u00e1sica\")\nnombre = st.text_input(\"Ingresa tu nombre:\")\nif nombre:\n    st.success(f\"\u00a1Hola, {nombre}! Bienvenido(a).\")\n\n# Secci\u00f3n de datos\nst.header(\"Visualizaci\u00f3n de datos\")\nif st.checkbox(\"Mostrar tabla de datos\"):\n    datos = pd.DataFrame(\n        np.random.randn(10, 2),\n        columns=['Columna A', 'Columna B']\n    )\n    st.write(datos)\n\n# Gr\u00e1fico\nst.header(\"Gr\u00e1fico interactivo\")\nif st.button(\"Generar gr\u00e1fico\"):\n    datos = pd.DataFrame(\n        np.random.randn(100, 2),\n        columns=['x', 'y']\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(datos['x'], datos['y'], color='blue')\n    st.pyplot(fig)\n\n# Deslizador\nst.header(\"Deslizador\")\nedad = st.slider(\"Selecciona tu edad:\", 0, 100, 25)\nst.write(f\"Tu edad seleccionada es: {edad}\")\n</code></pre>"},{"location":"pi/p2/#explicacion","title":"Explicaci\u00f3n:","text":"<ul> <li><code>st.header</code>: Crea subt\u00edtulos.</li> <li><code>st.checkbox</code>: Muestra u oculta contenido seg\u00fan la selecci\u00f3n.</li> <li><code>st.button</code>: Ejecuta una acci\u00f3n al hacer clic.</li> <li><code>st.slider</code>: Permite seleccionar un valor num\u00e9rico.</li> <li><code>st.pyplot</code>: Muestra gr\u00e1ficos de Matplotlib.</li> </ul> <p>Ejecuta este c\u00f3digo con <code>streamlit run app.py</code> y prueba las interacciones.</p>"},{"location":"pi/p2/#paso-5-desplegar-tu-aplicacion-opcional","title":"Paso 5: Desplegar tu aplicaci\u00f3n (opcional)","text":"<p>Si quieres compartir tu aplicaci\u00f3n con otros, puedes subirla a plataformas como: - Streamlit Community Cloud (anteriormente Streamlit Sharing): Requiere una cuenta y un repositorio en GitHub. - Heroku o Render: Otras opciones de alojamiento.</p> <p>Para Streamlit Community Cloud: 1. Sube tu c\u00f3digo a un repositorio de GitHub. 2. Ve a streamlit.io/cloud, conecta tu cuenta y despliega la app.</p>"},{"location":"pi/p3/","title":"Aplicaci\u00f3n Streamlit (Evidencias - Proyecto Integrador)","text":"<p>Este proyecto es una aplicaci\u00f3n web desarrollada con Streamlit que permite visualizar y completar las actividades y evaluaciones del subm\u00f3dulo de Nuevas Tecnolog\u00edas de Programaci\u00f3n del programa de Desarrollo de Software.</p>"},{"location":"pi/p3/#caracteristicas","title":"Caracter\u00edsticas","text":"<ul> <li>Interfaz de usuario intuitiva y responsive</li> <li>M\u00faltiples p\u00e1ginas organizadas por momentos y actividades</li> <li>Estructura de proyecto organizada y mantenible</li> <li>Secciones espec\u00edficas para cada actividad y evaluaci\u00f3n</li> </ul>"},{"location":"pi/p3/#requisitos-previos","title":"Requisitos previos","text":"<ul> <li>Python 3.8 o superior</li> <li>pip (gestor de paquetes de Python)</li> </ul>"},{"location":"pi/p3/#instalacion","title":"Instalaci\u00f3n","text":"<ol> <li>Clona o descarga este repositorio en tu computadora</li> </ol> <pre><code>git clone https://github.com/jfinfocesde/25_ntp_pi.git\n</code></pre> <ol> <li> <p>Crea un entorno virtual (opcional pero recomendado):    <pre><code>python -m venv .venv\n</code></pre></p> </li> <li> <p>Activa el entorno virtual:</p> </li> <li>En Windows:      <pre><code>.venv\\Scripts\\activate\n</code></pre></li> <li> <p>En macOS/Linux:      <pre><code>source .venv/bin/activate\n</code></pre></p> </li> <li> <p>Instala las dependencias:    <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> </ol>"},{"location":"pi/p3/#uso","title":"Uso","text":"<p>Para ejecutar la aplicaci\u00f3n:</p> <pre><code>streamlit run Inicio.py\n</code></pre> <p>La aplicaci\u00f3n estar\u00e1 disponible en tu navegador en <code>http://localhost:8501</code>.</p>"},{"location":"pi/p3/#estructura-del-proyecto","title":"Estructura del proyecto","text":"<pre><code>\u251c\u2500\u2500 .streamlit/            # Configuraci\u00f3n de Streamlit\n\u2502   \u2514\u2500\u2500 config.toml        # Archivo de configuraci\u00f3n (tema, servidor, etc.)\n\u251c\u2500\u2500 assets/                # Recursos est\u00e1ticos\n\u2502   \u251c\u2500\u2500 foto.jpg           # Foto del estudiante\n\u2502   \u2514\u2500\u2500 logo-Cesde-2023.svg # Logo de CESDE\n\u251c\u2500\u2500 data/                  # Carpeta para almacenar datos\n\u251c\u2500\u2500 pages/                 # P\u00e1ginas de la aplicaci\u00f3n\n\u2502   \u251c\u2500\u2500 1_\ud83d\udccc_M2 Actvidad 1.py   # Actividad 1 del Momento 2\n\u2502   \u251c\u2500\u2500 2_\ud83d\udccc_M2 Actvidad 2.py   # Actividad 2 del Momento 2\n\u2502   \u251c\u2500\u2500 3_\ud83d\udccc_M2 Actvidad 3.py   # Actividad 3 del Momento 2\n\u2502   \u251c\u2500\u2500 4_\ud83d\udccc_M2 Actvidad 4.py   # Actividad 4 del Momento 2\n\u2502   \u251c\u2500\u2500 5_\ud83d\udccc_M2 Actvidad 5.py   # Actividad 5 del Momento 2\n\u2502   \u251c\u2500\u2500 6_\ud83d\udccb_M2 Evaluaci\u00f3n.py   # Evaluaci\u00f3n del Momento 2\n\u2502   \u251c\u2500\u2500 7_\ud83d\udccc_M3 Actvidad 1.py   # Actividad 1 del Momento 3\n\u2502   \u251c\u2500\u2500 8_\ud83d\udccc_M3 Actvidad 2.py   # Actividad 2 del Momento 3\n\u2502   \u251c\u2500\u2500 9_\ud83d\udccc_M3 Actvidad 3.py   # Actividad 3 del Momento 3\n\u2502   \u251c\u2500\u2500 10_\ud83d\udccc_M3 Actvidad 4.py  # Actividad 4 del Momento 3\n\u2502   \u251c\u2500\u2500 11_\ud83d\udccc_M3 Actvidad 5.py  # Actividad 5 del Momento 3\n\u2502   \u2514\u2500\u2500 12_\ud83d\udccb_M3 Evaluaci\u00f3n.py  # Evaluaci\u00f3n del Momento 3\n\u251c\u2500\u2500 .gitignore             # Archivos ignorados por Git\n\u251c\u2500\u2500 Inicio.py              # Punto de entrada de la aplicaci\u00f3n\n\u251c\u2500\u2500 README.md              # Este archivo\n\u2514\u2500\u2500 requirements.txt       # Dependencias del proyecto\n</code></pre>"},{"location":"pi/p3/#navegacion-por-la-aplicacion","title":"Navegaci\u00f3n por la aplicaci\u00f3n","text":"<ol> <li> <p>P\u00e1gina de inicio (Inicio.py): Muestra informaci\u00f3n general del estudiante y del curso.</p> </li> <li> <p>Actividades del Momento 2: P\u00e1ginas numeradas del 1 al 5, cada una contiene una actividad espec\u00edfica del Momento 2.</p> </li> <li> <p>Evaluaci\u00f3n del Momento 2: P\u00e1gina 6, contiene la evaluaci\u00f3n final del Momento 2.</p> </li> <li> <p>Actividades del Momento 3: P\u00e1ginas numeradas del 7 al 11, cada una contiene una actividad espec\u00edfica del Momento 3.</p> </li> <li> <p>Evaluaci\u00f3n del Momento 3: P\u00e1gina 12, contiene la evaluaci\u00f3n final del Momento 3.</p> </li> </ol>"},{"location":"pi/p3/#personalizacion","title":"Personalizaci\u00f3n","text":""},{"location":"pi/p3/#informacion-del-estudiante","title":"Informaci\u00f3n del estudiante","text":"<p>Para personalizar la informaci\u00f3n del estudiante, edita el archivo <code>Inicio.py</code> y modifica los siguientes elementos:</p> <ol> <li>Reemplaza la imagen <code>assets/foto.jpg</code> con tu propia foto.</li> <li>Actualiza la informaci\u00f3n personal (nombre, programa, semestre, enlace al repositorio).</li> </ol>"},{"location":"pi/p3/#completar-actividades","title":"Completar actividades","text":"<p>Para completar cada actividad o evaluaci\u00f3n:</p> <ol> <li>Navega a la p\u00e1gina correspondiente desde la barra lateral.</li> <li>Lee la descripci\u00f3n y objetivos de la actividad.</li> <li>Implementa tu soluci\u00f3n en la secci\u00f3n designada.</li> <li>Guarda los cambios y actualiza la p\u00e1gina para ver los resultados.</li> </ol>"},{"location":"pi/p3/#dependencias-principales","title":"Dependencias principales","text":"<ul> <li>streamlit: Framework para crear aplicaciones web interactivas</li> <li>pandas: Manipulaci\u00f3n y an\u00e1lisis de datos</li> <li>numpy: Computaci\u00f3n num\u00e9rica</li> <li>matplotlib y seaborn: Visualizaci\u00f3n de datos</li> <li>plotly: Gr\u00e1ficos interactivos</li> </ul> <p>Consulta el archivo <code>requirements.txt</code> para ver la lista completa de dependencias.</p>"},{"location":"pi/p3/#consejos-para-el-desarrollo","title":"Consejos para el desarrollo","text":"<ul> <li>Utiliza la funci\u00f3n <code>st.help()</code> para obtener ayuda sobre cualquier funci\u00f3n de Streamlit.</li> <li>Consulta la Documentaci\u00f3n oficial de Streamlit para m\u00e1s informaci\u00f3n.</li> <li>Utiliza <code>st.write()</code> para depurar variables durante el desarrollo.</li> <li>Aprovecha los widgets interactivos de Streamlit para hacer tus actividades m\u00e1s din\u00e1micas.</li> </ul>"},{"location":"pi/p4/","title":"Fuentes de datos abiertos","text":""},{"location":"pi/p4/#datasets-abiertos-en-general","title":"Datasets Abiertos en General","text":""},{"location":"pi/p4/#1-kaggle","title":"1. Kaggle","text":"<ul> <li>URL: https://www.kaggle.com/datasets</li> <li>Descripci\u00f3n: Kaggle es una plataforma muy popular para cient\u00edficos de datos que ofrece una amplia variedad de datasets en formatos compatibles como CSV, JSON y SQLite. Los datasets est\u00e1n organizados por categor\u00edas y vienen con documentaci\u00f3n detallada .</li> <li>Ejemplo de uso: Puedes descargar datasets sobre econom\u00eda, salud, deportes, etc., y cargarlos directamente en Pandas usando <code>pandas.read_csv()</code>.</li> </ul>"},{"location":"pi/p4/#2-datagov","title":"2. Data.gov","text":"<ul> <li>URL: https://www.data.gov/</li> <li>Descripci\u00f3n: Data.gov es un repositorio de datos abiertos del gobierno de los Estados Unidos. Ofrece miles de conjuntos de datos en formato CSV, adecuados para an\u00e1lisis de datos con Pandas. Los temas incluyen educaci\u00f3n, clima, transporte y m\u00e1s.</li> <li>Ejemplo de uso: Descarga un archivo CSV de clima hist\u00f3rico y utiliza Pandas para analizar patrones clim\u00e1ticos .</li> </ul>"},{"location":"pi/p4/#3-uci-machine-learning-repository","title":"3. UCI Machine Learning Repository","text":"<ul> <li>URL: https://archive.ics.uci.edu/ml/index.php</li> <li>Descripci\u00f3n: Este repositorio es ampliamente utilizado en la comunidad de aprendizaje autom\u00e1tico. Contiene datasets en formato CSV que son ideales para proyectos de ciencia de datos y machine learning.</li> <li>Ejemplo de uso: El dataset \"Adult Income\" es un archivo CSV que puede ser cargado en Pandas para predecir ingresos basados en caracter\u00edsticas demogr\u00e1ficas .</li> </ul>"},{"location":"pi/p4/#4-world-bank-open-data","title":"4. World Bank Open Data","text":"<ul> <li>URL: https://data.worldbank.org/</li> <li>Descripci\u00f3n: El Banco Mundial proporciona datos globales sobre desarrollo econ\u00f3mico, salud, educaci\u00f3n y medio ambiente. Muchos de estos datos est\u00e1n disponibles en formato CSV.</li> <li>Ejemplo de uso: Carga datos sobre el PIB per c\u00e1pita de diferentes pa\u00edses y realiza an\u00e1lisis comparativos utilizando Pandas .</li> </ul>"},{"location":"pi/p4/#5-google-dataset-search","title":"5. Google Dataset Search","text":"<ul> <li>URL: https://datasetsearch.research.google.com/</li> <li>Descripci\u00f3n: Una herramienta de b\u00fasqueda de datasets desarrollada por Google. Permite encontrar datasets en formato CSV y otros formatos desde diversas fuentes acad\u00e9micas y gubernamentales.</li> <li>Ejemplo de uso: Busca datasets relacionados con energ\u00eda renovable y carga los archivos CSV en Pandas para an\u00e1lisis .</li> </ul>"},{"location":"pi/p4/#6-awesome-public-datasets-github","title":"6. Awesome Public Datasets (GitHub)","text":"<ul> <li>URL: https://github.com/awesomedata/awesome-public-datasets</li> <li>Descripci\u00f3n: Una lista curada de datasets p\u00fablicos organizados por categor\u00edas como salud, finanzas, educaci\u00f3n y m\u00e1s. Muchos de estos datasets est\u00e1n disponibles en formato CSV.</li> <li>Ejemplo de uso: Encuentra un dataset sobre desastres naturales y utiliza Pandas para explorar tendencias hist\u00f3ricas .</li> </ul>"},{"location":"pi/p4/#7-fivethirtyeight","title":"7. FiveThirtyEight","text":"<ul> <li>URL: https://data.fivethirtyeight.com/</li> <li>Descripci\u00f3n: FiveThirtyEight ofrece datasets utilizados en sus art\u00edculos sobre pol\u00edtica, deportes y cultura. Los datos est\u00e1n disponibles en formato CSV y son ideales para an\u00e1lisis estad\u00edsticos.</li> <li>Ejemplo de uso: Carga un dataset sobre resultados electorales y realiza an\u00e1lisis predictivos con Pandas .</li> </ul>"},{"location":"pi/p4/#8-openstreetmap-osm","title":"8. OpenStreetMap (OSM)","text":"<ul> <li>URL: https://www.openstreetmap.org/</li> <li>Descripci\u00f3n: OpenStreetMap proporciona datos geoespaciales abiertos que pueden exportarse en formato CSV. Estos datos son \u00fatiles para proyectos de geolocalizaci\u00f3n y an\u00e1lisis espacial.</li> <li>Ejemplo de uso: Exporta datos de ubicaciones urbanas y utiliza Pandas para analizar la densidad poblacional .</li> </ul>"},{"location":"pi/p4/#9-global-health-observatory-gho","title":"9. Global Health Observatory (GHO)","text":"<ul> <li>URL: https://www.who.int/data/gho</li> <li>Descripci\u00f3n: La Organizaci\u00f3n Mundial de la Salud (OMS) proporciona datos sobre salud global, incluidos indicadores como mortalidad, enfermedades y acceso a servicios de salud. Los datos est\u00e1n disponibles en formato CSV.</li> <li>Ejemplo de uso: Analiza la tasa de mortalidad infantil en diferentes pa\u00edses utilizando Pandas.</li> </ul>"},{"location":"pi/p4/#10-eurostat","title":"10. Eurostat","text":"<ul> <li>URL: https://ec.europa.eu/eurostat</li> <li>Descripci\u00f3n: Eurostat ofrece datos estad\u00edsticos de la Uni\u00f3n Europea sobre econom\u00eda, poblaci\u00f3n, empleo y m\u00e1s. Muchos de estos datos pueden descargarse en formato CSV.</li> <li>Ejemplo de uso: Carga datos sobre empleo juvenil y realiza an\u00e1lisis regionales con Pandas.</li> </ul>"},{"location":"pi/p4/#datasets-abiertos-en-colombia","title":"Datasets Abiertos en Colombia","text":""},{"location":"pi/p4/#1-datos-abiertos-colombia","title":"1. Datos Abiertos Colombia","text":"<ul> <li>Descripci\u00f3n: Es el portal oficial de datos abiertos del gobierno colombiano. Ofrece una amplia variedad de conjuntos de datos de diferentes sectores, como salud, educaci\u00f3n, econom\u00eda y medio ambiente. Muchos de estos datasets est\u00e1n disponibles en formato CSV.</li> <li>URL: https://www.datos.gov.co/ </li> </ul>"},{"location":"pi/p4/#2-datos-abiertos-bogota","title":"2. Datos Abiertos Bogot\u00e1","text":"<ul> <li>Descripci\u00f3n: Este portal proporciona acceso libre y gratuito a los datos generados por las entidades distritales de Bogot\u00e1. Incluye informaci\u00f3n sobre movilidad, econom\u00eda, salud, educaci\u00f3n y m\u00e1s.</li> <li>URL: https://datosabiertos.bogota.gov.co/ </li> </ul>"},{"location":"pi/p4/#3-infraestructura-colombiana-de-datos-espaciales-icde","title":"3. Infraestructura Colombiana de Datos Espaciales (ICDE)","text":"<ul> <li>Descripci\u00f3n: La ICDE ofrece conjuntos de datos geoespaciales producidos por entidades nacionales. Estos datos son \u00fatiles para proyectos relacionados con mapas, territorios y planificaci\u00f3n urbana.</li> <li>URL: https://www.icde.gov.co/ </li> </ul>"},{"location":"pi/p4/#4-ministerio-de-salud-y-proteccion-social","title":"4. Ministerio de Salud y Protecci\u00f3n Social","text":"<ul> <li>Descripci\u00f3n: El Ministerio de Salud pone a disposici\u00f3n de la ciudadan\u00eda diversos conjuntos de datos relacionados con la salud p\u00fablica, como estad\u00edsticas de enfermedades, vacunaci\u00f3n y servicios de salud. Estos datos est\u00e1n disponibles en el portal de Datos Abiertos Colombia.</li> <li>URL: https://www.datos.gov.co/ </li> </ul>"},{"location":"pi/p4/#5-listado-de-datasets-en-github","title":"5. Listado de Datasets en GitHub","text":"<ul> <li>Descripci\u00f3n: Un repositorio en GitHub que recopila datasets interesantes de Colombia disponibles en el portal de Datos Abiertos Colombia. Incluye datos sobre econom\u00eda, educaci\u00f3n, crimen y m\u00e1s.</li> <li>URL: https://github.com/xergioalex/datos-abiertos-colombia </li> </ul>"},{"location":"pi/p4/#6-bases-de-datos-de-gastos-gubernamentales","title":"6. Bases de Datos de Gastos Gubernamentales","text":"<ul> <li>Descripci\u00f3n: Conjuntos de datos que detallan los gastos realizados por entidades gubernamentales en Colombia. Son \u00fatiles para proyectos de transparencia y an\u00e1lisis fiscal.</li> <li>URL: https://www.datos.gov.co/ </li> </ul>"},{"location":"pi/p4/#7-base-de-datos-de-delitos-en-colombia","title":"7. Base de Datos de Delitos en Colombia","text":"<ul> <li>Descripci\u00f3n: Proporcionada por el Ministerio de Defensa, esta base de datos incluye informaci\u00f3n sobre delitos cometidos en Colombia. Es \u00fatil para estudios sobre seguridad y justicia.</li> <li>URL: https://www.datos.gov.co/ </li> </ul>"},{"location":"pi/p4/#8-base-de-datos-de-instituciones-educativas","title":"8. Base de Datos de Instituciones Educativas","text":"<ul> <li>Descripci\u00f3n: Informaci\u00f3n sobre instituciones educativas en Colombia, incluyendo su ubicaci\u00f3n, nivel educativo y recursos disponibles.</li> <li>URL: https://www.datos.gov.co/ </li> </ul>"},{"location":"pi/p4/#9-lista-de-especies-amenazadas-en-colombia","title":"9. Lista de Especies Amenazadas en Colombia","text":"<ul> <li>Descripci\u00f3n: Datos sobre especies continentales y marino-costeras amenazadas en Colombia, proporcionados por el Sistema de Informaci\u00f3n sobre Biodiversidad de Colombia (SiB).</li> <li>URL: https://www.biodiversidad.co/ </li> </ul>"},{"location":"pi/p4/#10-colombia-tic-ministerio-de-tecnologias-de-la-informacion-y-las-comunicaciones-mintic","title":"10. Colombia TIC - Ministerio de Tecnolog\u00edas de la Informaci\u00f3n y las Comunicaciones (MinTIC)","text":"<ul> <li>Descripci\u00f3n: Iniciativa para promover el uso de datos abiertos en Colombia, con \u00e9nfasis en tecnolog\u00eda y desarrollo digital.</li> <li>URL: https://www.mintic.gov.co/ </li> </ul>"},{"location":"pi/p4/#datasets-abiertos-en-medellin","title":"Datasets Abiertos en Medell\u00edn","text":""},{"location":"pi/p4/#1-portal-de-datos-abiertos-de-medellin","title":"1. Portal de Datos Abiertos de Medell\u00edn","text":"<ul> <li>Descripci\u00f3n: El portal oficial de datos abiertos del municipio de Medell\u00edn ofrece conjuntos de datos sobre movilidad, salud, educaci\u00f3n, seguridad, medio ambiente y m\u00e1s. Es una excelente fuente para acceder a informaci\u00f3n detallada sobre la ciudad.</li> <li>URL: https://www.medellin.gov.co/ </li> <li>Ejemplo de uso: Descarga datos sobre ciclorrutas, \u00edndices de accidentalidad o hurto para an\u00e1lisis urbanos.</li> </ul>"},{"location":"pi/p4/#2-geomedellin-portal-de-datos-geograficos","title":"2. GeoMedell\u00edn (Portal de Datos Geogr\u00e1ficos)","text":"<ul> <li>Descripci\u00f3n: GeoMedell\u00edn es el portal de datos geogr\u00e1ficos del municipio de Medell\u00edn. Ofrece informaci\u00f3n espacial sobre movilidad, medio ambiente, ordenamiento territorial, desarrollo econ\u00f3mico y salud.</li> <li>URL: GeoMedell\u00edn </li> <li>Ejemplo de uso: Accede a mapas y datos geoespaciales para proyectos de planificaci\u00f3n urbana o an\u00e1lisis ambiental.</li> </ul>"},{"location":"pi/p4/#3-informacion-predial-de-medellin","title":"3. Informaci\u00f3n Predial de Medell\u00edn","text":"<ul> <li>Descripci\u00f3n: Este dataset incluye informaci\u00f3n catastral de predios en Medell\u00edn, como matr\u00edculas, comunas, barrios, manzanas, lotes, CBML y estratos. Es \u00fatil para estudios de urbanismo y propiedad.</li> <li>URL: Informaci\u00f3n Predios | Datos Abiertos Colombia </li> <li>Ejemplo de uso: Analiza la distribuci\u00f3n de estratos o \u00e1reas urbanas en Medell\u00edn.</li> </ul>"},{"location":"pi/p4/#4-datos-abiertos-de-salud-en-medellin","title":"4. Datos Abiertos de Salud en Medell\u00edn","text":"<ul> <li>Descripci\u00f3n: Datos relacionados con servicios de salud especializados en Medell\u00edn, como cardiolog\u00eda, neumolog\u00eda y alergolog\u00eda. Estos datos pueden ser \u00fatiles para investigaciones m\u00e9dicas o an\u00e1lisis de infraestructura sanitaria.</li> <li>URL: Datos Abiertos Colombia - Medell\u00edn </li> <li>Ejemplo de uso: Estudia la disponibilidad de servicios m\u00e9dicos especializados en diferentes zonas de la ciudad.</li> </ul>"},{"location":"pi/p4/#5-medata-plataforma-de-datos-abiertos-de-medellin","title":"5. Medata (Plataforma de Datos Abiertos de Medell\u00edn)","text":"<ul> <li>Descripci\u00f3n: Medata es una plataforma que centraliza datos abiertos de Medell\u00edn para la ciudadan\u00eda. Incluye informaci\u00f3n sobre ciclorrutas, accidentalidad, hurto y otros indicadores urbanos.</li> <li>URL: Medata </li> <li>Ejemplo de uso: Explora datos sobre movilidad sostenible o seguridad ciudadana.</li> </ul>"},{"location":"pi/p4/#6-camara-de-comercio-de-medellin","title":"6. C\u00e1mara de Comercio de Medell\u00edn","text":"<ul> <li>Descripci\u00f3n: La C\u00e1mara de Comercio de Medell\u00edn ofrece datos abiertos, estudios e investigaciones sobre el desarrollo econ\u00f3mico de la ciudad. Estos datos son \u00fatiles para an\u00e1lisis empresariales y econ\u00f3micos.</li> <li>URL: C\u00e1mara de Comercio de Medell\u00edn - Datos Abiertos </li> <li>Ejemplo de uso: Analiza datos sobre emprendimiento, comercio y econom\u00eda local.</li> </ul>"},{"location":"pi/p4/#7-biblioteca-publica-piloto-de-medellin","title":"7. Biblioteca P\u00fablica Piloto de Medell\u00edn","text":"<ul> <li>Descripci\u00f3n: La Biblioteca P\u00fablica Piloto de Medell\u00edn contribuye al proyecto de datos abiertos del gobierno colombiano, promoviendo la transparencia y el acceso a la informaci\u00f3n p\u00fablica.</li> <li>URL: Biblioteca P\u00fablica Piloto de Medell\u00edn - Datos Abiertos </li> <li>Ejemplo de uso: Consulta datos culturales o educativos disponibles en la biblioteca.</li> </ul>"},{"location":"pi/p4/#8-gastos-publicos-y-contratacion-en-medellin","title":"8. Gastos P\u00fablicos y Contrataci\u00f3n en Medell\u00edn","text":"<ul> <li>Descripci\u00f3n: Datos sobre gastos p\u00fablicos y contrataci\u00f3n en Medell\u00edn, disponibles en el portal de Datos Abiertos Colombia. Estos datasets son \u00fatiles para proyectos de transparencia fiscal.</li> <li>URL: Datos Abiertos Colombia - Medell\u00edn </li> <li>Ejemplo de uso: Realiza un an\u00e1lisis de los gastos gubernamentales en proyectos de infraestructura.</li> </ul>"},{"location":"pi/p4/#tutorial-cargar-archivos-csv-en-pandas","title":"Tutorial: Cargar Archivos CSV en Pandas","text":"<p>Pandas es una biblioteca de Python ampliamente utilizada para el an\u00e1lisis de datos. Una de sus funciones m\u00e1s comunes es cargar archivos CSV (Comma-Separated Values) en un DataFrame. A continuaci\u00f3n, se explican todas las formas de cargar archivos CSV, los problemas comunes que pueden surgir y c\u00f3mo resolverlos.</p>"},{"location":"pi/p4/#1-forma-basica-de-cargar-un-archivo-csv","title":"1. Forma B\u00e1sica de Cargar un Archivo CSV","text":"<p>La funci\u00f3n <code>pandas.read_csv()</code> es la herramienta principal para cargar archivos CSV en Pandas.</p> <pre><code>import pandas as pd\n\n# Cargar un archivo CSV b\u00e1sico\ndf = pd.read_csv(\"archivo.csv\")\n</code></pre> <ul> <li>Descripci\u00f3n: Lee el archivo CSV y lo convierte en un DataFrame de Pandas.</li> <li>Nota: El archivo debe estar en el mismo directorio que el script o notebook.</li> </ul>"},{"location":"pi/p4/#2-especificar-la-ruta-del-archivo","title":"2. Especificar la Ruta del Archivo","text":"<p>Si el archivo no est\u00e1 en el mismo directorio, debes proporcionar la ruta completa o relativa.</p> <pre><code># Ruta absoluta\ndf = pd.read_csv(\"/ruta/completa/al/archivo.csv\")\n\n# Ruta relativa\ndf = pd.read_csv(\"../datos/archivo.csv\")\n</code></pre>"},{"location":"pi/p4/#3-cambiar-el-delimitador-con-sep","title":"3. Cambiar el Delimitador con <code>sep</code>","text":"<p>Por defecto, Pandas asume que el delimitador es una coma (<code>,</code>). Sin embargo, algunos archivos CSV usan otros delimitadores, como punto y coma (<code>;</code>), tabulaci\u00f3n (<code>\\t</code>) u otros caracteres.</p>"},{"location":"pi/p4/#ejemplo-con-punto-y-coma","title":"Ejemplo con Punto y Coma","text":"<pre><code>df = pd.read_csv(\"archivo.csv\", sep=\";\")\n</code></pre>"},{"location":"pi/p4/#ejemplo-con-tabulacion","title":"Ejemplo con Tabulaci\u00f3n","text":"<pre><code>df = pd.read_csv(\"archivo.tsv\", sep=\"\\t\")  # Tambi\u00e9n puedes usar delimiter=\"\\t\"\n</code></pre>"},{"location":"pi/p4/#ejemplo-con-pipe","title":"Ejemplo con Pipe (<code>|</code>)","text":"<pre><code>df = pd.read_csv(\"archivo.csv\", sep=\"|\")\n</code></pre>"},{"location":"pi/p4/#4-manejo-de-codificaciones","title":"4. Manejo de Codificaciones","text":"<p>Algunos archivos CSV no est\u00e1n codificados en UTF-8, lo que puede causar errores al leerlos.</p>"},{"location":"pi/p4/#problema-comun","title":"Problema Com\u00fan","text":"<pre><code>UnicodeDecodeError: 'utf-8' codec can't decode byte...\n</code></pre>"},{"location":"pi/p4/#solucion","title":"Soluci\u00f3n","text":"<p>Especifica la codificaci\u00f3n correcta usando el par\u00e1metro <code>encoding</code>.</p> <pre><code># Usando codificaci\u00f3n ISO-8859-1 (com\u00fan en archivos de Windows)\ndf = pd.read_csv(\"archivo.csv\", encoding=\"ISO-8859-1\")\n\n# Usando codificaci\u00f3n UTF-8\ndf = pd.read_csv(\"archivo.csv\", encoding=\"utf-8\")\n</code></pre>"},{"location":"pi/p4/#5-saltar-filas-innecesarias","title":"5. Saltar Filas Innecesarias","text":"<p>Si el archivo tiene filas innecesarias al inicio o si las columnas no tienen nombres claros, puedes ajustar esto.</p>"},{"location":"pi/p4/#saltar-filas","title":"Saltar Filas","text":"<pre><code># Saltar las primeras 2 filas\ndf = pd.read_csv(\"archivo.csv\", skiprows=2)\n</code></pre>"},{"location":"pi/p4/#usar-una-fila-especifica-como-cabecera","title":"Usar una Fila Espec\u00edfica como Cabecera","text":"<pre><code># Usar la fila 3 como cabecera (\u00edndice 2)\ndf = pd.read_csv(\"archivo.csv\", header=2)\n</code></pre>"},{"location":"pi/p4/#6-manejo-de-valores-faltantes","title":"6. Manejo de Valores Faltantes","text":"<p>Pandas reemplaza autom\u00e1ticamente valores faltantes por <code>NaN</code>. Si el archivo usa otro valor para representar datos faltantes, puedes especificarlo.</p> <pre><code># Reemplazar \"NA\" y \"?\" con NaN\ndf = pd.read_csv(\"archivo.csv\", na_values=[\"NA\", \"?\"])\n</code></pre>"},{"location":"pi/p4/#7-leer-solo-ciertas-columnas","title":"7. Leer S\u00f3lo Ciertas Columnas","text":"<p>Si solo necesitas ciertas columnas, puedes especificarlas para ahorrar memoria.</p> <pre><code># Leer solo las columnas \"nombre\" y \"edad\"\ndf = pd.read_csv(\"archivo.csv\", usecols=[\"nombre\", \"edad\"])\n</code></pre>"},{"location":"pi/p4/#8-leer-solo-cierto-numero-de-filas","title":"8. Leer S\u00f3lo Cierto N\u00famero de Filas","text":"<p>Para archivos grandes, puedes limitar el n\u00famero de filas a leer.</p> <pre><code># Leer las primeras 100 filas\ndf = pd.read_csv(\"archivo.csv\", nrows=100)\n</code></pre>"},{"location":"pi/p4/#9-parsear-fechas","title":"9. Parsear Fechas","text":"<p>Si tu archivo contiene columnas con fechas, puedes parsearlas autom\u00e1ticamente.</p> <pre><code># Parsear la columna \"fecha\" como fecha\ndf = pd.read_csv(\"archivo.csv\", parse_dates=[\"fecha\"])\n</code></pre>"},{"location":"pi/p4/#10-leer-archivos-grandes-en-fragmentos-chunks","title":"10. Leer Archivos Grandes en Fragmentos (Chunks)","text":"<p>Para archivos muy grandes que no caben en memoria, puedes leerlos en fragmentos (chunks).</p> <pre><code># Leer el archivo en chunks de 1000 filas\nchunk_size = 1000\nchunks = []\n\nfor chunk in pd.read_csv(\"archivo_grande.csv\", chunksize=chunk_size):\n    chunks.append(chunk)\n\n# Concatenar todos los chunks en un solo DataFrame\ndf = pd.concat(chunks)\n</code></pre>"},{"location":"pi/p4/#11-problemas-comunes-y-soluciones","title":"11. Problemas Comunes y Soluciones","text":""},{"location":"pi/p4/#1-error-de-delimitador-incorrecto","title":"1. Error de Delimitador Incorrecto","text":"<p>Problema: Los datos aparecen mal estructurados porque el delimitador no coincide.</p> <p>Soluci\u00f3n: Usa el par\u00e1metro <code>sep</code>.</p> <pre><code># Cambiar el delimitador\ndf = pd.read_csv(\"archivo.csv\", sep=\";\")\n</code></pre>"},{"location":"pi/p4/#2-error-de-codificacion","title":"2. Error de Codificaci\u00f3n","text":"<p>Problema: El archivo no est\u00e1 codificado en UTF-8.</p> <p>Soluci\u00f3n: Usa el par\u00e1metro <code>encoding</code>.</p> <pre><code># Cambiar la codificaci\u00f3n\ndf = pd.read_csv(\"archivo.csv\", encoding=\"ISO-8859-1\")\n</code></pre>"},{"location":"pi/p4/#3-filas-innecesarias-al-inicio","title":"3. Filas Innecesarias al Inicio","text":"<p>Problema: Las primeras filas contienen metadatos o comentarios.</p> <p>Soluci\u00f3n: Usa el par\u00e1metro <code>skiprows</code>.</p> <pre><code># Saltar las primeras 3 filas\ndf = pd.read_csv(\"archivo.csv\", skiprows=3)\n</code></pre>"},{"location":"pi/p4/#4-datos-faltantes-representados-por-otros-valores","title":"4. Datos Faltantes Representados por Otros Valores","text":"<p>Problema: Los valores faltantes est\u00e1n representados por \"NA\", \"-\", etc.</p> <p>Soluci\u00f3n: Usa el par\u00e1metro <code>na_values</code>.</p> <pre><code># Reemplazar \"NA\" y \"-\" con NaN\ndf = pd.read_csv(\"archivo.csv\", na_values=[\"NA\", \"-\"])\n</code></pre>"},{"location":"pi/p4/#5-archivo-muy-grande","title":"5. Archivo Muy Grande","text":"<p>Problema: El archivo es demasiado grande para cargarlo completamente en memoria.</p> <p>Soluci\u00f3n: Usa el par\u00e1metro <code>chunksize</code>.</p> <pre><code># Leer en chunks\nfor chunk in pd.read_csv(\"archivo_grande.csv\", chunksize=1000):\n    print(chunk.head())\n</code></pre>"},{"location":"pi/p4/#12-ejemplo-completo","title":"12. Ejemplo Completo","text":"<p>Aqu\u00ed tienes un ejemplo que combina varias opciones:</p> <pre><code>import pandas as pd\n\n# Cargar un archivo CSV con:\n# - Delimitador personalizado\n# - Codificaci\u00f3n espec\u00edfica\n# - Saltar filas innecesarias\n# - Leer solo ciertas columnas\n# - Parsear fechas\ndf = pd.read_csv(\n    \"archivo.csv\",\n    sep=\";\",\n    encoding=\"ISO-8859-1\",\n    skiprows=2,\n    usecols=[\"nombre\", \"edad\", \"fecha\"],\n    parse_dates=[\"fecha\"]\n)\n\nprint(df.head())\n</code></pre>"}]}