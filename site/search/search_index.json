{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Inicio","text":""},{"location":"#bienvenidos-al-submodulo-nuevas-tecnologias-de-programacion","title":"\ud83d\ude80 Bienvenidos al Subm\u00f3dulo Nuevas Tecnolog\u00edas de Programaci\u00f3n","text":""},{"location":"#pacto-pedagogico-y-presentacion","title":"Pacto Pedag\u00f3gico y Presentaci\u00f3n","text":"<p>En este curso iniciaremos con la construcci\u00f3n de nuestro pacto pedag\u00f3gico y la presentaci\u00f3n de los retos empresariales que guiar\u00e1n el desarrollo del Proyecto Integrador. Este espacio ser\u00e1 clave para definir acuerdos, expectativas y el enfoque pr\u00e1ctico del aprendizaje.</p>"},{"location":"#estructura-y-retos-del-curso","title":"Estructura y Retos del Curso","text":""},{"location":"#1-fundamentacion-en-python","title":"1. Fundamentaci\u00f3n en PYTHON","text":"<ul> <li>Par\u00e1metros de configuraci\u00f3n de Python y sus herramientas: Variables de entorno, configuraci\u00f3n de IDEs.</li> <li>Resoluci\u00f3n de problemas comunes y gu\u00eda de uso de Python: Declaraci\u00f3n de variables, uso de condicionales, ciclos y funciones.</li> <li>Estructuras de datos en Python: Listas, tuplas y diccionarios.</li> </ul>"},{"location":"#2-fundamentacion-en-sistemas-de-control-de-versiones-git","title":"2. Fundamentaci\u00f3n en Sistemas de Control de Versiones (Git)","text":"<ul> <li>Introducci\u00f3n a Git: Conceptos b\u00e1sicos, terminolog\u00eda y beneficios para el control de versiones.</li> <li>Configuraci\u00f3n inicial de Git: Configuraci\u00f3n de usuario, iniciaci\u00f3n de repositorios y conceptos b\u00e1sicos del flujo de trabajo.</li> <li>Creaci\u00f3n y clonaci\u00f3n de repositorios Git.</li> <li>Manejo de archivos: A\u00f1adir, modificar, eliminar y confirmar cambios (commits).</li> <li>Uso de ramas en Git: Creaci\u00f3n, fusi\u00f3n y resoluci\u00f3n de conflictos.</li> </ul>"},{"location":"#3-recoleccion-de-evidencia-del-primer-momento","title":"3. Recolecci\u00f3n de Evidencia del PRIMER MOMENTO","text":"<ul> <li>Primer seguimiento al Proyecto Integrador.</li> </ul>"},{"location":"#4-configuracion-de-ambientes-virtuales","title":"4. Configuraci\u00f3n de Ambientes Virtuales","text":"<ul> <li>Creaci\u00f3n y gesti\u00f3n de ambientes virtuales en Python: Para aislar dependencias de proyecto.</li> <li>Herramientas: Uso de <code>venv</code> y <code>conda</code> para la creaci\u00f3n de ambientes virtuales.</li> <li>Configuraci\u00f3n espec\u00edfica: Disposici\u00f3n de archivos y configuraciones del proyecto dentro del ambiente virtual.</li> </ul>"},{"location":"#5-fundamentos-del-analisis-de-datos-con-pandas","title":"5. Fundamentos del An\u00e1lisis de Datos con Pandas","text":"<ul> <li>Introducci\u00f3n a Pandas: Estructuras de datos como DataFrame y Series.</li> <li>Operaciones b\u00e1sicas de manipulaci\u00f3n de datos: Filtrado, agrupaci\u00f3n, fusi\u00f3n, etc.</li> </ul>"},{"location":"#6-recoleccion-de-evidencia-del-segundo-momento","title":"6. Recolecci\u00f3n de Evidencia del SEGUNDO MOMENTO","text":"<ul> <li>Segundo seguimiento al Proyecto Integrador.</li> </ul>"},{"location":"#7-visualizacion-de-datos-con-matplotlib-y-seaborn","title":"7. Visualizaci\u00f3n de Datos con Matplotlib y Seaborn","text":"<ul> <li>Creaci\u00f3n de gr\u00e1ficos b\u00e1sicos y avanzados con Matplotlib.</li> <li>Uso de Seaborn: Visualizaciones estad\u00edsticas m\u00e1s complejas y atractivas.</li> <li>Integraci\u00f3n con Pandas: Visualizaci\u00f3n directa de DataFrames.</li> </ul>"},{"location":"#8-creacion-de-reportes-en-html-con-resultados-analiticos","title":"8. Creaci\u00f3n de Reportes en HTML con Resultados Anal\u00edticos","text":"<ul> <li>Conversi\u00f3n de DataFrames de Pandas a HTML: Para integraci\u00f3n en p\u00e1ginas web.</li> <li>Personalizaci\u00f3n de tablas HTML con CSS: Mejorar la presentaci\u00f3n de los datos.</li> <li>Uso de librer\u00edas de JavaScript como DataTables: Para hacer tablas HTML interactivas.</li> </ul>"},{"location":"#9-recoleccion-de-evidencia-del-tercer-momento","title":"9. Recolecci\u00f3n de Evidencia del TERCER MOMENTO","text":"<ul> <li>Sustentaci\u00f3n de Proyectos Integradores.</li> <li>Digitaci\u00f3n de Evidencias del Tercer Momento.</li> </ul>"},{"location":"#metodologia-del-curso","title":"Metodolog\u00eda del curso","text":"<p>El curso combina teor\u00eda y pr\u00e1ctica para garantizar que aprendas de manera efectiva:</p> <ul> <li>Clases te\u00f3ricas: Explicaciones claras y concisas sobre los conceptos fundamentales.</li> <li>Laboratorios pr\u00e1cticos: Ejercicios guiados para aplicar lo aprendido en entornos controlados.</li> <li>Proyectos integradores: Desarrollo de soluciones completas que integran Python, Git, Pandas y herramientas de visualizaci\u00f3n.</li> </ul>"},{"location":"#compromiso-del-cesde","title":"Compromiso del CESDE","text":"<p>En el CESDE, estamos comprometidos con tu \u00e9xito. Este curso no solo busca ense\u00f1arte herramientas tecnol\u00f3gicas, sino tambi\u00e9n inspirarte a ser un agente de cambio en el mundo digital. Nuestro objetivo es que al finalizar este programa, tengas la confianza y las habilidades necesarias para enfrentar cualquier desaf\u00edo tecnol\u00f3gico.</p>"},{"location":"#comencemos-este-viaje-juntos","title":"\u00a1Comencemos este viaje juntos!","text":"<p>Estamos emocionados de acompa\u00f1arte en este proceso de aprendizaje. Con dedicaci\u00f3n y esfuerzo, pronto estar\u00e1s creando soluciones innovadoras, analizando datos de manera eficiente y colaborando en proyectos tecnol\u00f3gicos de alto impacto.</p> <p>\u00a1Bienvenido al futuro de la tecnolog\u00eda!</p>"},{"location":"about/","title":"About","text":"<p>El El Subm\u00f3dulo Nuevas Tecnolog\u00edas de Programaci\u00f3n es una iniciativa educativa del CESDE, dise\u00f1ada para introducir a los estudiantes en herramientas clave como Python, Git y Pandas. Este curso combina teor\u00eda y pr\u00e1ctica para brindar una base s\u00f3lida en programaci\u00f3n, an\u00e1lisis de datos y colaboraci\u00f3n en proyectos tecnol\u00f3gicos.</p>"},{"location":"about/#docente-del-curso","title":"Docente del Curso","text":"<p>\u00a1Hola a todos!</p> <p>Soy Jhon Fredy Valencia G\u00f3mez, su docente para este programa de Desarrollo de Software. Me emociona mucho darles la bienvenida y comenzar este viaje de aprendizaje juntos.</p> <p>En este programa, mi objetivo es proporcionarles una formaci\u00f3n pr\u00e1ctica y completa en desarrollo de software. Mi enfoque se basa en el aprendizaje activo, utilizando ejercicios, proyectos y casos de estudio que les permitir\u00e1n aplicar inmediatamente lo aprendido.</p> <p>Mi experiencia en el CESDE y el SENA me ha ense\u00f1ado la importancia de una ense\u00f1anza clara, accesible y motivadora. Estoy comprometido con su \u00e9xito y har\u00e9 todo lo posible para apoyarlos en cada etapa del proceso de aprendizaje, respondiendo a sus dudas y brind\u00e1ndoles la retroalimentaci\u00f3n que necesitan.</p>"},{"location":"about/#proposito-del-curso","title":"Prop\u00f3sito del Curso","text":"<p>Este curso busca capacitar a los estudiantes en el uso de herramientas modernas para resolver problemas reales, desde la automatizaci\u00f3n de tareas hasta el an\u00e1lisis de grandes vol\u00famenes de datos. Al finalizar, los participantes estar\u00e1n preparados para aplicar sus conocimientos en entornos profesionales y colaborar en proyectos tecnol\u00f3gicos de alto impacto.</p> <p>\u00a1\u00danete a nosotros y comienza tu camino hacia el futuro de la tecnolog\u00eda!</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"content/p1/","title":"Semana 1 - Pacto pedag\u00f3gico","text":"<p>    Tu navegador no soporta el elemento de audio. </p> <p>El pacto pedag\u00f3gico es un acuerdo que se establece entre el docente y los estudiantes al inicio de un curso, con el fin de establecer las normas, expectativas, responsabilidades y compromisos de todas las partes involucradas en el proceso de ense\u00f1anza-aprendizaje.</p> Grupo Viernes 18:15 - 21:30Grupo S\u00e1bado 7:30 - 10:30 <p> <p>Tu navegador no admite la visualizaci\u00f3n de PDFs. Puedes descargarlo aqu\u00ed:      Descargar PDF.</p> </p> <p> <p>Tu navegador no admite la visualizaci\u00f3n de PDFs. Puedes descargarlo aqu\u00ed:      Descargar PDF.</p> </p>"},{"location":"content/p2/","title":"Semana 2 - Python","text":"<p>Python es un lenguaje de programaci\u00f3n de alto nivel, de prop\u00f3sito general, que fue creado por Guido van Rossum en el a\u00f1o 1989. Es un lenguaje intuitivo, f\u00e1cil de aprender y con una sintaxis clara y legible, que lo hace accesible tanto para principiantes como para programadores experimentados.</p> <p>Python se utiliza ampliamente en una gran variedad de aplicaciones, desde el desarrollo de aplicaciones web hasta la automatizaci\u00f3n de tareas, el an\u00e1lisis de datos y la inteligencia artificial. Tambi\u00e9n es muy popular en la comunidad cient\u00edfica y en la investigaci\u00f3n, gracias a la gran cantidad de bibliotecas y herramientas disponibles que lo hacen muy \u00fatil para el c\u00e1lculo y la visualizaci\u00f3n de datos.</p> <p>Adem\u00e1s de ser f\u00e1cil de aprender y de utilizar, Python tambi\u00e9n es un lenguaje de c\u00f3digo abierto, lo que significa que est\u00e1 disponible gratuitamente y que hay una gran comunidad de desarrolladores que contribuyen a su desarrollo y mejora.</p>"},{"location":"content/p2/#python-lenguaje-interpretado","title":"Python - Lenguaje interpretado","text":"<p>Python es un lenguaje de programaci\u00f3n interpretado de alto nivel. Esto significa que no se traduce a c\u00f3digo de m\u00e1quina antes de ejecutarse. En su lugar, se ejecuta l\u00ednea por l\u00ednea por un int\u00e9rprete. Este proceso de interpretaci\u00f3n puede ser m\u00e1s lento que la ejecuci\u00f3n de c\u00f3digo compilado, pero tiene algunas ventajas. Por ejemplo, los programas interpretados pueden ser m\u00e1s f\u00e1ciles de depurar y depurar. Tambi\u00e9n pueden ser portables a diferentes plataformas, ya que no necesitan ser compilados para cada plataforma espec\u00edfica.</p>"},{"location":"content/p2/#tabla-comparativa-lenguajes-compilados-vs-lenguajes-interpretados","title":"Tabla comparativa: Lenguajes compilados vs. Lenguajes interpretados","text":"Criterio Lenguajes compilados Lenguajes interpretados Ejemplos C, C++, Rust, Go, Haskell Python, Ruby, JavaScript, PHP Traducci\u00f3n Se realiza una vez, antes de la ejecuci\u00f3n Se realiza cada vez que se ejecuta el programa Velocidad Suelen ser m\u00e1s r\u00e1pidos y eficientes Suelen ser m\u00e1s lentos y consumir m\u00e1s recursos Portabilidad Dependen de la plataforma y el compilador Son independientes de la plataforma y el int\u00e9rprete Depuraci\u00f3n Es m\u00e1s dif\u00edcil encontrar y corregir errores Es m\u00e1s f\u00e1cil encontrar y corregir errores Flexibilidad Suelen ser m\u00e1s r\u00edgidos y estrictos Suelen ser m\u00e1s din\u00e1micos y flexibles Control Permiten un mayor control sobre el hardware Abstraen el hardware y lo gestionan autom\u00e1ticamente Tama\u00f1o Suelen generar archivos ejecutables m\u00e1s grandes Suelen generar archivos de c\u00f3digo fuente m\u00e1s peque\u00f1os <p>M\u00e1s informaci\u00f3n acerca de lenguajes interpretados</p>"},{"location":"content/p2/#instalacion-de-python","title":"Instalaci\u00f3n de Python","text":"<p>La instalaci\u00f3n de Python depende del sistema operativo que est\u00e9 utilizando. Aqu\u00ed se describen los pasos para instalar Python en los sistemas operativos m\u00e1s comunes:</p> <ul> <li>Windows: Descargue el instalador de Python desde el sitio web oficial de Python (https://www.python.org/downloads/).   Ejecute el instalador y siga las instrucciones en pantalla para instalar Python en su computadora.   Verifique que Python est\u00e1 instalado correctamente abriendo el s\u00edmbolo del sistema y escribiendo python y presionando Enter.</li> <li>macOS: Descargue el instalador de Python desde el sitio web oficial de Python (https://www.python.org/downloads/).   Ejecute el instalador y siga las instrucciones en pantalla para instalar Python en su computadora.   Verifique que Python est\u00e1 instalado correctamente abriendo la terminal y escribiendo python y presionando Enter.</li> <li>Linux: La mayor\u00eda de las distribuciones de Linux ya vienen con Python preinstalado. Para verificar si Python est\u00e1 instalado, abra una terminal y escriba python y presione Enter.</li> </ul> <p>Si no est\u00e1 instalado, puede instalar Python desde los repositorios de software de su distribuci\u00f3n de Linux. Por ejemplo, en Ubuntu, puede instalar Python escribiendo sudo apt-get install python en una terminal. Una vez que Python est\u00e9 instalado, puede comenzar a escribir y ejecutar programas en Python utilizando un editor de texto o un entorno de desarrollo integrado (IDE). Hay muchas opciones disponibles, incluyendo IDLE (incluido con la instalaci\u00f3n de Python), PyCharm, Visual Studio Code, entre otros.</p>"},{"location":"content/p2/#descargar-python","title":"Descargar Python","text":""},{"location":"content/p2/#sangrado-en-python","title":"Sangrado en Python","text":"<p>Sangrado (o indentaci\u00f3n) es un espacio en blanco al comienzo de una l\u00ednea de c\u00f3digo que se usa para resaltar la estructura y la organizaci\u00f3n del c\u00f3digo. El sangrado hace que el c\u00f3digo sea m\u00e1s legible visualmente agrupando l\u00edneas relacionadas.</p> <p>Es una forma de organizar visualmente el c\u00f3digo para facilitar su lectura. Se utilizan espacios o tabs para \"sangrar\" <code>(indentar)</code> determinadas l\u00edneas de c\u00f3digo.</p> <p>Python requiere sangrado de forma estricta, de tal manera que el sangrado indica la estructura y bloques de c\u00f3digo. Por ejemplo:</p> <pre><code>if condition:\n    print(\"Verdadero\")\nelse:\n    print(\"Falso\")\n</code></pre> <p>Aqu\u00ed el sangrado indica que la l\u00ednea print(\"Verdadero\") est\u00e1 dentro del bloque if, mientras que la l\u00ednea print(\"Falso\") est\u00e1 dentro del bloque else.</p> <p>Otro ejemplo:</p> <pre><code>for i in  range(5):\n print(i)\n</code></pre> <p>La l\u00ednea print(i) est\u00e1 sangrada debajo del bucle for, indicando que se ejecutar\u00e1 en cada iteraci\u00f3n.</p> <p>Algunos puntos sobre el sangrado en Python:</p> <ul> <li> <p>Es obligatorio. Python usa el sangrado para determinar la estructura del c\u00f3digo.</p> </li> <li> <p>Es estricto. El sangrado debe ser consistente dentro de un bloque, usar espacios no tabs.</p> </li> <li> <p>Se recomiendan 4 espacios, aunque Python tambi\u00e9n acepta tabs.</p> </li> <li> <p>No puede mezclar espacios y tabs dentro de un bloque.</p> </li> </ul> <p>El sangrado hace que el c\u00f3digo Python sea m\u00e1s legible visualmente, ayudando a agrupar l\u00edneas relacionadas y resaltando la estructura anidada. Por eso es una parte importante del estilo de codificaci\u00f3n en Python.</p>"},{"location":"content/p2/#variables-en-python","title":"Variables en python","text":"<p>En Python, las variables son usadas para almacenar informaci\u00f3n y pueden ser referenciadas por un nombre.</p> <p>Para crear una variable en Python, simplemente asignamos un valor a un nombre. Por ejemplo:</p> <pre><code>nombre = \"Juan\"\nedad = 25\nprint(\"Mi nombre es\", nombre)\nprint(\"Tengo\", edad, \"a\u00f1os\")\n</code></pre> <p>:::info Reglas</p> <p>En Python, hay ciertas reglas que deben seguirse al crear identificadores de variables:</p> <ul> <li> <p>Deben comenzar con una letra o un gui\u00f3n bajo.</p> </li> <li> <p>No pueden comenzar con un n\u00famero.</p> </li> <li> <p>No pueden contener espacios en blanco.</p> </li> <li> <p>No pueden ser una palabra reservada en Python (por ejemplo, \"if\", \"else\", \"for\", etc.).</p> </li> <li> <p>Deben ser \u00fanicos y significativos.</p> </li> <li> <p>Deben ser descriptivos y en min\u00fasculas, separando palabras con guiones bajos.</p> </li> </ul> <p>:::</p> <pre><code>#Identificadores v\u00e1lidos\nnombre = \"Juan\"\nedad = 25\n_nombre_completo = \"Juan P\u00e9rez\"\n#Identificadores inv\u00e1lidos\n123nombre = \"Juan\" # Comienza con un n\u00famero\nnombre-completo = \"Juan P\u00e9rez\" # Contiene un gui\u00f3n\nif = \"condicional\" # Es una palabra reservada\n</code></pre>"},{"location":"content/p2/#snake-case","title":"Snake case","text":"<p>El snake case es una convenci\u00f3n de nomenclatura muy utilizada en Python para nombrar variables, funciones y m\u00f3dulos. Aqu\u00ed tienes una explicaci\u00f3n m\u00e1s detallada:</p> <ol> <li>Definici\u00f3n: Snake case consiste en escribir palabras en min\u00fasculas, separ\u00e1ndolas con guiones bajos (_).</li> <li>Uso en Python:<ul> <li>Variables: mi_variable, contador, nombre_usuario</li> <li>Funciones: calcular_promedio(), obtener_datos(), imprimir_resultado()</li> <li>M\u00f3dulos: utilidades.py, procesamiento_datos.py</li> </ul> </li> <li>Ejemplos:</li> </ol> <pre><code># Variables\nnumero_de_usuarios = 100\nnombre_completo = \"Juan P\u00e9rez\"\n\n# Funci\u00f3n\ndef calcular_area_rectangulo(largo, ancho):\n    return largo * ancho\n\n# Llamada a funci\u00f3n\narea = calcular_area_rectangulo(5, 3)\n\n# En una clase\nclass ProcesadorTexto:\n    def __init__(self):\n        self.texto_actual = \"\"\n\n    def contar_palabras(self):\n        return len(self.texto_actual.split())\n</code></pre> <ol> <li>Ventajas:<ul> <li>Mejora la legibilidad del c\u00f3digo</li> <li>Es consistente con la filosof\u00eda de Python de c\u00f3digo expl\u00edcito y claro</li> <li>Facilita la distinci\u00f3n entre variables/funciones y clases (que usan PascalCase)</li> </ul> </li> <li>Cu\u00e1ndo no usar snake case:<ul> <li>Nombres de clases (usar PascalCase)</li> <li>Constantes (usar MAY\u00daSCULAS_CON_GUIONES_BAJOS)</li> </ul> </li> <li>Consideraciones:<ul> <li>Evitar nombres de una sola letra, excepto para contadores o \u00edndices muy simples</li> <li>Usar nombres descriptivos pero no excesivamente largos</li> </ul> </li> </ol>"},{"location":"content/p2/#constantes-en-python","title":"Constantes en Python","text":"<p>Las constantes en Python son un concepto un poco diferente comparado con otros lenguajes de programaci\u00f3n. </p> <ol> <li>Convenci\u00f3n de nombrado:<ul> <li>Se escriben en MAY\u00daSCULAS_CON_GUIONES_BAJOS</li> <li>Ejemplo: MAX_VALUE, PI, DEFAULT_CONFIG</li> </ul> </li> <li>Declaraci\u00f3n: En Python, t\u00e9cnicamente no existen constantes \"verdaderas\". Se usan variables regulares, pero por convenci\u00f3n, se tratan como constantes.</li> </ol> <pre><code>x = 5 # n\u00famero entero\ny = 5.0 # n\u00famero flotante\nz = 3 + 4j # n\u00famero complejo\n</code></pre>"},{"location":"content/p2/#tipos-de-datos-en-python","title":"Tipos de datos en python","text":"<p>En Python, existen diferentes tipos de datos que se pueden utilizar para almacenar informaci\u00f3n. Aqu\u00ed hay algunos de los tipos de datos m\u00e1s comunes:</p> <ol> <li>N\u00fameros: Python tiene soporte para n\u00fameros enteros (int), n\u00fameros flotantes (float) y n\u00fameros complejos (complex). Por ejemplo:</li> </ol> <pre><code>x = 5 # n\u00famero entero\ny = 5.0 # n\u00famero flotante\nz = 3 + 4j # n\u00famero complejo\n</code></pre> <ol> <li>Cadenas: Las cadenas en Python se usan para representar texto y se escriben entre comillas simples o dobles. Por ejemplo:</li> </ol> <pre><code>nombre = \"John Doe\"\napellido = 'Smith'\n</code></pre> <ol> <li>Listas: Las listas en Python son secuencias ordenadas de valores, que pueden ser de cualquier tipo de datos. Por ejemplo:</li> </ol> <pre><code>frutas = [\"manzana\", \"banana\", \"pera\"]\nnumeros = [1, 2, 3, 4, 5]\n</code></pre> <ol> <li>Tuplas: Las tuplas son similares a las listas, pero son inmutables y no se pueden modificar una vez creadas. Por ejemplo:</li> </ol> <pre><code>colores = (\"rojo\", \"verde\", \"azul\")\n</code></pre> <ol> <li>Diccionarios: Los diccionarios en Python son estructuras de datos no ordenadas que asocian claves con valores. Por ejemplo:</li> </ol> <pre><code>persona = {\n \"nombre\": \"John Doe\",\n \"edad\": 30,\n \"ciudad\": \"New York\"\n}\n</code></pre>"},{"location":"content/p2/#comentarios-en-python","title":"Comentarios en python","text":"<p>Los comentarios en Python son l\u00edneas de texto que se utilizan para describir el c\u00f3digo y ayudar a otros programadores a comprenderlo. Los comentarios no son interpretados por Python y no tienen ning\u00fan impacto en el funcionamiento del programa.</p> <p>Hay dos maneras de crear comentarios en Python:</p> <ol> <li>Usando el car\u00e1cter #:</li> </ol> <pre><code># Este es un comentario en una sola l\u00ednea\nx = 5 # Este es un comentario en la misma l\u00ednea que el c\u00f3digo\n</code></pre> <ol> <li>Usando tres comillas dobles:</li> </ol> <pre><code>\"\"\"\nEste es un comentario\nen varias l\u00edneas\n\"\"\"\n</code></pre>"},{"location":"content/p2/#la-funcion-print-de-python","title":"La funci\u00f3n print() de Python","text":"<p>La funci\u00f3n <code>print()</code> en Python es una herramienta fundamental para mostrar informaci\u00f3n en la pantalla. Es una funci\u00f3n integrada que se utiliza para imprimir cadenas de texto, variables, valores y otras expresiones.</p> <p>Sintaxis b\u00e1sica:</p> <pre><code>print(objeto)\n</code></pre> <p>Par\u00e1metros:</p> <ul> <li>objeto:\u00a0Puede ser una cadena de texto (entre comillas simples o dobles), una variable, una expresi\u00f3n, un objeto, etc.</li> </ul> <p>Ejemplos:</p> <pre><code># Imprimir una cadena de texto\nprint(\"Hola mundo!\")\n# Imprimir una variable\nnombre = \"Ana\"\nprint(nombre)\n# Imprimir una expresi\u00f3n\nsuma = 1 + 2\nprint(suma)\n# Imprimir m\u00faltiples objetos\nprint(\"El resultado es:\", suma, \"y el nombre es:\", nombre)\n</code></pre> <p>Opciones adicionales:</p> <ul> <li>Separador:\u00a0Se puede usar el argumento\u00a0<code>sep</code>\u00a0para especificar el separador entre los objetos que se imprimen. El valor por defecto es un espacio.</li> </ul> <pre><code>print(\"a\", \"b\", \"c\", sep=\", \")\n</code></pre> <p>Salida: <pre><code>a, b, c\n</code></pre></p> <ul> <li>Fin de l\u00ednea:\u00a0El argumento\u00a0<code>end</code>\u00a0define el car\u00e1cter que se imprime al final de la salida. El valor por defecto es un salto de l\u00ednea (<code>\\n</code>).</li> </ul> <pre><code>print(\"Primera l\u00ednea\", end=\" \")\nprint(\"Segunda l\u00ednea\")\n</code></pre> <p>Salida:</p> <pre><code>Primera l\u00ednea Segunda l\u00ednea\n</code></pre> <ul> <li>Formateo de cadenas f:\u00a0Python 3.6 introdujo las cadenas f, que permiten formatear cadenas de forma m\u00e1s elegante.</li> </ul> <pre><code>edad = 25\nprint(f\"Hola, me llamo {nombre} y tengo {edad} a\u00f1os.\")\n</code></pre> <p>Salida:</p> <pre><code>Hola, me llamo Ana y tengo 25 a\u00f1os.\n</code></pre>"},{"location":"content/p2/#la-funcion-input-en-python","title":"La funci\u00f3n\u00a0<code>input()</code>\u00a0en Python","text":"<p>La funci\u00f3n <code>input()</code> en Python es indispensable para interactuar con el usuario y obtener informaci\u00f3n que introduzca por teclado.</p> <p>Sintaxis:</p> <pre><code>entrada = input(prompt)\n</code></pre> <p>Par\u00e1metros:</p> <ul> <li>prompt (opcional):\u00a0Es una cadena de texto que se muestra al usuario antes de que introduzca la informaci\u00f3n. Esta cadena sirve para guiar al usuario sobre qu\u00e9 tipo de informaci\u00f3n se espera.</li> </ul> <p>Retorno:</p> <p>La funci\u00f3n <code>input()</code> siempre devuelve un string, incluso si el usuario introduce un n\u00famero. Esto significa que si necesita trabajar con la informaci\u00f3n como un n\u00famero, deber\u00e1 convertirla expl\u00edcitamente usando funciones como <code>int()</code>, <code>float()</code>, etc.</p> <p>Ejemplos:</p> <pre><code># Pedir el nombre del usuario\nnombre = input(\"\u00bfC\u00f3mo te llamas? \")\nprint(f\"Hola, {nombre}!\")\n# Solicitar dos n\u00fameros y sumarlos\nnum1 = int(input(\"Introduce el primer n\u00famero: \"))\nnum2 = int(input(\"Introduce el segundo n\u00famero: \"))\nsuma = num1 + num2\nprint(f\"La suma es: {suma}\")\n</code></pre> <p>Puntos a tener en cuenta:</p> <ul> <li> <p>La funci\u00f3n\u00a0<code>input()</code>\u00a0siempre espera que el usuario pulse la tecla\u00a0<code>Enter</code>\u00a0para finalizar la entrada.</p> </li> <li> <p>Si no se proporciona un\u00a0<code>prompt</code>, la funci\u00f3n muestra un mensaje gen\u00e9rico como\u00a0<code>Introduce un valor:</code>.</p> </li> <li> <p>Se recomienda usar el\u00a0<code>prompt</code>\u00a0para guiar al usuario y evitar confusiones.</p> </li> <li> <p>Para procesar la entrada como un tipo de dato espec\u00edfico, use funciones de conversi\u00f3n como\u00a0<code>int()</code>,\u00a0<code>float()</code>, etc.</p> </li> </ul>"},{"location":"content/p2/#estructuras-de-control-condicionales","title":"Estructuras de control condicionales","text":"<p>Los condicionales en Python permiten ejecutar c\u00f3digo solo si se cumple una determinada condici\u00f3n. Esto es muy \u00fatil para controlar el flujo de un programa y tomar decisiones basadas en diferentes situaciones.</p>"},{"location":"content/p2/#la-estructura-if","title":"La estructura if","text":"<p>La estructura if es la estructura condicional m\u00e1s b\u00e1sica en Python. Se utiliza para evaluar una condici\u00f3n y ejecutar un bloque de c\u00f3digo si la condici\u00f3n es verdadera.</p> <p>La sintaxis de la estructura if es la siguiente:</p> <pre><code>if condici\u00f3n:\n # Bloque de c\u00f3digo que se ejecuta si la condici\u00f3n es verdadera\n</code></pre> <p>Por ejemplo, el siguiente c\u00f3digo imprime el mensaje \"Eres mayor de edad\" si la variable edad es mayor o igual a 18:</p> <pre><code>edad = 18\nif edad &gt;= 18:\n print(\"Eres mayor de edad\")\n</code></pre>"},{"location":"content/p2/#la-estructura-elif","title":"La estructura elif","text":"<p>La estructura elif se utiliza para agregar condiciones adicionales a una estructura if. Se eval\u00faan secuencialmente, y el bloque de c\u00f3digo correspondiente a la primera condici\u00f3n que se cumple se ejecuta.</p> <p>La sintaxis de la estructura elif es la siguiente:</p> <pre><code>if condici\u00f3n 1:\n # Bloque de c\u00f3digo que se ejecuta si la condici\u00f3n 1 es verdadera\nelif condici\u00f3n 2:\n # Bloque de c\u00f3digo que se ejecuta si la condici\u00f3n 2 es verdadera\n</code></pre> <p>Por ejemplo, el siguiente c\u00f3digo imprime el mensaje \"Eres mayor de edad\", \"Eres adolescente\" o \"Eres menor de edad\", dependiendo de la edad del usuario:</p> <pre><code>edad = 17\nif edad &gt;= 18:\n print(\"Eres mayor de edad\")\nelif edad &gt;= 16:\n print(\"Eres adolescente\")\nelse:\n print(\"Eres menor de edad\")\n</code></pre>"},{"location":"content/p2/#la-estructura-else","title":"La estructura else","text":"<p>La estructura else se utiliza para ejecutar un bloque de c\u00f3digo si ninguna de las condiciones anteriores se cumple.</p> <p>La sintaxis de la estructura else es la siguiente:</p> <pre><code>if condici\u00f3n 1:\n # Bloque de c\u00f3digo que se ejecuta si la condici\u00f3n 1 es verdadera\nelif condici\u00f3n 2:\n # Bloque de c\u00f3digo que se ejecuta si la condici\u00f3n 2 es verdadera\nelse:\n # Bloque de c\u00f3digo que se ejecuta si ninguna de las condiciones anteriores se cumple\n</code></pre> <p>Por ejemplo, el siguiente c\u00f3digo imprime el mensaje \"Eres menor de edad\" si la variable edad no es mayor o igual a 18:</p> <pre><code>edad = 17\nif edad &gt;= 18:\n print(\"Eres mayor de edad\")\nelse:\n print(\"Eres menor de edad\")\n</code></pre>"},{"location":"content/p2/#ejemplos-de-estructuras-de-control-condicionales","title":"Ejemplos de estructuras de control condicionales","text":"<ol> <li>Comparar dos n\u00fameros</li> </ol> <pre><code>a = 10\nb = 20\nif a &gt; b:\n print(\"a es mayor que b\")\nelif a &lt; b:\n print(\"b es mayor que a\")\nelse:\n print(\"a y b son iguales\")\n</code></pre> <ol> <li>Comparar una cadena con un valor</li> </ol> <pre><code>cadena = \"Hola\"\nif cadena == \"Hola\":\n print(\"La cadena es 'Hola'\")\nelse:\n print(\"La cadena no es 'Hola'\")\n</code></pre> <ol> <li>Validar un n\u00famero</li> </ol> <pre><code>numero = input(\"Introduce un n\u00famero: \")\ntry:\n    numero = int(numero)\n    if numero &gt; 0:\n        print(\"El n\u00famero es positivo\")\n    else:\n        print(\"El n\u00famero es negativo\")\nexcept  ValueError:\n    print(\"El n\u00famero introducido no es v\u00e1lido\")\n</code></pre>"},{"location":"content/p2/#libro-recomendado-de-python","title":"Libro recomendado de Python","text":"<p>Bienvenid@ a El Libro De Python</p>"},{"location":"content/p2/#actividad-de-clase","title":"Actividad de clase","text":"<p>Ejercicios de Python para Resolver en Google Colab</p> <p>\u00a1Bienvenidos a este desaf\u00edo de programaci\u00f3n en Python!\u00a0A continuaci\u00f3n, encontrar\u00e1s 10 ejercicios que te ayudar\u00e1n a practicar lo que has aprendido sobre variables, tipos de datos, entrada y salida, y estructuras de control condicionales.</p> <p>Instrucciones:</p> <ul> <li>Abre Google Colab:\u00a0Ve a\u00a0https://colab.research.google.com</li> <li>Crea un nuevo cuaderno:\u00a0Haz clic en \"Nuevo cuaderno\".</li> <li>Resuelve los ejercicios:\u00a0Para cada ejercicio, crea una nueva celda de c\u00f3digo y escribe el c\u00f3digo Python que lo resuelva.</li> <li>Ejecuta el c\u00f3digo:\u00a0Presiona\u00a0Shift + Enter</li> </ul>"},{"location":"content/p2/#ejercicios","title":"Ejercicios","text":"<ol> <li>Escribe un programa que pida al usuario su nombre y muestre un mensaje de bienvenida usando una cadena f.</li> <li>Crea un programa que solicite dos n\u00fameros al usuario y muestre su suma.</li> <li>Escribe un programa que pida un n\u00famero entero y determine si es par o impar.</li> <li>Crea un programa que calcule el \u00e1rea de un rect\u00e1ngulo pidiendo al usuario el largo y el ancho.</li> <li>Escribe un programa que solicite la edad del usuario y determine si es mayor o menor de edad.</li> <li>Crea un programa que pida una frase al usuario y cuente cu\u00e1ntos caracteres tiene.</li> <li>Escribe un programa que cree una lista de tres frutas, permita a\u00f1adir una fruta ingresada por el usuario y muestre la lista actualizada.</li> <li>Crea un programa que convierta una temperatura de Celsius a Fahrenheit.</li> <li>Escribe un programa que pida un n\u00famero y determine si es positivo, negativo o cero.</li> <li>Crea un programa que imprima los primeros 5 n\u00fameros enteros usando un bucle for.</li> <li>Escribe un programa que cree un diccionario con el nombre, edad y ciudad del usuario, y lo muestre.</li> <li>Crea un programa que pida una palabra y verifique si es un pal\u00edndromo.</li> <li>Escribe un programa que calcule el promedio de tres n\u00fameros ingresados por el usuario.</li> <li>Crea un programa que imprima los n\u00fameros pares del 1 al 10 usando un bucle for.</li> <li>Escribe un programa que cree una tupla con tres colores, pida al usuario un color favorito y verifique si est\u00e1 en la tupla.</li> <li>Crea un programa que cuente las vocales en una palabra ingresada por el usuario.</li> <li>Escribe un programa que determine si un a\u00f1o ingresado por el usuario es bisiesto.</li> <li>Crea un programa que use una constante para el valor de PI y calcule el \u00e1rea de un c\u00edrculo dado su radio.</li> <li>Escribe un programa que concatene dos palabras ingresadas por el usuario.</li> <li>Crea un programa que valide si una contrase\u00f1a ingresada tiene al menos 8 caracteres.</li> </ol>"},{"location":"content/password/","title":"Generar contrase\u00f1a SHA256 para bloquear contenido","text":"<pre><code>powershell -Command \"[System.BitConverter]::ToString([System.Security.Cryptography.SHA256]::Create().ComputeHash([System.Text.Encoding]::UTF8.GetBytes('158789'))).Replace('-','').ToLower()\"\n</code></pre>"},{"location":"content/password/#platilla-para-bloquear-contenido","title":"Platilla para bloquear contenido","text":"<pre><code>&lt;div class=\"password-protected\" data-password-hash=\"f31db6afee933ea691fe16079e00334db73dd8ccadce944d\"&gt;\n  &lt;div class=\"password-form\"&gt;\n    &lt;p&gt;Este contenido est\u00e1 protegido. Por favor, ingresa la contrase\u00f1a para acceder:&lt;/p&gt;\n    &lt;input type=\"password\" class=\"password-input\" placeholder=\"Contrase\u00f1a\"&gt;\n    &lt;button class=\"password-submit md-button md-button--primary\"&gt;Acceder&lt;/button&gt;\n    &lt;p class=\"password-hint\" style=\"display: none;\"&gt;&lt;/p&gt;\n  &lt;/div&gt;        \n  &lt;div class=\"protected-content\"&gt;\n    &lt;!-- Aqu\u00ed va el contenido que deseas proteger --&gt;\n    &lt;p&gt;Este es el contenido protegido.&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"}]}